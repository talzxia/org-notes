* 松本行弘的程序世界

    本书为“Ruby”之父经典力作，展现了大师级的程序思考方式。作者凭借对编程本质的
    深刻认识和对各种技术优缺点的掌握，阐述了Ruby的设计理念，并由此延伸，带领读者
    了解编程的本质，一窥程序设计的奥秘。
    本书不是为了介绍某种特定的技术，而是从宏观的角度讨论与编程相关的各种技术。书
    中第1章介绍了作者对编程问题的新思考和新看法，剩下的内容出处《日经Linux》杂志
    于2005年5月到2009年4月连载的“松本编程模式讲坛”，其中真正涉及“模式”的内容
    并不多，大量篇幅都用于介绍技术内幕和背景分析等内容，使读者真正了解相关技术的
    立足点。另外，书中还包含许多以Ruby、Lisp、Smalltalk、Erlang、JavaScript等动
    态语言所写成的范例。
- Ruby之父佳作，进入不同凡响的程序世界
- 深入剖析程序设计的道与术
- 举一反三，触类旁通

* 内容提要

本书是探索程序设计思想和方法的经典之作。作者从全局的角度，利用大量的程序示例及图
表，深刻阐述了Rub 编程语言的设计理念，并以独特的视角考察了与编程相关的各种技术。
阅读本书不仅可以深入了解编程领域各个要素之间的关系，而且能够学到大师的思考方法。
本书面向各层次程序设计人员和编程爱好者，也可以供相关技术人员参考。


* 推荐序

在流行的编程语言中，Ruby 比较另类，这是因为大多数编程语言的首要着眼点在于为解决
特定的问题领域而设计语言，而Ruby的首要着眼点在于“人性化”，让程序员充分享受编程
的乐趣。由于组织国内的Ruby会议，我曾两次邀请松本行弘来中国。他是一位性格平和、对
生活充满热爱的人，在演讲吕也一再传递code for fun的宗旨，即编程语言不应该是冷冰冰
地给机器阅读的执行的指令，而应该昌让程序员编程的工作过程变成一种充满乐趣和享受的
过程。而且，松本先生发明Ruby语言也是因为他对创造一种人性化的面向对象脚本语言的热
爱。

程序员社区经常拿另外一个主流的面向对象脚本语言Python 来和 Ruby 做对比。从全球范
围来看，Python 的社区更大，应用更广泛，但Ruby的语法相对Python来说更强大和宽松，
给程序员发挥的自由度更大，可以基于Ruby创建各个领域的DSL,比方说Ruby on Rails就是
一个基于Ruby的Web快速开发领域的DSL。

总之，Ruby 语言的这种“人性化”以及给程序员很大编程自由度的气质奠定了整个Ruby社
区的气质：热爱生活的程序员，所求编程的自由度，带点非主流的极客色彩。也下因为如此，
Ruby和基于Ruby的Rails得到了硅谷许许多多创业公司青睐，有名者如Twitter、Groupon、
Hulu、github等。而这种气质也鲜明地体现在Rails框架的创建者David Heinemeier
Hansson及其所在的37signals公司身上。37signals的20多位员工遍全球，每天只上班四天，
David Heinemeier Hansson 本人不是一位保时捷车队的职业赛车手。

当然，Ruby并非只在非主流程序员社区中流行，随着全球IT产业进行云计算时代，Ruby也发
挥着越来越大的作用。著名的SAAS厂商salesforce 在2010年底以2.1亿美元收购了PAAS厂商
Heroku,并且在2011年7月聘请松本行担任Heroku首席架构师，开拓Ruby在云计算领域的应用。
Heroku 本身就是一个完全采用Ruby架构的PAAS平台，同样支持Ruby的PAAS厂商还有
EngineYard、VMware等。随着这些云计算厂商的努力，Ruby必然在未来得到越来越广泛的应
用。
我之前阅读了本书的部分章节，这本书实际上是松本行弘从一个编程语言设计者的角度去看
待各种各样的流行编程语言，分析它们有哪些特点，以及Ruby编程语言是如何取舍的。Ruby
语言的设计本身大量参考了一个更古老而著名的面向对象编程方法的开山之作Smalltalk,而
且从函数式编程语言鼻祖Lisp“偷师学艺”了不少好东西。程序员社区有个著名的说法：任
何现代编程语言都脱胎于Smalltalk 和Lisp,都与这两个编程语言有着似曾相识的特性，自
Smalltalk和Lisp诞生以来，编程语言领域可谓大势已定了。因此，集这两种编程语言诸多
特点于一身的Ruby语言很值得编程爱好者去学习，而看看Ruby设计师是怎么设计Ruby语言的，
则可以让人高屋建领地理解一些主流的编程语言。

                 范凯

* 中文版序

从年轻的时候开始，我就对编程语言有着极为浓厚的兴趣。比起“使用计算机干什么”这一
问题，我总是一门心思想着“如何将自己的意图传达给计算机”。从这个意义上说，我认为
自己是个“怪人”。但是，想选择一个能让自己的工作变得轻松的编程语言，想编写一种让
人用起来感到快乐的编程语言，一直是我梦寐以求的，这种迫切的心情怕不输于任何人。虽
说是有点自卖自夸，但是Ruby确实给我带来了“快乐”，这一结果让我感到很满足。

让我感到惊奇的是，有很多人，包括那些没有我这么“怪”的人，都对这种快乐有着共鸣。
Ruby自1995年在互联网上公布以来，着实让世界各地的程序员都认识了它，共享着这种快乐，
提高了软件开发的生产力。完全出乎我意料的是，世界各地的人，不管是东方还是西方，都
极为欣赏Ruby。在刚开始开发Ruby的时候，我想都没有想到过有这样的结果，程序员的感觉
会超越人种、国籍、文化，有如此之多的共通之处。

现在，为世界各地的程序员所广泛接受的Ruby，正带来一种新的文化。已经有越来越多的开
发人员，在实践中果敢地施行着Ruby语言及其社区所追求的“对高生产力的追求”、“富有
柔性的软件开发”、“对程序员人性的尊重”、“鼓起勇气挑战新技术”等原则。在Ruby以
前，这些想法也都很好，却一直实践不起来。我相信，Ruby的卓越之处，不仅在于语言能力，
而且更重要的是引领了这种文化的践行。

本书在解说编程中的技术与原则时，不局限于表面现象，而是努力挖掘其历史根源，提示其
本质。虽然很多章节都以Ruby为题材，但这些原则对于Ruby以外的语言也行之有效。衷心希
望大家能够实践本书中所讲述的各项原则，成为一个更好的开发人员。

      松本行弘

2011年4月18日

* DONE 前言<2016-08-30 二 14:10>
  CLOSED: [2016-08-30 二 15:30]
  :LOGBOOK:
  - State "DONE"       from "STARTED"    [2016-08-30 二 15:30]
  CLOCK: [2016-08-30 二 14:10]--[2016-08-30 二 15:30] =>  1:20
  :END:

本书的目的不是深入讲解哪种特定的技术，也没有全面讨论我所开发的编程语言Ruby，而是
从全局角度考察了与编程相关的各种技术。读者千万不要以为拿着这本书，就可以按图索骥
地解决实际问题了。实际上，最好反它看成是一幅粗略勾勒出了编程世界诸要素之间关系的
“世界地图”。

每种技术、思想都有其特定的目的、渊源和发展进步的过程。本书试图换一个角度重新考察
各种技术。如果你看过后能够感觉到“啊，原来是这样的呀!”或者“噢，原来这个技术的
立足点在这里呀!”那么我就深感心慰了。我的愿望就是这些知识能够激发读者学习新技术
的求知欲。

本书的第2章到第14章，是在《日经Linux》杂志于2005年5月到2009年4月连载的“松本编程
模式讲坛”基础上编辑修改而成的。但实际上连载与最开始的设想并不一致，真正涉及“模
式”的内容并不多，倒是技术内幕、背景分析等内容占了主流。现在想来，大方向并没有错。

除了连载的内容之外，本书还记录了我对编程问题的新思考和新看法。特别是第1章“我为
什么开发Ruby”，针对“为什么是Ruby”这一点，比其他杂志做了更加深入的解说。另外，
在每章的末尾增加了一个小专栏。

对于连载的内容，因为要出成一本书，除修改了明显的错误和不合时代的部分内容之外，我
力求每一章都独成一体、内容完整，同时也保留了连载时的风貌。通读全书，读者也许会感
到有些话题或讲解是重复的，这一点敬请原谅。

我的本职工作是程序员，不能集中大段时间去写书，不过无论如何最后总算是赶出来了。非
常感谢我的家人，她们在这么长时间里宽容着我这个情绪不稳的丈夫和父亲。

稿子写完了，书也出来了，想着总算告一段落了吧，而《日经Linux》又要开始连载“松本
行弘技术剖析”了，恐怕还要继续让家里人劳心。

松本行弘

2009年4月于樱花季节过后的松江


* DONE 第一章 我为什么开发Ruby
  CLOSED: [2016-09-01 Thu 17:27]
  :LOGBOOK:
  - State "DONE"       from "STARTED"    [2016-09-01 Thu 17:27]
  CLOCK: [2016-09-01 Thu 14:30]--[2016-09-01 Thu 17:27] =>  2:57
  :END:
1.1 我为什么开发Ruby

Ruby是起源于日本的编程语言。近年来，特别是因为其在Web开发方面的效率很高,Ruby引起
了全世界的关注，它的应用范围也扩展到了很多企业领域。

作为一门编程语言，Ruby正在被越来越多的人所了解，而作为一介工程师的我，松本行弘，
刚开始的时候并没有想过“让全世界的人都来用它”或者“这下子可以大赚一笔了”，一个
仅仅是从兴趣开始的项目却在不知不觉中发展成了如今的样子。

当然了，那时开发Ruby并不是我的本职工作，纯属个人兴趣，我是把它作为一个自由软件来
开发的。但是世事弄人，现在开发Ruby竟然变成了我的本职工作了，想想也有些不可思议。

“你为什么开发Ruby？” 每当有人这样问我的时候，我认为最合适的回答应该就像Linux的
开发者Linus Torvalds对“为什么开发Linux”的回答一样吧———

“因为它给我带来了快乐。”

当我还是一个高中生，刚刚开始学习编程的时候，不知何故，就对编程语言产生了兴趣。

周围很多喜欢计算机的人，[fn:no.1]有的是“想开发游戏”，有的是“想用它来做计算”，等等，都
是“想用计算机来做些什么”。而我呢，则想弄明白“要用什么编程语言来开发”、“用什
么语言开发更快乐”。

高中的时候，我自己并不具备开发一种编程语言所必需的技术知识，而且当时也没有计算机。
但是，我看了很多编程语言类的书籍和杂志，知道了“还有像Lisp这样优秀的编程语言”、
“Smalltalk是做面向对象设计的”，等等，在这些方面我很着迷。上大学时就自然而然地
选修了计算机语言专业。10年后，我通过开发Ruby实现了自己的梦想。

从1993年开发Ruby到现在已经过去16年了。在这么久的时间里，我从未因为设计Ruby而感到
厌烦。开发编程语言真是一件非常有意思的事情。

1.1.1 编程语言的重要性

为什么会喜欢编程语言？我自己也说不清。至少，我知道编程语言是非常重要的。

最根本的理由是：语言体现了人类思考的本质。在地球上，没有任何超越人类智慧的生物，
也只有人类能够使用语言。所以，正是因为语言，才造成了人类和别的生物的区别；正是因
为语言，人和人之间才能传递知识和交流思想，才能做深入的思考。如果没有了语言人类和
别的动物也就不会有太大的区别了。

在语言领域里，有一个Sapir-Whirf假说，认为语言可以影响说话者的思想。也就是说，语
言的不同，造成了思想的不同。人类的自然语言是不是像这个假说一样，我不是很清楚，但
是我觉得计算机语言很符合这个假说。也就是说，程序员由于使用的编程语言不同，他的思
考方法和编写出来的代码都会受到编程语言的很大影响。

也可以这么说，如果我们选择了好的编程语言，那么成为好程序员的可能性就会大很多。

20年来一直被奉为名著的《人月神话》的作者Frederick. Brooks说过：一个程序员，不管
他使用什么编程语言，他在一定时间里编写的程序行数是一定的。如果真是这样，一个程序
员一天可以写500行程序，那么不论他用汇编、C,不是Ruby，他一天都应该可以写500行程序。

但是，汇编的500行程序和Ruby的500行程序所能做的事情是有天壤之别的。程序员根据所选
择编程语言的不同，他的开发效率就会有十倍、百倍甚至上千倍的差别。

由于价格降低、性能提高，计算机已经很普及了。现在基本上各个领域都使用了计算机，但
如果没有软件，那么计算机这个盒子恐怕一点用都没有了。而软件开发，就是求能够用更少
的成本、更短的时间，开发出更多的软件。

需要开发的软件越来越多，开发成本却有限，所以对于开发效率的要求就很高。编程语言就
成了解决这个矛盾的重要工具。

1.1.2 Ruby的原则

Ruby本来是我因兴趣开发的。因为对多种编程语言都很感兴趣，我广泛对比了各种编程语言，
哪些特性好，哪些特性没什么用，等等，通过一一进行比较、选择，最终把一些好的特性吸
纳进了Ruby编程语言之中。

如果什么特性都不假思索地吸纳，那么这种编程语言只会变成以往编程语言的翻版，从而失
去了它作为一种新编程语言的存在价值。

编程语言的设计是很困难的，需要仔细斟酌。值得高兴的是，Ruby的设计很成功，很多人都
对Ruby给出了很好的评价。

那么，Ruby编程语言的设计原则是什么呢？

Ruby编程语言的设计目标是，让作为语言设计者的我能够轻松编程，进而提高开发效率。

根据这个目标，我制订了以下3个设计原则。

- 简洁性
- 扩展性
- 稳定性

关于这些原则，下面分别加以说明。

1.1.3 简洁性

以Lisp编程语言为基础而开发的商业软件Viaweb被Yahoo收购后，Viaweb的作者PaulGraham
也成了大富豪。最近他又成了知名的技术专栏作家，写了一篇文章就叫“简洁就是力量”。

他还撰写了很多倡导Lisp编程语言的文章。在这些文章中他提到，编程语言在这半个世纪以
来是向着简洁化的方向发展的，从程序的简洁程度就可以看出一门编程语言本身的能力。上
面提到的Brooks也持同样的观点。

随着编程语言的演进，程序员已经可以更简单、更抽象地编程了，这是很大的进步。另外随
着计算机性能的提高，以前在编程语言里实现不了的功能，现在也可以做到了。

面向对象编程就是这样的例子。面向对象的思想只是把数据和方法看作一个整体，当作对象
来处理，并没有解决以前解决不了的问题。

用面向对象记述的算法也一定可以用非面向对象的方法来实现。而且，面向对象的方法并没
有实现任何新的东西，却要在运行时判定要调用的方法，倾向于增大程序的运行开销。即使
是实现同样的算法，面向对象和程序往往更慢，过去计算机的执行速度不够快，很难请允许
我像这样的“浪费”。



* Footnotes

[fn:no] 当时喜欢计算机的人当然还是少数。
