* 松本行弘的程序世界

    本书为“Ruby”之父经典力作，展现了大师级的程序思考方式。作者凭借对编程本质的
    深刻认识和对各种技术优缺点的掌握，阐述了Ruby的设计理念，并由此延伸，带领读者
    了解编程的本质，一窥程序设计的奥秘。
    本书不是为了介绍某种特定的技术，而是从宏观的角度讨论与编程相关的各种技术。书
    中第1章介绍了作者对编程问题的新思考和新看法，剩下的内容出处《日经Linux》杂志
    于2005年5月到2009年4月连载的“松本编程模式讲坛”，其中真正涉及“模式”的内容
    并不多，大量篇幅都用于介绍技术内幕和背景分析等内容，使读者真正了解相关技术的
    立足点。另外，书中还包含许多以Ruby、Lisp、Smalltalk、Erlang、JavaScript等动
    态语言所写成的范例。
- Ruby之父佳作，进入不同凡响的程序世界
- 深入剖析程序设计的道与术
- 举一反三，触类旁通

* 内容提要

本书是探索程序设计思想和方法的经典之作。作者从全局的角度，利用大量的程序示例及图
表，深刻阐述了Rub 编程语言的设计理念，并以独特的视角考察了与编程相关的各种技术。
阅读本书不仅可以深入了解编程领域各个要素之间的关系，而且能够学到大师的思考方法。
本书面向各层次程序设计人员和编程爱好者，也可以供相关技术人员参考。


* 推荐序

在流行的编程语言中，Ruby 比较另类，这是因为大多数编程语言的首要着眼点在于为解决
特定的问题领域而设计语言，而Ruby的首要着眼点在于“人性化”，让程序员充分享受编程
的乐趣。由于组织国内的Ruby会议，我曾两次邀请松本行弘来中国。他是一位性格平和、对
生活充满热爱的人，在演讲吕也一再传递code for fun的宗旨，即编程语言不应该是冷冰冰
地给机器阅读的执行的指令，而应该昌让程序员编程的工作过程变成一种充满乐趣和享受的
过程。而且，松本先生发明Ruby语言也是因为他对创造一种人性化的面向对象脚本语言的热
爱。

程序员社区经常拿另外一个主流的面向对象脚本语言Python 来和 Ruby 做对比。从全球范
围来看，Python 的社区更大，应用更广泛，但Ruby的语法相对Python来说更强大和宽松，
给程序员发挥的自由度更大，可以基于Ruby创建各个领域的DSL,比方说Ruby on Rails就是
一个基于Ruby的Web快速开发领域的DSL。

总之，Ruby 语言的这种“人性化”以及给程序员很大编程自由度的气质奠定了整个Ruby社
区的气质：热爱生活的程序员，所求编程的自由度，带点非主流的极客色彩。也下因为如此，
Ruby和基于Ruby的Rails得到了硅谷许许多多创业公司青睐，有名者如Twitter、Groupon、
Hulu、github等。而这种气质也鲜明地体现在Rails框架的创建者David Heinemeier
Hansson及其所在的37signals公司身上。37signals的20多位员工遍全球，每天只上班四天，
David Heinemeier Hansson 本人不是一位保时捷车队的职业赛车手。

当然，Ruby并非只在非主流程序员社区中流行，随着全球IT产业进行云计算时代，Ruby也发
挥着越来越大的作用。著名的SAAS厂商salesforce 在2010年底以2.1亿美元收购了PAAS厂商
Heroku,并且在2011年7月聘请松本行担任Heroku首席架构师，开拓Ruby在云计算领域的应用。
Heroku 本身就是一个完全采用Ruby架构的PAAS平台，同样支持Ruby的PAAS厂商还有
EngineYard、VMware等。随着这些云计算厂商的努力，Ruby必然在未来得到越来越广泛的应
用。
我之前阅读了本书的部分章节，这本书实际上是松本行弘从一个编程语言设计者的角度去看
待各种各样的流行编程语言，分析它们有哪些特点，以及Ruby编程语言是如何取舍的。Ruby
语言的设计本身大量参考了一个更古老而著名的面向对象编程方法的开山之作Smalltalk,而
且从函数式编程语言鼻祖Lisp“偷师学艺”了不少好东西。程序员社区有个著名的说法：任
何现代编程语言都脱胎于Smalltalk 和Lisp,都与这两个编程语言有着似曾相识的特性，自
Smalltalk和Lisp诞生以来，编程语言领域可谓大势已定了。因此，集这两种编程语言诸多
特点于一身的Ruby语言很值得编程爱好者去学习，而看看Ruby设计师是怎么设计Ruby语言的，
则可以让人高屋建领地理解一些主流的编程语言。

                 范凯

* 中文版序

从年轻的时候开始，我就对编程语言有着极为浓厚的兴趣。比起“使用计算机干什么”这一
问题，我总是一门心思想着“如何将自己的意图传达给计算机”。从这个意义上说，我认为
自己是个“怪人”。但是，想选择一个能让自己的工作变得轻松的编程语言，想编写一种让
人用起来感到快乐的编程语言，一直是我梦寐以求的，这种迫切的心情怕不输于任何人。虽
说是有点自卖自夸，但是Ruby确实给我带来了“快乐”，这一结果让我感到很满足。

让我感到惊奇的是，有很多人，包括那些没有我这么“怪”的人，都对这种快乐有着共鸣。
Ruby自1995年在互联网上公布以来，着实让世界各地的程序员都认识了它，共享着这种快乐，
提高了软件开发的生产力。完全出乎我意料的是，世界各地的人，不管是东方还是西方，都
极为欣赏Ruby。在刚开始开发Ruby的时候，我想都没有想到过有这样的结果，程序员的感觉
会超越人种、国籍、文化，有如此之多的共通之处。

现在，为世界各地的程序员所广泛接受的Ruby，正带来一种新的文化。已经有越来越多的开
发人员，在实践中果敢地施行着Ruby语言及其社区所追求的“对高生产力的追求”、“富有
柔性的软件开发”、“对程序员人性的尊重”、“鼓起勇气挑战新技术”等原则。在Ruby以
前，这些想法也都很好，却一直实践不起来。我相信，Ruby的卓越之处，不仅在于语言能力，
而且更重要的是引领了这种文化的践行。

本书在解说编程中的技术与原则时，不局限于表面现象，而是努力挖掘其历史根源，提示其
本质。虽然很多章节都以Ruby为题材，但这些原则对于Ruby以外的语言也行之有效。衷心希
望大家能够实践本书中所讲述的各项原则，成为一个更好的开发人员。

      松本行弘

2011年4月18日

* DONE 前言<2016-08-30 二 14:10>
  CLOSED: [2016-08-30 二 15:30]
  :LOGBOOK:
  - State "DONE"       from "STARTED"    [2016-08-30 二 15:30]
  CLOCK: [2016-08-30 二 14:10]--[2016-08-30 二 15:30] =>  1:20
  :END:

本书的目的不是深入讲解哪种特定的技术，也没有全面讨论我所开发的编程语言Ruby，而是
从全局角度考察了与编程相关的各种技术。读者千万不要以为拿着这本书，就可以按图索骥
地解决实际问题了。实际上，最好反它看成是一幅粗略勾勒出了编程世界诸要素之间关系的
“世界地图”。

每种技术、思想都有其特定的目的、渊源和发展进步的过程。本书试图换一个角度重新考察
各种技术。如果你看过后能够感觉到“啊，原来是这样的呀!”或者“噢，原来这个技术的
立足点在这里呀!”那么我就深感心慰了。我的愿望就是这些知识能够激发读者学习新技术
的求知欲。

本书的第2章到第14章，是在《日经Linux》杂志于2005年5月到2009年4月连载的“松本编程
模式讲坛”基础上编辑修改而成的。但实际上连载与最开始的设想并不一致，真正涉及“模
式”的内容并不多，倒是技术内幕、背景分析等内容占了主流。现在想来，大方向并没有错。

除了连载的内容之外，本书还记录了我对编程问题的新思考和新看法。特别是第1章“我为
什么开发Ruby”，针对“为什么是Ruby”这一点，比其他杂志做了更加深入的解说。另外，
在每章的末尾增加了一个小专栏。

对于连载的内容，因为要出成一本书，除修改了明显的错误和不合时代的部分内容之外，我
力求每一章都独成一体、内容完整，同时也保留了连载时的风貌。通读全书，读者也许会感
到有些话题或讲解是重复的，这一点敬请原谅。

我的本职工作是程序员，不能集中大段时间去写书，不过无论如何最后总算是赶出来了。非
常感谢我的家人，她们在这么长时间里宽容着我这个情绪不稳的丈夫和父亲。

稿子写完了，书也出来了，想着总算告一段落了吧，而《日经Linux》又要开始连载“松本
行弘技术剖析”了，恐怕还要继续让家里人劳心。

松本行弘

2009年4月于樱花季节过后的松江


* DONE 第一章 我为什么开发Ruby
  CLOSED: [2016-09-01 Thu 17:27]
  :LOGBOOK:
  - State "DONE"       from "STARTED"    [2016-09-01 Thu 17:27]
  CLOCK: [2016-09-01 Thu 14:30]--[2016-09-01 Thu 17:27] =>  2:57
  :END:

** 1.1 我为什么开发Ruby

 Ruby是起源于日本的编程语言。近年来，特别是因为其在Web开发方面的效率很高,Ruby引起
 了全世界的关注，它的应用范围也扩展到了很多企业领域。

 作为一门编程语言，Ruby正在被越来越多的人所了解，而作为一介工程师的我，松本行弘，
 刚开始的时候并没有想过“让全世界的人都来用它”或者“这下子可以大赚一笔了”，一个
 仅仅是从兴趣开始的项目却在不知不觉中发展成了如今的样子。

 当然了，那时开发Ruby并不是我的本职工作，纯属个人兴趣，我是把它作为一个自由软件来
 开发的。但是世事弄人，现在开发Ruby竟然变成了我的本职工作了，想想也有些不可思议。

 “你为什么开发Ruby？” 每当有人这样问我的时候，我认为最合适的回答应该就像Linux的
 开发者Linus Torvalds对“为什么开发Linux”的回答一样吧———

 “因为它给我带来了快乐。”

 当我还是一个高中生，刚刚开始学习编程的时候，不知何故，就对编程语言产生了兴趣。

 周围很多喜欢计算机的人，[fn:no.1]有的是“想开发游戏”，有的是“想用它来做计算”，等等，都
 是“想用计算机来做些什么”。而我呢，则想弄明白“要用什么编程语言来开发”、“用什
 么语言开发更快乐”。

 高中的时候，我自己并不具备开发一种编程语言所必需的技术知识，而且当时也没有计算机。
 但是，我看了很多编程语言类的书籍和杂志，知道了“还有像Lisp这样优秀的编程语言”、
 “Smalltalk是做面向对象设计的”，等等，在这些方面我很着迷。上大学时就自然而然地
 选修了计算机语言专业。10年后，我通过开发Ruby实现了自己的梦想。

 从1993年开发Ruby到现在已经过去16年了。在这么久的时间里，我从未因为设计Ruby而感到
 厌烦。开发编程语言真是一件非常有意思的事情。

*** 1.1.1 编程语言的重要性

  为什么会喜欢编程语言？我自己也说不清。至少，我知道编程语言是非常重要的。

  最根本的理由是：语言体现了人类思考的本质。在地球上，没有任何超越人类智慧的生物，
  也只有人类能够使用语言。所以，正是因为语言，才造成了人类和别的生物的区别；正是因
  为语言，人和人之间才能传递知识和交流思想，才能做深入的思考。如果没有了语言人类和
  别的动物也就不会有太大的区别了。

  在语言领域里，有一个Sapir-Whirf假说，认为语言可以影响说话者的思想。也就是说，语
  言的不同，造成了思想的不同。人类的自然语言是不是像这个假说一样，我不是很清楚，但
  是我觉得计算机语言很符合这个假说。也就是说，程序员由于使用的编程语言不同，他的思
  考方法和编写出来的代码都会受到编程语言的很大影响。

  也可以这么说，如果我们选择了好的编程语言，那么成为好程序员的可能性就会大很多。

  20年来一直被奉为名著的《人月神话》的作者Frederick. Brooks说过：一个程序员，不管
  他使用什么编程语言，他在一定时间里编写的程序行数是一定的。如果真是这样，一个程序
  员一天可以写500行程序，那么不论他用汇编、C,不是Ruby，他一天都应该可以写500行程序。

  但是，汇编的500行程序和Ruby的500行程序所能做的事情是有天壤之别的。程序员根据所选
  择编程语言的不同，他的开发效率就会有十倍、百倍甚至上千倍的差别。

  由于价格降低、性能提高，计算机已经很普及了。现在基本上各个领域都使用了计算机，但
  如果没有软件，那么计算机这个盒子恐怕一点用都没有了。而软件开发，就是求能够用更少
  的成本、更短的时间，开发出更多的软件。

  需要开发的软件越来越多，开发成本却有限，所以对于开发效率的要求就很高。编程语言就
  成了解决这个矛盾的重要工具。

*** 1.1.2 Ruby的原则

  Ruby本来是我因兴趣开发的。因为对多种编程语言都很感兴趣，我广泛对比了各种编程语言，
  哪些特性好，哪些特性没什么用，等等，通过一一进行比较、选择，最终把一些好的特性吸
  纳进了Ruby编程语言之中。

  如果什么特性都不假思索地吸纳，那么这种编程语言只会变成以往编程语言的翻版，从而失
  去了它作为一种新编程语言的存在价值。

  编程语言的设计是很困难的，需要仔细斟酌。值得高兴的是，Ruby的设计很成功，很多人都
  对Ruby给出了很好的评价。

  那么，Ruby编程语言的设计原则是什么呢？

  Ruby编程语言的设计目标是，让作为语言设计者的我能够轻松编程，进而提高开发效率。

  根据这个目标，我制订了以下3个设计原则。

  - 简洁性
  - 扩展性
  - 稳定性

  关于这些原则，下面分别加以说明。

*** 1.1.3 简洁性

  以Lisp编程语言为基础而开发的商业软件Viaweb被Yahoo收购后，Viaweb的作者PaulGraham
  也成了大富豪。最近他又成了知名的技术专栏作家，写了一篇文章就叫“简洁就是力量”。[fn:no2]

  他还撰写了很多倡导Lisp编程语言的文章。在这些文章中他提到，编程语言在这半个世纪以
  来是向着简洁化的方向发展的，从程序的简洁程度就可以看出一门编程语言本身的能力。上
  面提到的Brooks也持同样的观点。

  随着编程语言的演进，程序员已经可以更简单、更抽象地编程了，这是很大的进步。另外随
  着计算机性能的提高，以前在编程语言里实现不了的功能，现在也可以做到了。

  面向对象编程就是这样的例子。面向对象的思想只是把数据和方法看作一个整体，当作对象
  来处理，并没有解决以前解决不了的问题。

  用面向对象记述的算法也一定可以用非面向对象的方法来实现。而且，面向对象的方法并没
  有实现任何新的东西，却要在运行时判定要调用的方法，倾向于增大程序的运行开销。即使
  是实现同样的算法，面向对象和程序往往更慢，过去计算机的执行速度不够快，很难请允许
  我像这样的“浪费”。

  而现在，由于计算机性能大大提高，只要可以提高软件开发效率，浪费一些计算机资源也无
  所谓了。

  再举一些例子。比如内存管理，不用的内存现在可用垃圾收集器自动释放，而不用程序员自
  己去释放了。变量和表达式的类型检查，在执行时已经可以自动检查，而不用在编译时检查
  了。

  我们看一个关于斐那契（Fibonacci）数的例子。图1-1所示为用Jave程序来计算斐波那契数。
  算法有很多种，我们最常用的递归算法来实现。

  图1-2所示为完全一样的实现方法，它是用Ruby编程语言写的，算法完全一样。和Java程序
  相比，可以看到构造完全一样，但是程序更简洁。Ruby 不进行明确的数据类型定义，不必
  要的声明都可以省略。所以，程序就非常简洁了。
  #+BEGIN_SRC org
  class Sample {
   private static int fib (int n){
     if (n<2){
         return n;
      }
      else {
           return fib (n-2) +fib (n-1);
          }
    }
    public static void main(String[]argv){
      System.out.println("bib(6)-"+fib(6));
   }
  }
  #+END_SRC
  图1-1 计算斐波那契数的Java程序
  #+BEGIN_SRC org

  def fib(n)
    if n<2
     n
    else
      fib(n-2) +fib(n-1)
    end
  end
  print "fib(6)=",fib(6),"\n"
  #+END_SRC
  图1-2 计算斐波那契数的Ruby程序

  算法的教科书总是用伪码来描述算法。如果像这样用实际的编程语言来描述算法，那么像类
  型定义这样的非实质代码就会占很多行，让人不能专心于算法。
  如果可以反伪码中非实质的东西去掉，只保留描述算法的部分就直接运行，那么这种编程语
  言不就是最好的吗？ Ruby的目标就是成为开发效率高、“能直接运行的伪码式语言”。

*** 1.1.4 扩展性

下一个设计原则是“扩展性”。编程语言作为软件开发工具，其最大的特征就是对要实现的
功能事先没有限制。“如果想做就可以做到”，这听起来像小孩子说的话，但在编程语言的
世界里，真的就是这么一回事。不管在什么领域，做什么处理，只要用一种编程语言编写出
了程序，我们就可以说这种编程语言适用于这一领域。而且，涉及领域之广远远超出我们当
初要预想。

1999年，关于Ruby的第一本书《面向对象脚本语言Ruby》出版的时候，我在里面写道，
“Ruby 不适合的领域”包括“以数值计算为主的程序”和“数万行的大型程序”。

但在几年后，规模达几万行、几十万行的Ruby程序被开发出来了。气象数据分析，乃至生物
领域中也用到了Ruby。现在，美国国家海洋和航天局（NOAA,National Oceanic and
Atmospheric Administration)、美国国家航空和航天局（NASA，National Aeronautice
and Space Administration)也在不同的系统中运用了Ruby。

情况就是这样，编程语言开发者事先并不知道这种编程语言会用来开发什么，会在哪些领域
中应用。所以，编程语言的扩展性非常重要。

实现扩展性的一个重要方法是抽象化。抽象化是指把数据和要做的处理封装起来，就像一个
黑盒子，我们不知道它的内部是怎么实现的，但是可以用它。

以前的编程语言在抽象化方面是很弱的，要做什么处理首先要了解很多编程语言的细节。而
很多面向对象或者函数式的现代编程语言，都在抽象化方面做得很好。

Ruby也不例外。Ruby从刚开始设计时就用了面向对象的设计方法，数据和处理的抽象化提高
了它的开发效率。我在1993年设计Ruby时，在脚本编程语言中采用面向对象思想的还很少，
用类库方式来提供编程语言的就更少了。所以现在Ruby的成功，说明当时采用面向对象方法
的判断是正确的。

Ruby的扩展性不仅仅体现在这些方面。

比如Ruby以程序块这种明白易懂的形式给程序员提供了相当于Lisp高阶函数的特性，使“普
通的程序员”也能够通过自定义来实现控制结构的高阶函数扩展。又比如已有类的扩展特性，
虽然有一定的危险性，但是程序却可以非常灵活地扩展。关于这些面向对象、程序块、类扩
展特性的内容，后面的章节还会详细介绍。

这些特性的共同特点是，它们都表明了编程语言让程序员最大限度地获得了扩展能力。编程
语言不是从安全角度考虑以减少程序员犯错误，而是在程序员自己负责的前提下为他提供最
大限度发挥能力的灵活性。我作为Ruby的设计者，也是Ruby的最初用户，从这种设计的结果
可以看出，Ruby看重的不是明哲保身，而是如何最大限度地发挥程序员自身的能力。

关于扩展性，有一点是不能忽视的，即“不要因为想当然而加入无谓的限制”。比如说，刚
开始开发Unicode时，开发者想当然地认为16们（65535个字符）就足够容纳世界上所有的文
字了；同样，Y2K问题也是因为想当然地认为用2位数表示日期就够了才导致的。从某种角度
说，编程的历史就是因为想当然而失败的历史。而Ruby对整数范围不做任何限定，尽最大努
力排除“想当然”。

*** 1.1.5 稳定性

虽然Ruby非常重视扩展性，但是有一个特性，尽管明知道它能带来巨大的扩展性，我却一直
将其拒之门外。那就是宏，特别是Lisp风格的宏。

宏可以替换掉原有的程序，给原有的程序加入新的功能。如果有了宏，不管的控制结构，还
是赋值，都可以随心所欲的进行扩展。事实上，Lisp编程语言提供的控制结构很大一部分都
是用宏来定义的。

所谓Lisp流，其语言核心部分仅仅提供极为有限的特性和构造，其余的控制结构都是在编译
时通过用宏来组装其核心特性来实现的。这也就意味着，由于有了这种无与伦比的扩展性，
只要掌握了Lisp基本语法S式（从本质上讲就是括号表达式），就可以开发出千奇百怪的语
言。Common Lisp 的读取宏提供了在读取S式的同时进行语法变换的功能，这就在实际上摆
脱了S式的束缚，任何语法的语言都可以用Lisp来实现。

那么，我为什么拒绝在Ruby中引入LIsp那样的宏呢？ 这是因为，如果在编程语言中引入宏
的话，活用宏的程序就会像是用完全不同的专用编程语言写出来的一样。比如说Lisp就经常
有这样的现象，活用宏编写的程序A和程序B，只有很少一部分昌共通的，从语法到词汇都各
不相同，完全像是用不同的编程语言写的。

对程序员来说，程序的开发效率固然很重要，但是写出的程序是否具有很高的可读性也非常
重要。从整体来看，程序员读程序的时间可能比写程序的时间还长。读程序包括为理解程序
的功能去读，或者是为维护程序去读，或者是为调试程序去读。

编程语言的语法是解读程序的路标。也就是说，我们可以不用追究程序或库提供的类和方法
的详细功能，但是，“这里调用了函数”、“这里有判断分支”等基本的“常识”在我们读
程序时很重要。

可是一旦引入了宏定义，这一常识就不再适用了。看起来像是方法调用，而实际上可能是控
制结构，也可能是赋值，也可能有非常严重的副作用，这就需要我们去查阅每个函数的方法
的文档，解读程序就会变得相当困难。

当然了，我知道世界上有很多Lisp程序员并不受此之累，他们只是极少数的一部分程序员。

我相信，作为在世界上广泛使用的编程语言，应该有稳定的语法，不能像随风飘荡的灯芯那
样闪烁不定。

*** 1.1.6 一切皆因兴趣

当然，Ruby不是世界上唯一的编程语言，也不能说它是最好的编程语言。各种各样的编程语
言可以在不同的领域吕应用，各有所长。我自己以及其他Ruby程序员，用Ruby开发很高，所
以觉得Ruby“最为得心应手”。当然，用惯了Python或者Lisp的程序员，也会觉得那些编程
语言是最好的。

不管怎么说，编程语言存在的目的是让人用它来开发程序，并且尽量能提高开发效率。这样
的话，才能让人在开发中体会到编程的乐趣。

我在海外讲演的时候，和很多人交流过使用Ruby的感想，比较有代表性的是：“用Ruby开发
很快乐，谢谢!”

是啊，程序开发本来就是一件很快乐、很刺激和很有创造性的事情。想起中学的时候，用功
能不强的BASIC编程语言开发，当时也是很快乐的。当然，工作中会有很多的限制和困难，
编程也并不都是一直快乐的，这也是世之常情。

Ruby能够提供很高的开发效率，让我们在工作中摆脱很多困难和烦恼，这也是我开发Ruby的
目的之一吧。

* Footnotes

[fn:no2] Paul Graham 目前是世界知名的天使投资人，其公司Y Combinator投资了很多极
有前途的创业项目。Paul Graham曾出版过两本Lisp专著，最新著作《黑客与画家》已经由
人民邮电出版社出版。————编者注

[fn:no] 当时喜欢计算机的人当然还是少数。
