C primer Plus Sixty Edition
- 经久不衰的 C 语言畅销经典教程
- 针对 C11 标准进行全面更新

 美 |Stephen Prate| 著姜佑 | 译
* 总结与思考
** 数的类型
*** 整形
- 关键字 int
- 声明格式：int num；int argc，int main（int argc，const char*argv[]）
- 赋值：num=1；scanf（“%d”，&num）；
- 显示与输出：printf("%d",num)
- &:因为是数，所以取地址
*** 浮点型
- 关键字 float
- 声明格式：float weight;
- 赋值：weight=3.14;scanf("%f",&weight);
- 显示与输出：printf("%.2f",weight);

#+BEGIN_SRC C

//
//newhello.c
//newhello.c
//
//Created by Xia on 2020/04/25
//Copyright @ 2020 Xia All rights reserved.
//
#include<stdio.h>
#include<stdlib.h>
#define LEN 15 
int main(int argc,const char*argv[])
{
    char name[LEN];
    printf("Plases enter your name:\n");
    //scanf("%s",name);
    fgets(name,LEN,stdin);
    printf("Hello, world. %s\n",name);
    //fputs(name,stdout);
    return 0;
}

#+END_SRC
*** 字符型
- 声明：char name[20];
- 输入：fgets(name,20,stdin);
因本身 name 为字符型，即指针地址，不用&，直接用 name。
- 输出：printf("Hello, world! %s\n",name);




* 前言
1984 年 C Primer Plus 第一版问世。各版本累计销售超 55 万册。
C 语言从早期的非正式的 K&R 标准，发展到 1990 年 ISO/ANSI 标准， 进而发展到 2011 年 ISO/IEC 标准。本书第六版。
** 目标:
- 指导性强、条理清 晰而且有用的 C 语言教程。
- 一本友好、方便使用、便于自学的指南。
- 介绍 C 语言细节的同时，讲解编程的概念。假定读者为非专业的程序员 。
- 当概念用文字较难解释时，以图表演示以助理解。
- C 语言的主要特征总结在方框中，便于查找及复习。
- 每章末有复习和编程练习，测试和加深
- 为有最佳学习效果，扮演一个积极的角色。仔细阅读，录入运行。
-  * 手写与思考为最有效的方法，不要匆忙录入。*
* 第 1 章 初识 C 语言
- C 的历史和特性
- 编写程序的步骤
- 编译器和链接器的知识
- C 标准

C 是一门功能强大、专业化的编程语言。
** 1.1C 语言的起源

1972 年，贝尔实验室的丹尼斯.里厅(Dennis Ritch)和肯.汤普逊(Ken Thompso)在开发
UNIX 操作系统时设计了 C 语言。
- 设计者：Dennis Ritch Ken Thompso
- 时间 1972 年
- UNIX
- 贝尔实验室

Pascal 的主发目标是为更好地学习编程原理提供扎实的基础；而 BASIC 的主要目标是开发
出类似英文的语言，让不熟悉计算机的人轻松学习。


** 1.2 选择 C 语言的理由
在过去 40 年里，C成为最重要、最流行的语言之一。突出的 优点
*** 设计特性
C 是一门流行的语言，融合了计算机科学理论和实践的控制特性。C语言的设计理念让用户
能轻松地完成*自顶向下的规划、结构化编程和模块化设计。*因此，用 C 语言编写的程序更*易
懂、更可靠*。
**** 融合了
- 计算机科学理论
- 实践的控制特性
**** 设计特性
- 自顶向下的规划
- 结构化编程
- 模块化设计
**** 程序特点
- 更易懂
- 更可靠
例如 linux 内核用 C 语言实现，而不是 C++

*** 高效性
C 是高效的语言。在设计上，它充分利用了当前计算机的优势，因此 C 程序相对/更紧凑/，而
且/运行速度很快/。实际上，C 语言具有通常是汇编语言才具有的微调控制能力(汇编语言是
为特殊的中央处理单元设计的一系列内部指令，使用助记符来表示;不同的 CPU 系列使用
不同的汇编语言)，可以根据具体情况微调程序以获得最大运行速度或最有效地使用内存。

- 更紧凑。矮小精悍（具有汇编语言的微调控制能）
- 运行速度快、高效（最优运行速度或最有效地使用内存）
*** 可移植性

C 是可移植的语言。这意味着，在一种系统中编写的 C 程序稍作修改或 不修改就能在其他系
统运行。如需修改，也只需简单更改主程序头文件中的 少许项即可。大部分语言都希望成
为可移植语言，但是，如果经历过把 IBM PC BASIC 程序转换成苹果 BASIC(两者是近亲)，或
者在 UNIX 系统中运行 IBM 大型机的 FORTRAN 程序的人都知道，移植是最麻烦的事。C语言是可
移 植方面的佼佼者。从 8 位微处理器到克雷超级计算机，许多计算机体系结构都可以使用
C 编译器(C 编译器是把 C 代码转换成计算机内部指令的程序)。 但是要注意，程序中针对
特殊硬件设备(如，显示监视器)或操作系统特殊 功能(如，Windows 8 或 OS X)编写的部分，
通常是不可移植的。

由于 C 语言与 UNIX 关系密切，UNIX 系统通常会将 C 编译器作为软件包的 一部分。安装 Linux 时，
通常也会安装 C 编译器。供个人计算机使用的 C 编译 器很多，运行各种版本的 Windows 和
Macintosh(即， Mac)的 PC 都能找到 合适的 C 编译器。因此，无论是使用家庭计算机、专业
工作站，还是大型 机，都能找到针对特定系统的 C 编译器。
- 不可移植：针对特殊硬件设备或操作系统的特殊功能编写的部分
*** 强大而灵活
C 语言功能强大且灵活(计算机领域经常使用这两个词)。例如，功能 强大且灵活的 UNIX 操作
系统，大部分是用 C 语言写的;其他语言(如， FORTRAN、Perl、Python、Pascal、LISP、
Logo、BASIC)的许多编译器和 解释器都是用 C 语言编写的。因此，在 UNIX 机上使用 FORTRAN
时，最终是 由 C 程序生成最后的可执行程序。C程序可以用于解决物理学和工程学的问 题，
甚至可用于制作电影的动画特效。

- 编写操作系统 （UNIX,linux）
- 编写语言的编译器和解释器（phthon,lisp FORTRAN BASIC）
- 物理、工程、电影特效等。

*** 面向程序员
C 语言是为了满足程序员的需求而设计的，程序员利用 C 可以访问硬件、操控内存中的位。
C 语言有丰富的运算符，能让程序员简洁地表达自己的意图。C没有 Pascal 严谨，但是却比
C++的限制多。这样的灵活性既是优点也是缺点。优点是，许多任务用 C 来处理都非常简洁
(如，转换数据的格 式);缺点是，你可能会犯一些莫名其妙的错误，这些错误不可能在其他
语 言中出现。C 语言在提供更多自由的同时，也让使用者承担了更大的责任。

另外，大多数 C 实现都有一个大型的库，包含众多有用的 C 函数。这些 函数用于处理程序员
经常需要解决的问题。

- 可访问硬件、操控内存中的位
- 有丰富的运算符，可简洁地表达意图
- 没有 pascal 严谨，但比 C++限制多，灵活。
- 比其它语言易犯错误
- C 语言用大型的库，以 C 函数为基础。方便使用。

***  缺点 
   
人无完人，金无足赤。C语言也有一些缺点。例如，前面提到的，要享 受用 C 语言自由编程
的乐趣，就必须承担更多的责任。特别是，C语言使用 指针，而涉及指针的编程错误往往难
以察觉。有句话说的好:想拥有自由就 必须时刻保持警惕。

C 语言紧凑简洁，结合了大量的运算符。正因如此，我们也可以编写出 让人极其费解的代
码。虽然没必要强迫自己编写晦涩的代码，但是有兴趣写 写也无妨。试问，除 C 语言外还
为哪种语言举办过年度混乱代码大赛[1]?

瑕不掩瑜，C语言的优点比缺点多很多。我们不想在这里多费笔墨，还 是来聊聊 C 语言的其
他话题。

- 自由就易犯错
- 指针的编程错误难以觉察
- 紧凑、简洁，大量的运算符，代码极其费解。
- 代码任意排列，更难理解（混乱代码大赛）

** 1.3 C 语言的应用范围
 早在 20 世纪 80 年代，C语言就已经成为小型计算机(UNIX 系统)使用的 主流语言。从那以后，
 C 语言的应用范围扩展到微型机(个人计算机)和大 型机(庞然大物)。如图 1.2 所示，许多软
 件公司都用 C 语言来开发文字处理 程序、电子表格、编译器和其他产品，因为用 C 语言编
 写的程序紧凑而高效。更重要的是，C程序很方便修改，而且移植到新型号的计算机中也
 没什么问题。

无论是软件公司、经验丰富的 C 程序员，还是其他用户，都能从 C 语言中受益。越来越多的
计算机用户已转而求助 C 语言解决一些安全问题。不一 定非得是计算机专家也能使用 C 语言。

20 世纪 90 年代，许多软件公司开始改用 C++来开发大型的编程项目。 C++在 C 语言的基础上嫁
接了面向对象编程工具(面向对象编程是一门哲学，它通过对语言建模来适应问题，而不是
对问题建模以适应语言)。 C++几乎是 C 的超集，这意味着任何 C 程序差不多就是一个 C++程序。
学习 C 语言，也相当于学习了许多 C++的知识。

虽然这些年来 C++和 JAVA 非常流行，但是 C 语言仍是软件业中的核心技能。在最想具备
的技能中，C语言通常位居前十。特别是，C 语言已成为嵌入式系统编程的流行语言。也就
是说，越来越多的汽车、照相机、DVD 播放机和其他现代化设备的微处理器都用 C 语言进
行编程。除此之外，C 语 言还从长期被 FORTRAN 独占的科学编程领域分得一杯羹。最终，
作为开发 操作系统的卓越语言，C在 Linux 开发中扮演着极其重要的角色。因此，在进 入
21 世纪的第 2 个 10 年中，C语言仍然保持着强劲的势头。

简而言之，C 语言是最重要的编程语言之一，将来也是如此。如果你想 33
拿下一份编程的工作，被问到是否会 C 语言时，最好回答“是”。

- 紧凑、高效、方便移植
- 非专业也可以用
- C++是 C 的超集
- [ ]C++在 C 的基础上嫁接了面向对象编程工具
- [ ] 面向对象编程是一门哲学，通过对语言建模来适应问题
      而非对问题建模以适应语言
- C 语言仍是软件业中的核心技能（嵌入式系统编程的流行语言）

** 1.4 计算机能做什么
 在学习如何用 C 语言编程之前，最好先了解一下计算机的工作原理。这 些知识有助于你
 理解用 C 语言编写程序和运行 C 程序时所发生的事情之间有 什么联系。

现代的计算机由多种部件构成。中央处理单元(CPU)承担绝大部分的运算工作。随机存取内
存(RAM)是存储程序和文件的工作区;而永久内存存储设备(过去一般指机械硬盘，现在还包
括固态硬盘)即使在关闭计算机后，也不会丢失之前储存的程序和文件。另外，还有各种外
围设备(如， 键盘、鼠标、触摸屏、监视器)提供人与计算机之间的交互。CPU 负责处理程
序，接下来我们重点讨论它的工作原理。CPU 的工作非常简单，至少从以下简短的描述中看
是这样。它从内存中获取并执行一条指令，然后再从内存中获取并执行下一条指令，诸如
此类 (一个吉赫兹的 CPU 一秒钟能重复这样的操作大约十亿次，因此，CPU 能以惊人的速
度从事枯燥的工作)。CPU 有自己的小工作区——由若干个寄存器组成，每个寄存器都可以储
存一个数字。一个寄存器储存下一条指令的内存地址，CPU 使用该地址来获取和更新下一
条指令。在获取指令后，CPU 在另一个寄存器中储存该指令，并更新第 1 个寄存器储存下
一条指令的地址。 CPU 能理解的指令有限(这些指令的集合叫作指令集)。而且，这些指令
相当具体，其中的许多指令都是用于请求计算机把一个数字从一个位置移动到另一个位置。
例如，从内存移动到寄存器。

下面介绍两个有趣的知识。其一，储存在计算机中的所有内容都是数字。计算机以数字形
式储存数字和字符(如，在文本文档中使用的字母)。 每个字符都有一个数字码。计算机载
入寄存器的指令也以数字形式储存，指令集中的每条指令都有一个数字码。其二，计算机
程序最终必须以数字指令码(即，机器语言)来表示。

简而言之，计算机的工作原理是:如果希望计算机做某些事，就必须为 其提供特殊的指令列
表(程序)，确切地告诉计算机要做的事以及如何做。

你必须用计算机能直接明白的语言(机器语言)创建程序。这是一项繁琐、 乏味、费力的任
务。计算机要完成诸如两数相加这样简单的事，就得分成类 似以下几个步骤。

1.从内存位置 2000 上把一个数字拷贝到寄存器 1。
2.从内存位置 2004 上把另一个数字拷贝到寄存器 2。
3.把寄存器 2 中的内容与寄存器 1 中的内容相加，把结果储存在寄存器 1 中。
4.把寄存器 1 中的内容拷贝到内存位置 2008。
  而你要做的是，必须用数字码来表示以上的每个步骤!
如果以这种方式编写程序很合你的意，那不得不说抱歉，因为用机器语言编程的黄金时代
已一去不复返。但是，如果你对有趣的事情比较感兴趣， 不妨试试高级编程语言。

*** CPU 中央处理单元（控制与运算）
**** Central processing unit
**** 计算机系统的运算和控制中心，信息处理和程序运行的最终执行单元
**** 作用
- 解释与执行指令
- 处理计算机软件中的数据
- 读取指令、指令译码、执行指令
**** 构成
- 控制器
- 运算器
- 高速缓存
**** 发展历史
- 专用计算》通用计算
- 4 位-8 位-16 位-32 位-64 位
***** 1.第一阶段（71-73 年）
4 位及 8 位 intel 4004
1971 年，Intel 生产的 4004 微处理器将运算器和控制器集成在一个芯片上，标志着 CPU 的诞生；
***** 2.第二阶段（74-77 年）
高档 8 位处理器，代表产品是 Intel 8080。此时指令系统已经比较完善了
***** 3.第三阶段（78-84 年）
16 位微处理器的时代，代表产品是 Intel 8086。相对而言已经比较成熟了。
***** 4.第四阶段（85-92 年）
32 位微处理器时代，代表产品是 Intel 80386。已经可以胜任多任务、多用户的作业。1989
年发布的 80486 处理器实现了 5 级标量流水线，标志着 CPU 的初步成熟，也标志着传统处理器
发展阶段的结束。

***** 5.第五阶段（1993-2005 年）
奔腾系列微处理器的时代
1995 年 11 月，Intel 发布了 Pentium 处理器，该处理器首次采用超标量指令流水结构，引入
了指令的乱序执行和分支预测技术，大大提高了处理器的性能， 因此，超标量指令流水线
结构一直被后续出现的现代处理器，如 AMD（Advanced Micro devices）的 K9、 K10、Intel
的 Core 系列等所采用。

***** 第 6 阶段（）(2005 年至今)。 
是酷睿系列微处理器的时 代，这是一款领先节能的新型微架构，设计的出发点是提供卓然
出众的性能和能效。 [3]

为了满足操作系统的上层工作需求，现代处理器进一步引入了诸如
- 并行化、
- 多核化、
- 虚拟化
- 以及远程管理系统等功能，不断推动着上层信息系统向前发展。 [1] 

**** 工作原理

***** 冯诺依曼体系结构是现代计算机的基础。
 在该体系结构下，程序和数据统一存储，指令和数据需要从同一存储空间存取，经由同一
 总线传输，无法重叠执行。根据冯诺依曼体系，CPU 的工作分为以下 5 个阶段：取指令阶
 段、指令译码阶段、执行指令阶段、访存取数和结果写回。 [1] 

****** 1. 取指令
 （IF，instruction fetch），即将一条指令从主存储器中取到指令寄存器的过程。程序计
 数器中的数值，用来指示当前指令在主存中的位置。当一条指令被取出后，PC 中的数值将
 根据指令字长度自动递增。 [1] 

******  2. 指令译码阶段
（ID，instruction decode），取出指令后，指令译码器按照预定的指令格
  式，对取回的指令进行拆分和解释，识别区分出不同的指令类 别以及各种获取操作数的
  方法。 [1] 

******   3.执行指令阶段（EX，execute），
具体实现指令的功能。CPU 的不同部分被连接起来，以执行所需的操作。

  
****** 4.访存取数阶段（MEM，memory）， 
根据指令需要访问主存、读取操作数，CPU 得到操作数在主存中的地址，并从主存中读取该
操作数用于运算。部分指令不需要访问主存，则可以跳过该阶段。 [1]

******   5.结果写回阶段（WB，write back）， 
作为最后一个阶段，结果写回阶段把执行指令阶段的运行结果数据“写回”到某种存储形式。
结果数据一般会被写到 CPU 的内部寄存器中，以便被后续的指令快速地存取；许多指令还会
改变程序状态字寄存器中标志位的状态，这些标志位标识着不同的操作结果，可被用来影响
程序的动作。 [1]

  在指令执行完毕、结果数据写回之后，若无意外事件（如结果溢出等）发生，计算机就从
  程序计数器中取得下一条指令地址，开始新一轮的循环，下一个指令周期将顺序取出下一
  条指令。 [1] 

****   性能及结构

***** 性能衡量指标
 对于 CPU 而言，影响其性能的指标主要有主频、 CPU 的位数以及 CPU 的缓存指令集。所谓 CPU
 的主频，指的就是时钟频率，它直接的决定了 CPU 的性能，因此要想 CPU 的性能得到很好地
 提高，提高 CPU 的主频是一个很好地途径。而 CPU 的位数指的就是处理器能够一次性计算的
 浮点数的位数，通常情况下，CPU 的位数越高，CPU 进行运算时候的速度就会变得越快。现
 在 CPU 的位数一般为 32 位或者 64 位。以前人们使用的计算机都是 32 位系统， 近年来人们使
 用的计算机的处理器中 64 位所占用的比例则显得更多，这是因为 64 位的计算机的运行速度
 变得更快，提高了人们的工作效率。而 CPU 的缓存指令集是存储在 CPU 内部的，主要指的是
 能够对 CPU 的运算进行指导以及优化的硬程序。一般来讲，CPU 的缓存可以分为一级缓存、
 二级缓存和三级缓存，而那些处理能力比较强的处理器则一般具有较大的三级缓存。 [4] 

*****  CPU 结构
 通常来讲，CPU 的结构可以大致分为

******  运算逻辑部件、

 所谓运算逻辑部件，主要能够进行相关的逻辑运算，如：可以执行移位操作以及逻辑操作，
 除此之外 还可以执行定点或浮点算术运算操作以及地址运算和转换等命令，是一种多功能
 的运算单元。

****** 寄存器部件

 而寄存器部件则是用来暂存指令、数据和地址的。

******  和控制部件等。

 控制部件则是主要用来对指令进行分析并且能够发出相应的控制信号。

******  而计算机的内存

******* 随机存取存储器（RAM）

随机存取存储器能够与 CPU 直接的进行数据的交换，也可以将其称为主存。对于 RAM 可以随
时的进行读写，而且这个过程的速度很快，因此由于主存所具有的这个优点也往往将其作为
操作系统或其他正在运行中的程序的临时数据存储媒介

******* 只读储存器(ROM)。

而只读存储器 ROM 是一种只能读出事先所存数据的存储器，使用者对于其内部存储的资料没
有改变的权限也无法对其进行删除，并且在电源关闭以后资料并不会消失。这种内存也得到
了广泛的应用，在那些资料不需要经常变更的电子或电脑系统中得到了很好地应用。
   对于中央处理器来说，可将其看作一个规模较大的集成电路，其主要任务是加工和处理
各种数据。传统计算机的储存容量相对较小，其对大规模数据的处理过程中具有一定难度，
且处理效果相对较低。随着我国信息技术水平的迅速发展，随之出现了高配置的处理器计算
机，将高配置处理器作为控制中心，对提高计算机 CPU 的结构功能发挥重要作用。中央处
理器中的核心部分就是控制器、运算器，其对提高计算机的整体功能起着重要作用，能够实
现寄存控制、逻辑运算、信号收发等多项功能的扩散，为提升计算机的性能奠定良好基础。
[2] 

   集成电路在计算机内起到了调控信号的作用，根据用户操作指令执行不同的指令任务。
   中央处理器是一块超大规模的集成电路。它由运算器、控制器、寄存器等组成，如下图，
   关键操作在于对各类数据的加工和处理。 [5] 

   传统计算机存储容量较小，面对大规模数据集的操作效率偏低。新一代计算机采用高配
   置处理器作为控制中心，CPU 在结构功能方面有了很大的提升空间。中央处理器以运算
   器、控制器为主要装置，逐渐扩散为逻辑运算、寄存控制、程序编码、信号收发等多项
   功能。这些都加快了 CPU 调控性能的优化升级。 [5] 

  
****  CPU 总线
CPU 总线是在计算机系统中最快的总线，同时也是芯片组与主板的核心。人们通常把和 CPU
直接相连的局部总线叫做 CPU 总线或者称之为内部总线，将那些和各种通用的扩展槽相接
的局部总线叫做系统总线或者是外部总线。在内部结构比较单一的 CPU 中，往往只设置一
组数据传送的总线即 CPU 内部总线，用来将 CPU 内部的寄存器和算数逻辑运算部件等连接
起来，因此也可以将这一类的总线称之为 ALU 总线。而部件内的总线，通过使用一组总线
将各个芯片连接到一起，因此可以将其称为部件内总线，一般会包含地址线以及数据线这两
组线路。系统总线指的是将系统内部的各个组成部分连接在一起的线路，是将系统的整体连
接到一起的基础；而系统外的总线，是将计算机和其他的设备连接到一起的基础线路。 [4] 

**** 核心部分


***** 运算器
 运算器是指计算机中进行各种算术和逻辑运算操作的部件， 其中算术逻辑单元是中央处理
 核心的部分。 [2] 

******  （1）算术逻辑单元（ALU）。
 算术逻辑单元是指能实现多组算术运算与逻辑运算的组合逻辑电路，其是中央处理中的重
 要组成部分。算术逻辑单元的运算主要是进行二位元算术运算，如加法、减法、乘法。在
 运算过程中，算术逻辑单元主要是以计算机指令集中执行算术与逻辑操作，通常来说，ALU
 能够发挥直接读入读出的作用，具体体现在处理器控制器、内存及输入输出设备等方面，
 输入输出是建立在总线的基础上实施。输入指令包含一 个指令字，其中包括操作码、格式
 码等。 [2] 


******   （2）中间寄存器（IR）。
其长度为 128 位，其通过操作数来决定实际长度。IR 在“进栈并取数”指令中发挥重要作用，
在执行该指令过程中，将 ACC 的内容发送于 IR，之后将操作数取到 ACC，后将 IR 内容进
栈。 [2] 


******   （3）运算累加器（ACC）。
当前的寄存器一般都是单累加器，其长度为 128 位。对于 ACC 来说，可以将它看成可变长
的累加器。在叙述指令过程中，ACC 长度的表示一般都是将 ACS 的值作为依据，而 ACS 长
度与 ACC 长度有着直接联系，ACS 长度的加倍或减半也可以看作 ACC 长度加倍或减半。
[2] 


******   （4）描述字寄存器（DR）。
其主要应用于存放与修改描述字中。DR 的长度为 64 位，为了简化数据结构处理，使用描
述字发挥重要作用。 [2] 


******   （5）B寄存器。
其在指令的修改中发挥重要作用，B 寄存器长度为 32 位，在修改地址过程中能保存地址修
改量，主存地址只能用描述字进行修改。指向数组中的第一个元素就是描述字， 因此，访
问数组中的其它元素应当需要用修改量。对于数组成来说，其是由大小一样的数据或者大小
相同的元素组成的，且连续存储，常见的访问方式为向量描述字，因为向量描述字中的地址
为字节地址，所以，在进行换算过程中，首先应当进行基本地址 的相加。对于换算工作来
说，主要是由硬件自动实现，在这个过程中尤其要注意对齐，以免越出数组界限。 [2] 



*****  控制器
 控制器是指按照预定顺序改变主电路或控制电路的接线和 改变电路中电阻值来控制电动机
 的启动、调速、制动与反向的主令装置。控制器由程序状态寄存器 PSR，系统状态寄存器
 SSR， 程序计数器 PC，指令均存器等组成，其作为“决策机构”，主要任务就是发布命令，
 发挥着整个计算机系统操作的协调与指挥作用。 控制的分类主要包括两种，分别为组合逻
 辑控制器、微程序控制器，两个部分都有各自的优点与不足。其中组合逻辑控制器结构相
 对较复杂，但优点是速度较快；微程序控制器设计的结构简单，但在修改一条机器指令功
 能中，需对微程序的全部重编。 [2] 


 相关品牌介绍编辑
 Intel
 根据 Intel 产品线规划，目前 Intel 九代酷睿有三种产品：i9/i7/i5，除了具有高性价
 比优势外，Intel 九代酷睿还能够使笔记本电脑更具便携性、更好的无线网络连接能力、
 更快的数据传输速度。具体到产品上，Intel 第九代酷睿 H 系列、HK 系列基于 14nm 制
 程工艺的 Coffee Lake 架构打造，包含了 Intel 酷睿 i5-9300H、Intel 酷睿 i5-9400H、
 Intel 酷睿 i7-9750H、Intel 酷睿 i7-9850H、Intel 酷睿 i9-9880H 以及 Intel 酷睿
 i9-9980HK 等，其中第九代酷睿 H 系列处理器一般来说主要应用于游戏本，九代酷睿 i5
 核心显卡为 UHD630，支持双通道 DDR4-2666 内存。除了 CPU 主频和线程的提升，新平台
 通过改进的英特尔 Dynamic Tuning 可以发挥处理器最大性能；通过英特尔 Thermal
 Velocity Boost 技术在睿频基础上进 一步提高频率；同时还针对新显卡进行了底层优化，
 并强化了雷电 3 接口的支持。 [7] 

 AMD
 AMD 速龙 X4 860K 是 AMD 针对入门级市场推出的一款四核处理器，用于取代之前发布的
 760K。速龙 X4 860K 采用 Kaveri 架构，采用了模块化设计，两个核心共享一个浮点计算
 单元，和 A10 APU 如出一辙，我们可以简单地看成无 GPU 的 A10。这款处理器采用原生
 四核设计，拥有 4MB 二级缓存，默认频率为 3.7GHz， 可在高负荷下动态调整至 4.0GHz。

 
**** 分类

***** 指令集的方式
 CPU 的分类还可以按照指令集的方式将其分为精简指令集计算机(RISC)和复杂指令集计算
 机(CISC)。
 RISC 是基于集成电路进行设计的一种芯片，不过不同的是它对于指令的数目以及寻址的方
 式进行了改进，使得实现的更加的容易， 指令的并行的执行程度更加的好，并且编译器的
 效率也变得越来越高。而由于早期的集成技术还不够发达，因此早期的计算机往往是 CISC
 架构，需要使用较少的机器语言来完成所需要的计算任务。由于人们的需求越来越多，因
 此将更多的相对复杂指令加入到了指令系统中，这样能够使得计算机变得更加的智能化，
 同时这使得计算机的处理效率有着很大的提升， 这也是 RISC 形成的原因。 [4] 

 
***** 嵌入式系统 CPU
 传统的嵌入式领域所指范畴非常广泛，是处理器除了服务器和 PC 领域之外的主要应用领
 域。所谓“嵌入式”是指在很多芯片中，其所包含的处理器就像嵌入在里面不为人知一样。
 [8] 

 近年来随着各种新技术新领域的进一步发展，嵌入式领域本身也被发展成了几个不同的子
 领域而产生了分化。 [8] 

 首先是随着智能手机(Mobile Smart Phone)和手持设备(Mobile Device)的发展，移动
 (Mobile)领域逐渐发展成了规模匹敌甚至超过 PC 领域的一个独立领域。由于 Mobile 领
 域的处理器需要加载 Linux 操作系统，同时涉及复杂的软件生态，因此，其具有和 PC 领
 域一样对软件生态的严重依赖。 [8] 

 其次是实时(Real Time)嵌入式领域。该领域相对而言没有那么严重的软件依赖性，因此没
 有形成绝对的垄断，但是由于 ARM 处理器 IP 商业推广的成功，目前仍然以 ARM 的处理
 器架构占大多数市场份额，其他处理器架构譬如 Synopsys ARC 等也有不错的市场成绩。
 [8] 

 最后是深嵌入式领域。该领域更像前面所指的传统嵌入式领域。该领域的需求量非常之大，
 但往往注重低功耗、低成本和高能效比，无须加载像 Linux 这样的大型应用操作系统，软
 件大多是需要定制的裸机程序或者简单的实时操作系统，因此对软件生态的依赖性相对比
 较低。 [8] 

*****  大型机 CPU
 大型机，或者称大型主机。大型机使用专用的处理器指令集、操作系统和应用软件。大型
 机一词，最初是指装在非常大的带框铁盒子里的大型计算机系统，以用来同小一些的迷你
 机和微型机有所区别。 [9] 

 减少大型机 CPU 消耗是个重要工作。节约每个 CPU 周期，不仅可以延缓硬件升级，还可
 以降低基于使用规模的软件授权费。

 大型机体系结构主要包括以下两点：高度虚拟化，系统资源全部共享。大型机可以整合大
 量的负载于一体，并实现资源利用率的最大化；异步 I/O 操作。即当执行 I/O 操作时
 CPU 将 I/O 指令交给 I/O 子系统来完成，CPU 自己被释放执行其它指令。因此主机在执
 行繁重的 I/O 任务的同时，还可以同时执行其它工作。 [9] 

 
**** CPU 控制技术的主要形式
中央处理器强大的数据处理功有效提升了计算机的工作效率，在数据加工操作时，并不仅仅
只是一项简单的操作，中央处理器的操作是建立在计算机使用人员下达的指令任务基础上，
在执行指令任务过程中，实现用户输入的控制指令与 CPU 的相对应。随着我国信息技术的
快速发展，计算机在人们生活、工作 以及企业办公自动化中得到广泛应用，其作为一种主
控设备，为促进电子商务网络的发展起着促进作用，使 CPU 控制性能的升级进程得到很大
提高。指令控制、实际控制、操作控制等就是计算机 CPU 技术应用作用表现。 [2] 

（1）选择控制。集中处理模式的操作，是建立在具体程序指令的基础上实施，以此满足计
算机使用者的需求，CPU 在操作过程中可以根据实际情况进行选择，满足用户的数据流程需
求。 指令控制技术发挥的重要作用。根据用户的需求来拟定运算方式，使数据指令动作的
有序制定得到良好维持。CPU 在执行当中，程序各指令的实施是按照顺利完成，只有使其遵
循一定顺序，才能保证计算机使用效果。CPU 主要是展开数据集自动化处理，其 是实现集
中控制的关键，其核心就是指令控制操作。 [2] 

（2）插入控制。CPU 对于操作控制信号的产生，主要是通过指令的功能来实现的，通过将
指令发给相应部件，达到控制这些部件的目的。实现一条指令功能，主要是通过计算机中的
部件执行一序列的操作来完成。较多的小控制元件是构建集中处理模式的关键，目的是为了
更好的完成 CPU 数据处理操作。 [2] 

（3）时间控制。将时间定时应用于各种操作中，就是所谓的时间控制。在执行某一指令时，
应当在规定的时间内完成，CPU 的指令是从高速缓冲存储器或存储器中取出，之后再进行指
令译码操作，主要是在指令寄存器中实施，在这个过程中，需要注意严格控制程序时间。
[2] 

**** 安全问题
CPU 蓬勃发展的同时也带来了许多的安全问题。1994 年出现在 Pentium 处理器上的 FDIV
bug（奔腾浮点除错误）会导致浮点数除法出现错误；1997 年 Pentium 处理器上的 F00F
异常指令可导致 CPU 死机；2011 年 Intel 处理器可信执行技术(TXT，trusted execution
technology)存在缓冲区溢出问题，可被攻击者用于权限提升；2017 年 Intel 管理引擎(ME，
management engine)组件中的漏洞可导致远程非授权的任意代码执行；2018 年，Meltdown
和 Spectre 两个 CPU 漏洞几乎影响到过去 20 年制造的每一种计算设备，使得存储在数十
亿设备上的隐私信息存在被泄露的风险。这些安全问题严重危害国家网络安全、关键基础设
施安全及重要行业的信息安全，已经或者将要造成巨大损失。 [1] 

**** CPU 和 GPU 的比较

***** GPU
 GPU 即图像处理器，CPU 和 GPU 的工作流程和物理结构大致是类似的，相比于 CPU 而言，
 GPU 的工作更为单一。在大多数的个人计算机中，GPU 仅仅是用来绘制图像的。如果 CPU
 想画一个二维图形，只需要发个指令给 GPU，GPU 就可以迅速计算出该图形的所有像素，
 并且在显示器上指定位置画出相应的图形。由于 GPU 会产生大量的热量，所以通常显卡上
 都会有独立的散热装置。 [3] 

 
***** 设计结构
 
CPU 有强大的算术运算单元，可以在很少的时钟周期内完成算术计算。同时，有很大的缓存可
以保存很多数据在里面。此外，还有复杂的逻辑控制单元，当程序有多个分支的时候， 通
过提供分支预测的能力来降低延时。GPU 是基于大的吞吐量设计，有很多的算术运算单元和
很少的缓存。同时 GPU 支持大量的线程同时运行，如果他们需要访问同一个数据，缓存会
合并这些访问，自然会带来延时的问题。尽管有延时，但是因为其算术运算单元的数量庞大，
因此能够达到一个非常大的吞吐量的效果。 [3]使用场景 显然，因为 CPU 有大量的缓存和
复杂的逻辑控制单元，因此它非常擅长逻辑控制、串行的运算。相比较而言，GPU 因为有大
量的算术运算单元，因此可以同时执行大量的计算工作，它所擅长的是大规模的并发计算，
计算量大但是没有什么技术含量，而且要重复很多次。这样一说，我们利用 GPU 来提高程
序运算速度的方法就显而易见了。使用 CPU 来做复杂的逻辑控制，用 GPU 来做简单但是量
大的算术运算，就能够大大地提高程序的运行速度。 [3] 


****  CPU 未来发展
通用中央处理器(CPU)芯片是信息产业的基础部件，也是武器装备的核心器件。我国缺少具
有自主知识产权的 CPU 技术和产业，不仅造成信息产业受制于人，而且国家安全也难以得
到全面保障。 “十五”期间，国家“863 计划”开始支持自主研发 CPU。“十一五”期间，“核心
电子器件、高端通用芯片及基础软件产品”(“核高基”)重大专项将“863 计 划”中的 CPU 成
果引入产业。从“十二五”开始，我国在多个领域进行自主研发 CPU 的应用和试点，在一定
范围内形成了自主技术和产业体系，可满足武器装备、信息化等领域的应用需求。但国外
CPU 垄断已久，我国自主研发 CPU 产品和市场的成熟还需要一定时间。 [10] 




** 1.5 高级计算机语言和编译器
 高级编程语言(如，C)以多种方式简化了编程工作。首先，不必用数字码表示指令;其次，
 使用的指令更贴近你如何想这个问题，而不是类似计算机那样繁琐的步骤。使用高级编程
 语言，可以在更抽象的层面表达你的想法，不用考虑 CPU 在完成任务时具体需要哪些步
 骤。例如，对于两数相加， 可以这样写:

total = mine + yours;
对我们而言，光看这行代码就知道要计算机做什么;而看用机器语言写 成的等价指令(多条
以数字码形式表现的指令)则费劲得多。但是，对计算 机而言却恰恰相反。在计算机看来，
高级指令就是一堆无法理解的无用数 据。编译器在这里派上了用场。编译器是把高级语言
程序翻译成计算机能理 解的机器语言指令集的程序。程序员进行高级思维活动，而编译器
则负责处 理冗长乏味的细节工作。


编译器还有一个优势。一般而言，不同 CPU 制造商使用的指令系统和编码格式不同。例如，
用 Intel Core i7 (英特尔酷睿 i7)CPU 编写的机器语言程序对于 ARM Cortex-A57 CPU
而言什么都不是。但是，可以找到与特定类型 CPU 匹配的编译器。因此，使用合适的编译
器或编译器集，便可把一种高级 语言程序转换成供各种不同类型 CPU 使用的机器语言程序。
一旦解决了一 个编程问题，便可让编译器集翻译成不同 CPU 使用的机器语言。

简而言之，高级语言(如 C、Java、Pascal)以更抽象的方式描述行 为，不受限于特定 CPU
或指令集。而且，高级语言简单易学，用高级语言编 程比用机器语言编程容易得多。

1964 年，控制数据公司(Control Data Corporation)研制出了 CDC 6600 计算机。这台庞
然大物是世界上首台超级计算机，当时的售价是 600 万美 元。它是高能核物理研究的首选。
然而，现在的普通智能手机在计算能力和 内存方面都超过它数百倍，而且能看视频，放音
乐。

1964 年，在工程和科学领域的主流编程语言是 FORTRAN。虽然编程语 言不如硬件发展那么
突飞猛进，但是也发生了很大变化。为了应对越来越大 型的编程项目，语言先后为结构化
编程和面向对象编程提供了更多的支持。 随着时间的推移，不仅新语言层出不穷，而且现
有语言也会发生变化。

** 1.6 语言标准
 目前，有许多 C 实现可用。在理想情况下，编写 C 程序时，假设该程序 中未使用机器特
 定的编程技术，那么它的运行情况在任何实现中都应该相 同。要在实践中做到这一点，不
 同的实现要遵循同一个标准。

C 语言发展之初，并没有所谓的 C 标准。1987 年，布莱恩·柯林汉(Brian Kernighan)和丹
尼斯·里奇(Dennis Ritchie)合著的 The C Programming Language(《C 语言程序设计》)第
1 版是公认的 C 标准，通常称之为 K&R C 或经典 C。特别是，该书中的附录中的“C 语言
参考手册”已成为实现 C 的指导 标准。例如，编译器都声称提供完整的 K&R 实现。虽然这
本书中的附录定 义了 C 语言，但却没有定义 C 库。与大多数语言不同的是，C语言比其他
语言 更依赖库，因此需要一个标准库。实际上，由于缺乏官方标准，UNIX 实现 提供的库
已成为了标准库。

*** 1.6.1 第 1 个 ANSI/ISO C 标准
随着 C 的不断发展，越来越广泛地应用于更多系统中，C社区意识到需 要一个更全面、更
新颖、更严格的标准。鉴于此，美国国家标准协会 (ANSI)于 1983 年组建了一个委员会
(X3J11)，开发了一套新标准，并 于 1989 年正式公布。该标准(ANSI C)定义了 C 语言和
C 标准库。国际标准 化组织于 1990 年采用了这套 C 标准(ISO C)。ISO C 和 ANSI C 是
完全相同的 标准。ANSI/ISO 标准的最终版本通常叫作 C89(因为 ANSI 于 1989 年批准该
标 准)或 C90(因为 ISO 于 1990 年批准该标准)。另外，由于 ANSI 先公布 C 标 准，因
此业界人士通常使用 ANSI C。

在该委员会制定的指导原则中，最有趣的可能是:保持 C 的精神。委员 会在表述这一精神
时列出了以下几点:

  信任程序员;
  不要妨碍程序员做需要做的事;

保持语言精练简单; 只提供一种方法执行一项操作; 让程序运行更快，即使不能保证其可移
植性。

在最后一点上，标准委员会的用意是:作为实现，应该针对目标计算机 来定义最合适的某特
定操作，而不是强加一个抽象、统一的定义。在学习 C 语言过程中，许多方面都反映了这
一哲学思想。

*** 1.6.2 C99 标准
1994 年，ANSI/ISO 联合委员会(C9X 委员会)开始修订 C 标准，最终发 布了 C99 标准。
该委员会遵循了最初 C90 标准的原则，包括保持语言的精练 简单。委员会的用意不是在 C
语言中添加新特性，而是为了达到新的目标。 第 1 个目标是，支持国际化编程。例如，提
供多种方法处理国际字符集。第 2 个目标是，“调整现有实践致力于解决明显的缺陷”。因
此，在遇到需要将 C 移至 64 位处理器时，委员会根据现实生活中处理问题的经验来添加
标准。第 3 个目标是，为适应科学和工程项目中的关键数值计算，提高 C 的适应性， 让
C 比 FORTRAN 更有竞争力。

这 3 点(国际化、弥补缺陷和提高计算的实用性)是主要的修订目标。 在其他方面的改变则
更为保守，例如，尽量与 C90、C++兼容，让语言在概 念上保持简单。用委员会的话说:“„„
委员会很满意让 C++成为大型、功能 强大的语言”。

C99 的修订保留了 C 语言的精髓，C仍是一门简洁高效的语言。本书指出 了许多 C99 修改
的地方。虽然该标准已发布了很长时间，但并非所有的编译 器都完全实现 C99 的所有改动。
因此，你可能发现 C99 的一些改动在自己的 系统中不可用，或者只有改变编译器的设置才
可用。

*** 1.6.3 C11 标准 维护标准任重道远。标准委员会在 2007 年承诺 C 标准的下一个版本是
C1X，2011 年终于发布了 C11 标准。此次，委员会提出了一些新的指导原 则。出于对当前
编程安全的担忧，不那么强调“信任程序员”目标了。而且， 供应商并未像对 C90 那样很好
地接受和支持 C99。这使得 C99 的一些特性成为 C11 的可选项。因为委员会认为，不应要
求服务小型机市场的供应商支持其 目标环境中用不到的特性。另外需要强调的是，修订标
准的原因不是因为原 标准不能用，而是需要跟进新的技术。例如，新标准添加了可选项支
持当前 使用多处理器的计算机。对于 C11 标准，我们浅尝辄止，深入分析这部分内 容已
超出本书讨论的范围。

注意
本书使用术语 ANSI C、ISO C 或 ANSI/ISO C 讲解 C89/90 和较新标准共有的特性，用
C99 或 C11 介绍新的特性。有时也使用 C90(例如，讨论一个特性被首次加入 C 语言时)。

** 1.7 使用 C 语言的 7 个步骤
 C 是编译型语言。如果之前使用过编译型语言(如，Pascal 或 FORTRAN)，就会很熟悉组建
 C 程序的几个基本步骤。但是，如果以前使 用的是解释型语言(如，BASIC)或面向图形界
 面语言(如，Visual Basic)，或者甚至没接触过任何编程语言，就有必要学习如何编译。
 别担 心，这并不复杂。首先，为了让读者对编程有大概的了解，我们把编写 C 程 序的过
 程分解成 7 个步骤(见图 1.3)。注意，这是理想状态。在实际的使用 过程中，尤其是在
 较大型的项目中，可能要做一些重复的工作，根据下一个 步骤的情况来调整或改进上一个
 步骤。

图 1.3 编程的 7 个步骤
*** 1.7.1 第 1 步:定义程序的目标
在动手写程序之前，要在脑中有清晰的思路。想要程序去做什么首先自 己要明确自己想做
什么，思考你的程序需要哪些信息，要进行哪些计算和控 制，以及程序应该要报告什么信
息。在这一步骤中，不涉及具体的计算机语 言，应该用一般术语来描述问题。

*** 1.7.2 第 2 步:设计程序
对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来 完成它。例如，用
户界面应该是怎样的?如何组织程序?目标用户是谁?准 备花多长时间来完成这个程序?

除此之外，还要决定在程序(还可能是辅助文件)中如何表示数据，以 及用什么方法处理数
据。学习 C 语言之初，遇到的问题都很简单，没什么可 选的。但是，随着要处理的情况越
来越复杂，需要决策和考虑的方面也越来 越多。通常，选择一个合适的方式表示信息可以
更容易地设计程序和处理数 据。

再次强调，应该用一般术语来描述问题，而不是用具体的代码。但是， 你的某些决策可能
取决于语言的特性。例如，在数据表示方面，C的程序员 就比 Pascal 的程序员有更多选择。

*** 1.7.3 第 3 步:编写代码
设计好程序后，就可以编写代码来实现它。也就是说，把你设计的程序 翻译成 C 语言。这
里是真正需要使用 C 语言的地方。可以把思路写在纸上， 但是最终还是要把代码输入计算
机。这个过程的机制取决于编程环境，我们 稍后会详细介绍一些常见的环境。一般而言，
使用文本编辑器创建源代码文 件。该文件中内容就是你翻译的 C 语言代码。程序清单 1.1
是一个 C 源代码的 示例。

程序清单 1.1 C 源代码示例 
#+BEGIN_SRC C
#include <stdio.h>
  

int main(void)
{
int dogs;
 printf("How many dogs do you have?\n");
 scanf("%d", &dogs);
 printf("So you have %d dog(s)!\n", dogs);
 return 0;
}
#+END_SRC
在这一步骤中，应该给自己编写的程序添加文字注释。最简单的方式是 使用 C 的注释工具
在源代码中加入对代码的解释。第 2 章将详细介绍如何在 代码中添加注释。

*** 1.7.4 第 4 步:编译
接下来的这一步是编译源代码。再次提醒读者注意，编译的细节取决于编程的环境，我们
稍后马上介绍一些常见的编程环境。现在，先从概念的角 度讲解编译发生了什么事情。

前面介绍过，编译器是把源代码转换成可执行代码的程序。可执行代码 是用计算机的机器
语言表示的代码。这种语言由数字码表示的指令组成。如前所述，不同的计算机使用不同
的机器语言方案。C 编译器负责把 C 代码翻 译成特定的机器语言。此外，C编译器还将源
代码与 C 库(库中包含大量的 标准函数供用户使用，如 printf()和 scanf())的代码合并
成最终的程序(更精 确地说，应该是由一个被称为链接器的程序来链接库函数，但是在大多
数系 统中，编译器运行链接器)。其结果是，生成一个用户可以运行的可执行文 件，其中
包含着计算机能理解的代码。

编译器还会检查 C 语言程序是否有效。如果 C 编译器发现错误，就不生 成可执行文件并
报错。理解特定编译器报告的错误或警告信息是程序员要掌 握的另一项技能。

*** 1.7.5 第 5 步:运行程序
传统上，可执行文件是可运行的程序。在常见环境(包括 Windows 命令提示符模式、UNIX
终端模式和 Linux 终端模式)中运行程序要输入可执行文 件的文件名，而其他环境可能要
运行命令(如，在 VAX 中的 VMS[2])或一 些其他机制。例如，在 Windows 和 Macintosh
提供的集成开发环境(IDE) 中，用户可以在 IDE 中通过选择菜单中的选项或按下特殊键来
编辑和执行 C 程序。最终生成的程序可通过单击或双击文件名或图标直接在操作系统中运
行。

*** 1.7.6 第 6 步:测试和调试程序
程序能运行是个好迹象，但有时也可能会出现运行错误。接下来，应该 检查程序是否按照
你所设计的思路运行。你会发现你的程序中有一些错误， 计算机行话叫作 bug。查找并修
复程序错误的过程叫调试。学习的过程中不 可避免会犯错，学习编程也是如此。因此，当
你把所学的知识应用于编程时，最好为自己会犯错做好心理准备。随着你越来越老练，你
所写的程序中 的错误也会越来越不易察觉。

将来犯错的机会很多。你可能会犯基本的设计错误，可能错误地实现了 一个好想法，可能
忽视了输入检查导致程序瘫痪，可能会把圆括号放错地 方，可能误用 C 语言或打错字，等
等。把你将来犯错的地方列出来，这份错 误列表应该会很长。

看到这里你可能会有些绝望，但是情况没那么糟。现在的编译器会捕获 许多错误，而且自
己也可以找到编译器未发现的错误。在学习本书的过程 中，我们会给读者提供一些调试的
建议。

*** 1.7.7 第 7 步:维护和修改代码 45
   
创建完程序后，你发现程序有错，或者想扩展程序的用途，这时就要修 改程序。例如，用
户输入以 Zz 开头的姓名时程序出现错误、你想到了一个更 好的解决方案、想添加一个更
好的新特性，或者要修改程序使其能在不同的 计算机系统中运行，等等。如果在编写程序
时清楚地做了注释并采用了合理 的设计方案，这些事情都很简单。

*** 1.7.8 说明
编程并非像描述那样是一个线性的过程。有时，要在不同的步骤之间往 复。例如，在写代
码时发现之前的设计不切实际，或者想到了一个更好的解 决方案，或者等程序运行后，想
改变原来的设计思路。对程序做文字注释为 今后的修改提供了方便。

许多初学者经常忽略第 1 步和第 2 步(定义程序目标和设计程序)，直接 跳到第 3 步(编
写代码)。刚开始学习时，编写的程序非常简单，完全可以 在脑中构思好整个过程。即使写
错了，也很容易发现。但是，随着编写的程 序越来越庞大、越来越复杂，动脑不动手可不
行，而且程序中隐藏的错误也 越来越难找。最终，那些跳过前两个步骤的人往往浪费了更
多的时间，因为 他们写出的程序难看、缺乏条理、让人难以理解。要编写的程序越大越复
杂，事先定义和设计程序环节的工作量就越大。

磨刀不误砍柴工，应该养成先规划再动手编写代码的好习惯，用纸和笔 记录下程序的目标
和设计框架。这样在编写代码的过程中会更加得心应手、 条理清晰。

** 1.8 编程机制
 生成程序的具体过程因计算机环境而异。C是可移植性语言，因此可以 在许多环境中使用，
 包括 UNIX、Linux、MS-DOS(一些人仍在使用)、 Windows 和 Macintosh OS。有些产品会
 随着时间的推移发生演变或被取代， 本书无法涵盖所有环境。

首先，来看看许多 C 环境(包括上面提到的 5 种环境)共有的一些方 面。虽然不必详细了
解计算机内部如何运行 C 程序，但是，了解一下编程机 制不仅能丰富编程相关的背景知识，
还有助于理解为何要经过一些特殊的步 骤才能得到 C 程序。

用 C 语言编写程序时，编写的内容被储存在文本文件中，该文件被称为源代码文件
(source code file)。大部分 C 系统，包括之前提到的，都要求文 件名以.c 结尾(如，
wordcount.c 和 budget.c)。在文件名中，点号(.)前面 的部分称为基本名(basename)，点
号后面的部分称为扩展名 (extension)。因此，budget 是基本名，c是扩展名。基本名与扩
展名的组合 (budget.c)就是文件名。文件名应该满足特定计算机操作系统的特殊要求。例
如，MS-DOS 是 IBM PC 及其兼容机的操作系统，比较老旧，它要求基 本名不能超过 8 个
字符。因此，刚才提到的文件名 wordcount.c 就是无效的 DOS 文件名。有些 UNIX 系统限
制整个文件名(包括扩展名)不超过 14 个字符，而有些 UNIX 系统则允许使用更长的文件
名，最多 255 个字符。Linux、 Windows 和 Macintosh OS 都允许使用长文件名。

接下来，我们来看一下具体的应用，假设有一个名为 concrete.c 的源文 件，其中的 C 源
代码如程序清单 1.2 所示。

程序清单 1.2 c 程序 
#+BEGIN_SRC C
#include <stdio.h>
 int main(void)
{
printf("Concrete contains gravel and cement.\n");
return 0;
}
#+END_SRC

如果看不懂程序清单 1.2 中的代码，不用担心，我们将在第 2 章学习相关 知识。
*** 1.8.1 目标代码文件、可执行文件和库
C 编程的基本策略是，用程序把源代码文件转换为可执行文件(其中包含可直接运行的机器
语言代码)。典型的 C 实现通过编译和链接两个步骤来完成这一过程。编译器把源代码转
换成中间代码，链接器把中间代码和其他代码合并，生成可执行文件。C 使用这种分而治
之的方法方便对程序进行模块化，可以独立编译单独的模块，稍后再用链接器合并已编译
的模块。通过这种方式，如果只更改某个模块，不必因此重新编译其他模块。另外，链接
器还将你编写的程序和预编译的库代码合并。
**** 用程序把源代码文件转换为可执行文件（编译程序及链接程序）
**** 两步：编译和链接
**** 编译
编译器把源代码转换成中间代码（obj）
**** 链接
把中间代码和其他代码合并，生成可执行文件。
**** 分而治之方便对程序模块化。
可以独立编译单独的模块，稍后再用链接器合并已编译的模块。通过这种方式，如果只改某
 个模块，不必因此重新编译其他模块。另外，链接器还将你编写和程序和预编译的库代码
 合并。
**** 中间文件有多种形式。
我们在这里描述的是最普遍的一种形式，即把源代码转换为机器语言代码，并把结果放在目
标代码文件(或简称目标文件) 中(这里假设源代码只有一个文件)。虽然目标文件中包含机
器语言代码， 但是并不能直接运行该文件。因为目标文件中储存的是编译器翻译的源代码，
这还不是一个完整的程序。

****  目标代码文件缺失启动代码(startup code)。
***** 启动代码充当着程序和操作系统之间的接口。
  例如，可以在 MS Windows 或 Linux 系统下运行 IBM PC 兼 容机。这两种情况所使用的硬
  件相同，所以目标代码相同，/但是 Windows 和 Linux 所需的启动代码不同，/因为这些系统
  处理程序的方式不同。
*****  目标代码还缺少库函数。
几乎所有的 C 程序都要使用 C 标准库中的函 数。例如，concrete.c 中就使用了
printf()函数。目标代码文件并不包含该函数的代码，它只包含了使用 printf()函数的指
令。printf()函数真正的代码储存 在另一个被称为库的文件中。

***** 库文件中有许多函数的目标代码。
****  链接器的作用是，
把你编写的目标代码、系统的标准启动代码和库代码 这 3 部分合并成一个文件，即可执行
文件。对于库代码，链接器只会把程序 中要用到的库函数代码提取出来(见图 1.4)。

 图 1.4 编译器和链接器
 简而言之，目标文件和可执行文件都由机器语言指令组成的。然而，目标文件中只包含编
 译器为你编写的代码翻译的机器语言代码，可执行文件中 还包含你编写的程序中使用的库
 函数和启动代码的机器代码。

 在有些系统中，必须分别运行编译程序和链接程序，而在另一些系统 中，编译器会自动启
 动链接器，用户只需给出编译命令即可。

 接下来，了解一些具体的系统。
**** 目标文件和可执行文件都由机器语言指令组成
**** 目标文件只包含编译器为你编写的代码翻译的机器语言代码
**** 可执行文件中还包含你的程序中使用的库函数和启动代码的机器代码。
即：可执行文件=目标代码+库函数+启动代码
*** 1.8.2 UNIX 系统
由于 C 语言因 UNIX 系统而生，也因此而流行，所以我们从 UNIX 系统开 始(注意:我们提
到的 UNIX 还包含其他系统，如 FreeBSD，它是 UNIX 的一 个分支，但是由于法律原因不
使用该名称)。

**** 1.在 UNIX 系统上编辑
UNIX C 没有自己的编辑器，但是可以使用通用的 UNIX 编辑器，如
emacs、jove、vi 或 X Window System 文本编辑器。
作为程序员，要负责输入正确的程序和为储存该程序的文件起一个合适 的文件名。如前所
述，文件名应该以.c 结尾。注意，UNIX 区分大小写。因 此，budget.c、BUDGET.c 和
Budget.c 是 3 个不同但都有效的 C 源文件名。但是 BUDGET.C 是无效文件名，因为该名
称的扩展名使用了大写 C 而不是小写 c。

假设我们在 vi 编译器中编写了下面的程序，并将其储存在 inform.c 文件 中:
#+BEGIN_SRC C
#include <stdio.h>
int main(void)
{ 
printf("A .c is used to end a C program filename.\n"); 
return 0;
}
#+END_SRC

以上文本就是源代码，inform.c 是源文件。注意，源文件是整个编译过程的开始，不是结束。
**** 2.在 UNIX 系统上编译
虽然在我们看来，程序完美无缺，但是对计算机而言，这是一堆乱码。 计算机不明白
#include 和 printf 是什么(也许你现在也不明白，但是学到后面 就会明白，而计算机却
不会)。如前所述，我们需要编译器将我们编写的代 码(源代码)翻译成计算机能看懂的代码
(机器代码)。最后生成的可执行 文件中包含计算机要完成任务所需的所有机器代码。

以前，UNIX C 编译器要调用语言定义的 cc 命令。但是，它没有跟上标 准发展的脚步，已
经退出了历史舞台。但是，UNIX 系统提供的 C 编译器通常 来自一些其他源，然后以 cc
命令作为编译器的别名。因此，虽然在不同的系 统中会调用不同的编译器，但用户仍可以
继续使用相同的命令。

编译 inform.c，要输入以下命令:
cc inform.c
几秒钟后，会返回 UNIX 的提示，告诉用户任务已完成。如果程序编写 错误，你可能会看
到警告或错误消息，但我们先假设编写的程序完全正确 (如果编译器报告 void 的错误，说
明你的系统未更新成 ANSI C 编译器，只需 删除 void 即可)。如果使用 ls 命令列出文件，
会发现有一个 a.out 文件(见图 1.5)。该文件是包含已翻译(或已编译)程序的可执行文件。
要运行该文件，只需输入:

a.out
输出内容如下:
A .c is used to end a C program filename.

 图 1.5 用 UNIX 准备 C 程序 如果要储存可执行文件(a.out)，应该把它重命名。否则，
 该文件会被下一次编译程序时生成的新 a.out 文件替换。
如何处理目标代码?C 编译器会创建一个与源代码基本名相同的目标代码文件，但是其扩展
名是.o。在该例中，目标代码文件是 inform.o。然而， 却找不到这个文件，因为一旦链接
器生成了完整的可执行程序，就会将其删 除。如果原始程序有多个源代码文件，则保留目
标代码文件。学到后面多文件程序时，你会明白到这样做的好处。
*** 1.8.3 GNU 编译器集合和 LLVM 项目
GNU 项目始于 1987 年，是一个开发大量免费 UNIX 软件的集合(GNU 的 意思是“GNU’s Not
UNIX”，即 GNU 不是 UNIX)。GNU 编译器集合(也被称 为 GCC，其中包含 GCC C 编译器)是
该项目的产品之一。GCC 在一个指导委 员会的带领下，持续不断地开发，它的 C 编译器紧
跟 C 标准的改动。GCC 有 各种版本以适应不同的硬件平台和操作系统，包括 UNIX、Linux
和 Windows。用 gcc 命令便可调用 GCC C 编译器。许多使用 gcc 的系统都用 cc 作 为
gcc 的别名。

LLVM 项目成为 cc 的另一个替代品。该项目是与编译器相关的开源软件 集合，始于伊利诺
伊大学的 2000 份研究项目。它的 Clang 编译器处理 C 代 码，可以通过 clang 调用。有
多种版本供不同的平台使用，包括 Linux。2012 年，Clang 成为 FreeBSD 的默认 C 编译
器。Clang 也对最新的 C 标准支持得很 好。

GNU 和 LLVM 都可以使用-v 选项来显示版本信息，因此各系统都使用 cc 别名来代替 gcc
或 clang 命令。以下组合:

cc -v
显示你所使用的编译器及其版本。
gcc 和 clang 命令都可以根据不同的版本选择运行时选项来调用不同 C 标 准。
gcc -std=c99 inform.c[3] gcc -std=c1x inform.c gcc -std=c11 inform.c

第 1 行调用 C99 标准，第 2 行调用 GCC 接受 C11 之前的草案标准，第 3 行调 用 GCC
接受的 C11 标准版本。Clang 编译器在这一点上用法与 GCC 相同。

*** 1.8.4 Linux 系统
Linux 是一个开源、流行、类似于 UNIX 的操作系统，可在不同平台(包 括 PC 和 Mac)上
运行。在 Linux 中准备 C 程序与在 UNIX 系统中几乎一样，不 同的是要使用 GNU 提供的
GCC 公共域 C 编译器。编译命令类似于:

gcc inform.c
注意，在安装 Linux 时，可选择是否安装 GCC。如果之前没有安装 GCC，则必须安装。通
常，安装过程会将 cc 作为 gcc 的别名，因此可以在命 令行中使用 cc 来代替 gcc。

欲详细了解 GCC 和最新发布的版本，请访问 http://www.gnu.org/software/gcc/index.html。
*** 1.8.5 PC 的命令行编译器
C 编译器不是标准 Windows 软件包的一部分，因此需要从别处获取并安 装 C 编译器。可
以从互联网免费下载 Cygwin 和 MinGW，这样便可在 PC 上通 过命令行使用 GCC 编译器。
Cygwin 在自己的视窗运行，模仿 Linux 命令行环 境，有一行命令提示。MinGW 在
Windows 的命令提示模式中运行。这和 GCC 的最新版本一样，支持 C99 和 C11 最新的一
些功能。Borland 的 C++编译器 5.5 也可以免费下载，支持 C90。

源代码文件应该是文本文件，不是字处理器文件(字处理器文件包含许 多额外的信息，如字
体和格式等)。因此，要使用文本编辑器(如， Windows Notepad)来编辑源代码。如果使用
字处理器，要以文本模式另存 文件。源代码文件的扩展名应该是.c。一些字处理器会为文
本文件自动添 加.txt 扩展名。如果出现这种情况，要更改文件名，把 txt 替换成 c。

通常，C编译器生成的中间目标代码文件的扩展名是.obj(也可能是其他扩展名)。与 UNIX
编译器不同，这些编译器在完成编译后通常不会删除 这些中间文件。有些编译器生成带.asm
扩展名的汇编语言文件，而有些编译 器则使用自己特有的格式。

一些编译器在编译后会自动运行链接器，另一些要求用户手动运行链接 器。在可执行文件
中链接的结果是，在原始的源代码基本名后面加上.exe 扩 展名。例如，编译和链接
concrete.c 源代码文件，生成的是 concrete.exe 文件。 可以在命令行输入基本名来运行
该程序:

C>concrete
*** 1.8.6 集成开发环境(Windows)
许多供应商(包括微软、Embarcadero、Digital Mars)都提供 Windows 下的集成开发环境，
或称为 IDE(目前，大多数 IDE 都是 C 和 C++结合的编译 器)。可以免费下载的 IDE 有
Microsoft Visual Studio Express 和 Pelles C。利用 集成开发环境可以快速开发 C 程
序。关键是，这些 IDE 都内置了用于编写 C 程 序的编辑器。这类集成开发环境都提供了
各种菜单(如，命名、保存源代码 文件、编译程序、运行程序等)，用户不用离开 IDE 就能
顺利编写、编译和 运行程序。如果编译器发现错误，会返回编辑器中，标出有错误的行号，
并 简单描述情况。

初次接触 Windows IDE 可能会望而生畏，因为它提供了多种目标 (target)，即运行程序的
多种环境。例如，IDE 提供了 32 位 Windows 程序、 64 位 Windows 程序、动态链接库文
件(DLL)等。许多目标都涉及 Windows 图形界面。要管理这些(及其他)选择，通常要先创建
一个项目 (project)，以便稍后在其中添加待使用的源代码文件名。不同的产品具体 步骤
不同。一般而言，首先使用【文件】菜单或【项目】菜单创建一个项 目。选择正确的项目
形式非常重要。本书中的例子都是一般示例，针对在简 单的命令行环境中运行而设计。
Windows IDE 提供多种选择以满足用户的不 同需求。例如，Microsoft Visual Studio 提
供【Win32 控制台应用程序】选 项。对于其他系统，查找一个诸如【DOS EXE】、
【Console】或

【Character Mode】的可执行选项。选择这些模式后，将在一个类控制台窗 口中运行可执
行程序。选择好正确的项目类型后，使用 IDE 的菜单打开一个 新的源代码文件。对于大多
数产品而言，使用【文件】菜单就能完成。你可 能需要其他步骤将源文件添加到项目中。

通常，Windows IDE 既可处理 C 也可处理 C++，因此要指定待处理的程序 是 C 还是 C++。
有些产品用项目类型来区分两者，有些产品(如，Microsoft Visual C++)用.c 文件扩展名
来指明使用 C 而不是 C++。当然，大多数 C 程序 也可以作为 C++程序运行。欲了解 C 和
C++的区别，请参阅参考资料 IX。

你可能会遇到一个问题:在程序执行完毕后，执行程序的窗口立即消 失。如果不希望出现这
种情况，可以让程序暂停，直到按下 Enter 键，窗口 才消失。要实现这种效果，可以在程
序的最后(return 这行代码之前)添加 下面一行代码:

getchar();
该行读取一次键的按下，所以程序在用户按下 Enter 键之前会暂停。有 时根据程序的需要，
可能还需要一个击键等待。这种情况下，必须用两次 getchar():

getchar();
getchar();
例如，程序在最后提示用户输入体重。用户键入体重后，按下 Enter 键 以输入数据。程序
将读取体重，第 1 个 getchar()读取 Enter 键，第 2 个 getchar() 会导致程序暂停，直
至用户再次按下 Enter 键。如果你现在不知所云，没关 系，在学完 C 输出后就会明白。
到时，我们会提醒读者使用这种方法。

虽然许多 IDE 在使用上大体一致，但是细节上有所不同。就一个产品的 系列而言，不同版
本也是如此。要经过一段时间的实践，才会熟悉编译器的 工作方式。必要时，还需阅读使
用手册或网上教程。
Microsoft Visual Studio 和 C 标准
在 Windows 软件开发中，Microsoft Visual Studio 及其免费版本 Microsoft Visual
Studio Express 都久负盛名，它们与 C 标准的关系也很重要。然而，微 软鼓励程序员从
C 转向 C++和 C#。虽然 Visual Studio 支持 C89/90，但是到目前 为止，它只选择性地支
持那些在 C++新特性中能找到的 C 标准(如，long long 类型)。而且，自 2012 版本起，
Visual Studio 不再把 C 作为项目类型的选 项。尽管如此，本书中的绝大多数程序仍可用
Visual Studio 来编译。在新建 项目时，选择 C++选项，然后选择【Win32 控制台应用程
序】，在应用设置 中选择【空项目】。几乎所有的 C 程序都能与 C++程序兼容。所以，本
书中 的绝大多数 C 程序都可作为 C++程序运行。或者，在选择 C++选项后，将默 认的源
文件扩展名.cpp 替换成.c，编译器便会使用 C 语言的规则代替 C++。

*** 1.8.7 Windows/Linux
许多 Linux 发行版都可以安装在 Windows 系统中，以创建双系统。一些存储器会为
Linux 系统预留空间，以便可以启动 Windows 或 Linux。可以在 Windows 系统中运行
Linux 程序，或在 Linux 系统中运行 Windows 程序。不能通 过 Windows 系统访问 Linux
文件，但是可以通过 Linux 系统访问 Windows 文档。

*** 1.8.8 Macintosh 中的 C 
目前，苹果免费提供 Xcode 开发系统下载(过去，它有时免费，有时付费)。它允许用户选
择不同的编程语言，包括 C 语言。
Xcode 凭借可处理多种编程语言的能力，可用于多平台，开发超大型的 项目。但是，首先
要学会如何编写简单的 C 程序。在 Xcode 4.6 中，通过 【File】菜单选择【New
Project】，然后选择【OS X Application Command Line Tool】，接着输入产品名并选择
C 类型。Xcode 使用 Clang 或 GCC C 编译 器来编译 C 代码，它以前默认使用 GCC，但是
现在默认使用 Clang。可以设置 选择使用哪一个编译器和哪一套 C 标准(因为许可方面的
事宜，Xcode 中 Clang 的版本比 GCC 的版本要新)。

UNIX 系统内置 Mac OS X，终端工具打开的窗口是让用户在 UNIX 命令行 环境中运行程序。苹
果在标准软件包中不提供命令行编译器，但是，如果下载了 Xcode，还可以下载可选的命
令行工具，这样就可以使用 clang 和 gcc 命 令在命令行模式中编译。
** 1.9 本书的组织结构
本书采用多种方式编排内容，其中最直接的方法是介绍 A 主题的所有内 容、介绍 B 主题
的所有内容，等等。这对参考类书籍来说尤为重要，读者可 以在同一处找到与主题相关的
所有内容。但是，这通常不是学习的最佳顺 序。例如，如果在开始学习英语时，先学完所
有的名词，那你的表达能力一 定很有限。虽然可以指着物品说出名称，但是，如果稍微学
习一些名词、动 词、形容词等，再学习一些造句规则，那么你的表达能力一定会大幅提高。

为了让读者更好地吸收知识，本书采用螺旋式方法，先在前几个章节中 介绍一些主题，在
后面章节再详细讨论相关内容。例如，对学习 C 语言而 言，理解函数至关重要。因此，我
们在前几个章节中安排一些与函数相关的 内容，等读者学到第 9 章时，已对函数有所了解，
学习使用函数会更加容 易。与此类似，前几章还概述了一些字符串和循环的内容。这样，
读者在完 全弄懂这些内容之前，就可以在自己的程序中使用这些有用的工具。

** 1.10 本书的约定
 在学习 C 语言之前，先介绍一下本书的格式。 

*** 1.10.1 字体本书用类似在屏幕上或打印输
  出时的字体(一种等宽字体)，表示文本程序和计算机输入、输出。前面已经出现了多次，
  如果读者没有注意到，字 体如下所示:

 #include <stdio.h>
 int main(void)
 { printf("Concrete contains gravel and cement.\n"); return 0;
 }
 在涉及与代码相关的术语时，也使用相同的等宽字体，如 stdio.h。本书 用等宽斜体表示
 占位符，可以用具体的项替换这些占位符。例如，下面是一个声明的模型:

 type_name variable_name; 这里，可用 int 替换 type_name，用 zebra_count 替换
 variable_name。

*** 1.10.2 程序输出
 本书用相同的字体表示计算机的输出，粗体表示用户输入。例如，下面是第 14 章中一个程序的输出:
   60

 Please enter the book title. Press [enter] at the start of a line to stop. My Life as a Budgie
 Now enter the author.
 Mack  Zackle s 如上所示，以标准计算机字体显示的行表示程序的输出，粗体行表示用户的输入。
 可以通过多种方式与计算机交互。在这里，我们假设读者使用键盘键入 内容，在屏幕上阅读计算机的响应。
 
**** 1.特殊的击键
  通常，通过按下标有 Enter、c/r、Return 或一些其他文字的键来发送指 令。本书将这
  些按键统一称为 Enter 键。一般情况下，我们默认你在每行输 入的末尾都会按下 Enter
  键。尽管如此，为了标示一些特定的位置，本书使 用[enter]显式标出 Enter 键。方括
  号表示按下一次 Enter 键，而不是输入 enter。

  除此之外，书中还会提到控制字符(如，Ctrl+D)。这种写法的意思 是，在按下 Ctrl 键
  (也可能是 Control 键)的同时按下 D 键。

 
****  2.本书使用的系统
  C 语言的某些方面(如，储存数字的空间大小)因系统而异。本书在示 例中提到“我们的系
  统”时，通常是指在 iMac 上运行 OS X 10.8.4，使用 Xcode 4.6.2 开发系统的 Clang
  3.2 编译器。本书的大部分程序都能使用 Windows7 系 统的 Microsoft Visual Studio
  Express 2012 和 Pelles C 7.0，以及 Ubuntu13.04 Linux 系统的 GCC 4.7.3 进行编译。

 
****  3.读者的系统

  你需要一个 C 编译器或访问一个 C 编译器。C程序可以在多种计算机系统中运行，因此
  你的选择面很广。确保你使用的 C 编译器与当前使用的计算机 系统匹配。本书中，除了
  某些示例要求编译器支持 C99 或 C11 标准，其余大 部分示例都可在 C90 编译器中运行。
  如果你使用的编译器是早于 ANSI/ISO 的 老式编译器，在编译时肯定要经常调整，很不
  方便。与其如此，不如换个新的编译器。

  大部分编译器供应商都为学生和教学人员提供特惠版本，详情请查看供 应商的网站。
  
*** 1.10.3 特殊元素
本书包含一些强调特定知识点的特殊元素，提示、注意、警告，将以如下形式出现在本书中:
- 边栏
 边栏提供更深入的讨论或额外的背景，有助于解释当前的主题。
- 提示
 提示一般都短小精悍，帮助读者理解一些特殊的编程情况。 
- 警告
用于警告读者注意一些潜在的陷阱。 注意 提供一些评论，提醒读者不要误入歧途。

** 1.11 本章小结
 C 是强大而简洁的编程语言。它之所以流行，在于自身提供大量的实用编程工具，能很好
 地控制硬件。而且，与大多数其他程序相比，C程序更容易从一个系统移植到另一个系统。

C 是编译型语言。C编译器和链接器是把 C 语言源代码转换成可执行代码的程序。
用 C 语言编程可能费力、困难，让你感到沮丧，但是它也可以激发你的兴趣，让你兴奋、
满意。我们希望你在愉快的学习过程中爱上 C。

** 1.12 复习题
 复习题的参考答案在附录 A 中。 

*** 1.对编程而言，可移植性意味着什么?

*** 2.解释源代码文件、目标代码文件和可执行文件有什么区别?

*** 3.编程的 7 个主要步骤是什么?

***  4.编译器的任务是什么?

***  5.链接器的任务是什么?

** 1.13 编程练习 我们尚未要求你编写 C 代码，该练习侧重于编程过程的早期步骤。
*** 1.
你刚被 MacroMuscle 有限公司聘用。该公司准备进入欧洲市场，需要 一个把英寸单位转换
为厘米单位(1 英寸=2.54 厘米)的程序。该程序要提 示用户输入英寸值。你的任务是定义
程序目标和设计程序(编程过程的第 1 步和第 2 步)。

[1].国际 C 语言混乱代码大赛(IOCCC，The International Obfuscated C Code Contest)。
这是一项国际编程赛事，从 1984 年开始，每年举办一次(1997、 1999、2002、2003 和
2006 年除外)，目的是写出最有创意且最让人难以理解 的 C 语言代码。——译者注

[2].VAX(Virtual Address eXtension)是一种可支持机器语言和虚拟地址的 32 位小型计算
机。VMS(Virtual Memory System)是旧名，现在叫 OpenVMS， 是一种用于服务器的操作系
统，可在 VAX、Alpha 或 Itanium 处理器系列平台 上运行。——译者注

[3].GCC 最基本的用法是:gcc [options] [filenames]，其中 options 是所需的参 数，
filenames 是文件名。——译者注



* 第 2 章 C 语言概述
本章介绍以下内容：
- 运算符：=
- 函数：main()、printf()
- 编写一个简单的 C 程序
- 创建整形变量，为其赋值并在屏幕上显示其值
- 换行字符
- 如何在程序中写注释，创建包含多个函数的程序，发现程序的错误
- 什么是关键字

C 程序是什么样子的？浏览本书，能看到许多示例。初见 C 程序会觉得有些古怪，程序中的许
多{、cp-tor 和 ptr++这样的符号。然而，在学习 C 的过程中，对这些符号和 C 语言特有的其他
符号会越来越熟悉，甚至会喜欢上它们。如果熟悉与 C 相关的其他语言，会对 C 语言有似曾相
识的感觉。本章，我们从演示一个简单的程序示例开始，解释该程序的功能。同时，强调一
些 C 语言的基本特性。
** 2.1 简单的 C 程序示例

我们来看一个简单的 C 程序，如程序清单 2.1 所示。该程序演示了用 C 语言编程的一些基本特
性。请先通读程序清单 2.1，看看自己是否能明白该程序的用途，再认真阅读后面的解释。

程序清单 2.1 first.c 程序

#+BEGIN_SRC C
        // This is 2.1 first.c
        //first
        //
        //Created by Mac on<2020-04-16 Thu>
        //Copyright @ 2020 Mac All rights reserved.
        //
        #include<stdio.h>
        int main(void)  /*一个简单的C程序*/
      {
      int num;  /*定义一个名为num的变量*/
      num=1;  /*为num赋一个值*/
      printf("I am a simple");  /*使用printf()函数*/
      printf("computer.\n");
printf("My favorite number is %d because it is first.\n",num);
return ;
    }

#+END_SRC 

输出内容为：

I am a simple computer.

My favorite number is 1 because it is first.

程序调整

程序的输出是否在屏幕上一闪而过？某些窗口环境会在单独的窗口运行程序，然后在程序运
行结束后自动关闭窗口。如果遇到这种情况，可以在程序中加代码，让窗口等待用户按下一
个键后才关闭。一种方法是，在程序的 return 语句前加一行代码：

getchar();

这行代码让程序等待击键，窗口会在用户按下一个键后才关闭。在第八章详细介绍
getchar()的内容。

** 2.2 示例解释

把程序清单 2.1 分析两遍。第 1 遍（快速概要）概述程序中每行代码的作用，帮助读者初步了
解程序。第 2 遍（程序细节）详细分析代码的具体含义，帮助读者深入理解程序。

图 2.1 总结了组成 C 程序的几个部分，图中包含的元素比第 1 个程序多

如何插入图：[[./2.1.pdf]]
函数中 C 的 6 种语句：
- 标号语句
- 复合语句
- 表达式语句
- 选择语句
- 迭代语句
- 跳转语句

C 语言语句的构成：

- 关键字
- 标识符
- 运算符
- 数据

*** 2.2.1 第 1 遍：快速概要

本节简述程序中的每行代码的作用。下一节详细讨论代码的含义。

#include<stdio.h> ←包含另一个文件

该行告诉编译器把 stdio.h 中的内容包含在当前程序中。stdio.h 是 C 编译器软件包的标准部
分，它提供键盘输入和屏幕输出的支持。

int main(void) ←函数名

C 程序包含一个或多个函数，它们是 Ctkcyr 基本模块。程序清单 2.1 的程序中有一个名为
main()的函数。圆括号表明 main()是一个函数名。int 表明 main()函数返回一个整数，void
表明 main()不带任何参数。int and void 是标准 ANSI C 定义 main()的一部分（）如果使用
ANSI C 之前的编译器，可省略 void;考虑兼容的问题，使用较新的 C 编译器。

/*一个简单的 C 程序*/  ←注释

注释在/*和*/两个符号之间，这些注释能提高程序的可读性。注释只是帮助读者理解程序，
编译器会忽略它们。

{  ←函数体开始

左花括号表示函数定义开始，右花括号（}）表示函数定义结束。

int num;  ←声明

该声明表明，将使用一个名为 num 的变量，而且 num 是 int(整形)类型。

num=1;  ←赋值表达式语句

语句 num=1;把值 1 赋给名为 num 的变量。

printf("I am a simple");  ←调用一个函数

该语句使用 printf()函数，在屏幕上显示 I am a simple，光标停在同一行。printf()是标
准的 C 库函数。在程序中使用函数叫作*调用函数*。

printf("computer.\"); ←调用另一个函数

接下来调用的这个 printf()函数在上条语句打印出来的内容后面加上"computer"。代码\n 告
诉计算机另起一行，即把光标移至下一行。

printf("My favorite number is %d because it is first.\n",num);

最后调用的 printf()把 num 的值（1）内嵌在用双引号括起来的内容中一并打印。%d 告诉计算
机以何种形式输出 num 的值，打印在何处。

return 0;  ←return 语句

C 函数可以给调用方提供（或返回）一个数。目前，可暂时把该行看作是结束 main()函数的
要求。

}   ←结束

必须以右花括号表示程序结束。

*** 2.2.2 第 2 遍：程序细节

浏览完程序清单 2.2 后，仔细分析程序。再次强调，将逐行分析程序中的代码，以每行代码
为出发点，深入分析代码背后的细节，为更全面的学习 C 语言编程的特性夯实基础。

**** 1.#include 指令和头文件

#include<stdio.h>

这是程序的第一行。#include<stdio.h>的作用相当于把 stdio.h 文件中的所有内容都输入该
行所在的位置。实际上，这是一种“拷贝-粘贴”的操作。

include 文件提供了一种方便的途径共享许多程序共有的信息。

#include 这行代码是一条 C 预处理器指令(proprocessor directive)。通常，C编译器在编译
#前会对源代码做一些准备工作，即预处理（proprocessing）。

所有的 C 编译器软件都提供 stdio.h 文件。该文件中包含了供编译器使用的输入和输出函数
（如，printf()）信息。该文件名的含义是标准输入/输出头文件。通常，在 C 程序顶部的信
息集合被称为头文件（header）。

在大多数情况下，头文件包含了编译器创建最终可执行程序要用到的信息。例如，头文件中
可以定义一些常量，或者指明函数名以及如何使用它们。但是，函数的实际代码在一个预编
译代码的库文件中。简而言之，头文件帮助编译器把你的程序正确的组合在一起。

ANSI/ISO C 规定了 C 编译器必须提供哪些头文件。有些程序要包含 stdio.h，而有些不用。特
定 C 实现的文档中应该包含对 C 库函数的说明。这些说明确定了使用哪些函数需要包含哪些头
文件。例如，要使用 printf()函数，必须包含 stdio.h 头文件。省略必要的头文件可能不会
影响某一特定程序，但是最好不要这样做。本书每次用到库函数，都会用#include 指令包含
ANSI/ISO 标准指定的头文件。

注意 为何不内置输入和输出

读者一定很好奇，为何不把输入和输出这些基本功能内置在语言中。原因之一是，并非所有
的程序都会用到 I/O（输入/输出）包。轻装上阵表现了 C 语言的哲学。正是这种经济使用资
源的原则，使得 C 语言成为流行的嵌入式编程语言（例如，编写控制汽车自动燃油系统或蓝
光播放机芯片的代码）。#include 中的#符号表明，C预处理器在编译器接手之前处理这条指
令。本书后面章节中会介绍更多预处理器指令的示例，第 16 章将更详细地讨论相关内容。

**** 2.main()函数

int main(void);

程序清单 2.2 中的第 2 行表明该函数名为 main。的确，main 是一个极其普通的名称，但是这是
唯一的选择。C程序一定从 main()函数开始执行（目前不必考虑例外的情况）。坠子 main()
函数，你可以任意命名其他函数，而且 main()函数必须是开始的函数。圆括号有什么功能？
用于识别 main()是一个函数。很快你将学到更多的函数。目前而言，只需记住函数是 C 语序
的基本模块。

int 是 main()函数的返回类型。表明 main()函数返回的值是整数。返回到哪里？返回给操作
系统。我们将在第 6 章再来探讨这个问题。

通常，函数名后面的圆括号中包含一些传入函数的信息。该例中没有传递任何信息。因此，
圆括号内是单词 void（第 11 章次介绍把信息从 main()函数传回操作系统的另一种形式）。

如果浏览旧式的 C 代码，会发现程序以如下形式开始：

main()

C90 标准勉强接受这种形式，但是 C99 和 C11 标准不允许这样写。因此，即使你使用的编译器
允许，也不要这样写。

你还会看到下面这种形式：

void main()

一些编译器允许这样写，但是所有的标准都未认可这种写法。因此，编译器不必接受这种形
式，而且许多编译器都不能这样写。需要强调的是，只要坚持使用标准形式，把程序从一个
编译器移至另一个编译器时就不会出什么问题。

**** 3.注释

/*一个简单的程序*/

在程序中，被/**/两个符号括起来的部分是程序的注释。写注释能让他人（包括自己）更容
易明白你所写的程序。C语言注释的好处之一是，可将注释放在任意的地方，甚至是与要解
释的内容在同一行。较长的注释可单独放一行或多行。在/*和*/之间的内容都会被编译器忽
略。下面列出了一些有效和无效的注释形式：

/*这是一条 C 注释。*/

/*这也是一条注释，

被分成了两行。*/

/*

也可以这样写注释。

*/

/*这条注释无效，因为缺少了结束标记。

C99 新增了另一种风格的注释，普遍用于 C++和 Jave。这种新风格使用//符号创建注释，仅限
于单行。

//这种注释只能写成一行。

int rigue;//这种注释也可置于此。

因为一行末尾就标志着注释的结束，所以这种风格的注释只需在注释开始下标明//符号即可。

这种新形式的注释是为了解决旧形式注释存在的潜在问题。假设有下面的代码：

#+BEGIN_SRC C

/*

希望能运行

*/

x=100;

Y=200;

/* 其它内容已省略。 */

#+END_SRC
接下来，假设你决定删除第 4 行，但不小心删掉了第 3 行（*/）。代码如下所示：

#+BEGIN_SRC C
/*

希望能运行。

y=200;

/*其他内容已省略。*/

#+END_SRC 

  现在，编译器把第 1 行的/*和第 4 行的*/配对，导致 4 行代码全部成了注释（包括应作为代码
的那一行）。而//形式的注释只对单行有效，不会导致这种“消失代码”的问题。

一些编译器可能不支持这一特性。还有一些编译器需要更改设置，才能支持 C99 或 C11 的特性。

  考虑到只有一种注释风格过于死板乏味，本书在示例中采用两种风格的注释。

**** 4.花括号、函数体和块

{

…

}

  程序清单 2.1 中，花括号把 main()函数括起来。一般而言，所有的
C 函数都使用花括号标记函数体的开始和结束。这是规定，不能省略。只有花括号（{}）能
起这种作用，圆括号（（））的方括号（[]）都不行。

  花括号还可用于把函数中的多条语句合并为一个单元或块。如果读者熟悉 Pascal、ADA、
Modula-2 或者 Algol， 就会明白花括号在 C 语言中的作用类似于这些语言中的 begin 和 end。

**** 5.声明

int num;

程序清单 2.1 中，这行代码叫作声明(declaration)。声明是 C 语言最重要的特性之一。在该
例中，声明完成了两件事。

其一，在函数中有一个名为 num 的变量（variable）。

其二，int 表明 num 是一个整数（即没有小数点或小数部分的数）。int 是一种数据类型。编
译器使用这些信息为 num 变量在内存中分配存贮空间。分号在 C 语言中是大部分语句和声明的
平分，不像在 Pascal 中只是语句间的分隔符。

int 是 C 语言的一个关键字（keyword），表示一种基本的 C 语言数据类型。关键字是语言定义
的单词，不能做其他用途。例如，不能用 int 作为函数名我变量名。但是，这些关键字在该
语言外不起作用，所以把一只猫或一个可爱的小孩叫 int 是可以的（尽管某些地方的当地习
俗或法律可能不允许）。

示例中的 num 是一个标识符(indentifier)，也就一个变量、函数或其他实体的名称。因此，
声明把特定标识符与计算机内存中的特定位置联系起来，同时也确定了储存在某位置的信息
类型或数据类型。

在 C 语言中，所有变量都必须先声明才能使用。这章法着必须列出程序中用到的所有变量名
及其类型。

以前的 C 语言，还要求把变量声明在块的顶部，其他语句不能在任何声明的前面。也就是说，
main()函数体如下所示：

#+BEGIN_SRC C
int main()//旧规则
{
int doors;
int dogs;
doors=5;
dogs=3;
//其他语句

}

#+END_SRC

C99 和 C11 遵循 C++的惯例，可以把声明放在块中任何位置。尽管如此，首次使用变量之前一
定要先声明它。因此，如果编译器支持这一新特性，可以这样编写上面的代码：
#+BEGIN_SRC C
int main()   //目前的C规则
{
//一些语句
int doors;
doors=5;//第1次使用doors
//其他语句
int dogs;
dogs=3;//第1次使用dogs
//其他语句
}
#+END_SRC  

为了与旧系统更好地兼容，本书沿用最初的规则（即把变量声明都写在块的顶部）。

现在，读者可能有 3 问题：
- 什么是数据类型？
- 如何命名？
- 为何要声明变量？

***** 数据类型

C 语言可以处理多种类型的数据，如整数、字符和浮点数。把变量声明为整形或字符类型，
计算机才能正确地储存、读取和解释数据。下一章将详细介绍 C 语言中的各种数据类型。

***** 命名

给变量命名时要使用有意义的变量或标识符（如，程序中需要一个变量数狗，该变量名应该
是 dog_count 而不是 x3）。如果变量名无法清楚地表达自身的用途，可在注释中进一步说明。
这是一种良好的编程习惯和编程技巧。

C99 和 C11 允许使用更长的标识符名，但是编译器中识别前 63 年字符。对于外部标识符（参阅
第 12 章），只允许使用 31 个字符。（以前 C90 只允许 6 个字符），这是一个很大的进步。旧式
编译器通常最多只允许使用 8 个字符）。实际上，你可以使用更长的字符，但是编译器会忽
略超出的字符。也就是说，如果有两个标识符名都有 63 个字符，只有一个字符不同，那么编
译器会识别这是两个不同的名称。如果两个标识符都是 64 个字符，只有最后一个字符不同，
那么编译器可能交其视为同一个名称，也可能不会。标准并未定义在这种情况下会发生什么。

可以用小写字母、大写字母、数字和下划线（——）来命名。而且，名称的第 1 个字符必须是
字符或下划线，不能是数字。表 2.1 给出了一些示例。
表 2.1 有效和无效的名称
|------------+------------+--------------|
| 有效的名称 | 无效的名称 | 原因         |
|------------+------------+--------------|
| wiggles    | $2]**      | 首字不为字母 |
| cat2       | 2cat       |              |
| Hot_Tub    | Hot-Tub    | 仅可用下划线 |
| taxRate    | tax rate   | 不能用空格   |
| _kcab      | don't      | '不能用      |
|------------+------------+--------------|


*大小写字母* 

*数字*

*下划线*

*首字不能为数字*

*C99 及 C11 长度 63 个字符*

*外部标识符长度为 31 个*

*C90 只允许 8 个字符*

*操作系统及 C 库标识符首字符默认下划线*

操作系统和 C 库经常使用以一个或两个下划线字符开始的标识答（如，_kcab），因此最好避
免在自己的程序中使用这种名称。标准标签都以一个或两个下划线字符开始，如库标识符。
这样的标识符都是保留的。这意味着，虽然使用它们没有语法错误，但是会导致名称冲突。

C 语言的名称区分大小写，即把一个字母的大写和小写视为两个不同的字符。因此，stars 和
Stars、STARS 都不同。

为了让 C 语言更加国际化，C99 和 C11 根据通用字符名（即 UCN）机制添加了扩展字符集。其中
包函了除英文字母以外的部分字符。欲了解详细内容，请参阅附录 B 的“参考资料 VII：扩展
字符支持”。

***** 声明变量的四个理由

一些更老的语言（如，fortran 和 basic 的最初形式）都允许直接使用变量，不必先声明。为
何 c 语言不采用这种简单易行的方法？原因如下。

把所有变量放在一处，方便读者查找和理解程序的用途。如果变量名都是有意义的（如，
taxtate 而不是 r），这样做效果很好。如果变更名无法表述清楚，在注释中解释变量的含义。
这种方法让程序的可读性更高。

声明变量会促使在编写程序之前做一些计划。程序在开始时要获得哪些信息？希望程序如何
输出？表示数据最好的方式是什么？

声明变量有助于发现隐藏在程序中的小错误，如变量名拼写错误。例如，假设在某些不需要
声明就可以直接使用变量的语言中，编写如下语句：

RADIUS1=20.R;

在后面的程序中，误写成：

CIRCUM=6.28*RADIUSl;

你不小心把数字 1 打成小写字母 l。这些语言会创建一个新的变量 RADIUSl，并使用该变量中
的值（也许是 0，也许是垃圾值），导致赋给 CIRCUM 的值是错误值。可能要花很长时间才能
查出原因。这种错误在 c 语言中不会发生（除非你很不明智地声明了两个极其相似的变量），
因为编译器在发现未声明的 RADIUS1 时会报错。

如果事先未声明变量，c程序将无法通过编译。如果前几个理由还不足以说服你，这个理由
总可以让你认真考虑一下了。

如果要声明变量，应该声明在何处？前面提到过，c99 之前的标准要求氢声明都置于块的顶
部，这样规定的好处是：把声明放在一起更容易理解程序的用途。c99 允许在需要时才声明
变量，这样做的好处是：在给变量赋值之前声明变量，就不会忘记给变量赋值。但是实际上，
许多编译器都不支持 c99。

**** 6.赋值

num=1;

程序清单中的这行代码是赋值表达式语句。赋值是 c 语言的基本操作之一。该行代码的意思
是“反值 1 赋给变量 num”。在执行 int num;声明时，编译器在计算机内存中为变量 num 预留了
空间，然后在执行这行赋值表达式语句时，把值储存在之前预留的位置。可以给 num 赋不同
的值，这 num 之所以被称为变量（variable）的原因。注意，该赋值表达式语句从右侧把值
赋到左侧。另外，该语句以分号结尾，如图 2.2 所示。

其中等号为赋值运算符

**** 7.printf()函数

printf("I am a simple");

printf("computer.\n");

printf("My favorite number is %d because it is first.\n",num);

这三行都使用了 C 语言的一个标准函数：printf()。圆括号表明 printf 是一个函数名。圆括
号内的内容是从 main()函数传递给 printf()函数的信息。例如，上面的第 1 行把 I am a
simple 传递给 printf()函数。该信息被称为参数，或者更确切地说，是函数的实际参数
（actual argument），【在 C 语言中，实际参数（简称实参）是传递给函数的特定值，形式
参数（简称形参）是函数中用于储存值的变量。第 5 章中将详述相关内容。】printf()函数
用参数来做什么？该函数会查看双引号中的内容，并将其打印在屏幕上。

第 1 行 printf()演示了在 C 语言中如何调用函数。只需输入函数名，把所需的参数填入圆括号
即可。当程序运行到这一行时，控制权被转给命名的函数（该例中是 printf()）。函数执行
结束后，控制权被返回至主调函数（calling function），该例中是 main()。

第 2 行 printf()函数的双绰号中的\n 字符并未输出。这是为什么？\n 的意思是换行。\n 组合
（依次输入这两个字符）代表一个换行符（newline charactor）。对于 printf()而言，这
的意思是“在下一行的最左加开始新的一行”。也就是说，打印换行符的效果与在键盘按下
Enter 键相同。既然如此，为何不在键入 printf()参数时直接使用 Enter 键？因为编辑器可能
认为这是直接的命令，而不是储存在源代码中的指令。换名话说，如果直接按下 Enter 键，
编辑器会退出当前行并开始新的一行。但是，换行符公会影响程序输出的显示格式。

换行符是一个转义序列（escape sequence）。转义序列用于代表难以表示或无法输入的字
符。如，\t 代表 Tab 键，\b 代表 Backspace 键（退格键）。每个转义序列都以反斜杠字符（\n）
开始。我们在第 3 章再来探讨相关内容。

这样，就解释了为什么 3 行 printf()语句只打印出两行：第 1 个 printf()打印的内容中不含换
行符，但是第 2 和第 3 个 printf()中都有换行符。

第 3 个 printf()还有一些不明之处：参数中的%d 在打印时有什么作用？先来看该函数的输出：

My favorite number is 1 because it is first.

对比发现，参数中的%d 被数字 1 代替了，而 1 就是变量 num 的值。%d 相当于是一个占位符，其
作用是指明输出 num 值的位置。该行和下面的 BASIC 语句很像：

PRINT"My favorite number is ";num;because it is first."

实际上，C语言的 printf()比 BASIC 的这条语句做的事情多一些。%提醒程序，要在该处打印
一个变更，d表明把变量作为十进制整数打印。printf()函数名中的 f 提醒用户，这是一种格
式化打印函数。printf()函数有多种打印变量的格式，包括小数和十六进制整数。后面章节
在介绍数据类型时，会详细介绍相关内容。

**** 8.return 语句

return 0;

return 语句是程序清单 2.1 的最后一条语句。int main(void)中的 int 表明 main()函数应返
回一个整数。C标准要求 main()这样做。有返回值的 C 函数要有 return 语句。该语句以 return
关键字开始，后面是待返回的值，并以分号结尾。如果遗漏 main()函数中的 return 语句，程
序在运行至最外面的右花括号（}）时会返回 0。因此，可以省略 main()函数末尾的 return 语
句。但是，不要在其他有返回值的函数中漏掉它。因此，强烈建议读者养成在 main()函数中
保留 return 语句的好习惯。在这种情况下，可将其看作是统一代码风格。但对于某些操作系
统（包括 Linux 和 UNIX），return 语句有实际的用途。第 11 章再详述这个主题。


** 2.3 简单程序的结构 

分析过一个具体的程序示例后，了解一个程序的基本结构。程序由一个或多个函数组成，必
须有 main()函数。函数由函数头和函数体组成。函数头包括函数名、传入该函数的信息类型
和函数的返回类型。通过函数名后的圆括号可识别出函数，圆括号里可能为空，可能有参数。
函数体被花括号括起来，由一系列语句、声明组成，如图 2.4 所示。本章的程序示例中有一
条声明，声明了程序使用的变量名和类型。然后是一条赋值表达式语句，变量被赋给一个值。
接下来是 3 条 printf()语句，调用 printf()函数 3 次。最后，main()以 return 语句结束。
#+BEGIN_SRC C

int main(void)//函数头
{
int num;//声明
num=1;//语句
printf("%d is neat. \n",num);//语句
return 0;//语句
}
#+END_SRC

图 2.4 函数包含函数头和函数体

阐而言之，一个简单的 C 程序的格式如下：

#+BEGIN_SRC C
#include<stdio.h>
int main(void)
{
语句
return 0;
}
#+END_SRC

(大部分语句都以分号结尾。)

** 2.4 提高程序可读性的技巧

编写可读性高和程序是良好的编程习惯。可读性高的程序更容易理解，以后也更容易修改和
更正。抽调程序的可读性还有助于理清编程思路。

前面介绍过两种提高程序可读性的技巧：选择有意义的函数名和写注释。注意，使用这两种
技巧时应相得益彰，避免重复啰嗦。如果变量名是 width, 就不必写注释说明该变量表示宽
度，但是如果变量名是 video_routine_4，就要解释一下该变量名的含义。

提高程序可读性的第 3 个技巧是：在函数中用空行分隔概念上的多个部分。例如，程序清单
2.1 中用窄把声明部分和程序的其他部分区分开来。C语言并未规定一定要使用空行，但是多
使用空行能提高程序的可读性。

提高程序可读性的第 4 个技巧是：每条语句各占一行。同样，这也不是 C 语言的要求。C语言
的格式比较自由，可以把多条语句放在一行，也可以每条语句独占一行。下面的语句都没问
题，但是不好看：
#+BEGIN_SRC C
int main(void){int four; four
=
4;
printf(
"%d\n",
four);return 0;}
#+END_SRC

分号告诉编译器一条语句在哪里结束、下一条语句在哪里开始。如果按照本章示例的约定来
编写代码（见图 2.5），程序的逻辑会更清晰。

#+BEGIN_SRC C
  int main(void)/*把2音寻（测水深的单位）转换成英尺*/---写注释
  {
  int feet,fathoms;//使用有意义的变量名
                   //使用空行
  fathoms=2;
  feet=6*fathoms;  //每行一条语句
  printf("There are %d feet in %d fathoms!\n",feet,fathoms);
  return 0;
  }
#+END_SRC

图 2.5 提高程序的可读性

** 2.5 进一步使用 C
本章的第 1 年程序相当简单，下面的程序清单 2.2 也不太难。

程序清单 2.2 fathm_ft.c 程序

#+BEGIN_SRC C
//fathm_ft.c --把2音寻转换成英寸

#include<stdio.h>
int main(void)
{
int feet,fathoms;
fathoms=2;
feet=6*fathoms;
printf("There are %d feet in %d fathoms!\n",feet,fathoms);
printf("Yes, I said%d feet!\n",6*fathoms);
return 0;
}
#+END_SRC

与程序清单 2.1 相比，以上代码有什么新内容？这段代码提供了程序描述，声明了多个变量，
进行了乘法运算，并打印了两个变量的值。下面更详细地分析这些内容。

*** 2.5.1 程序说明

程序在开始处有一条注释（使用新的注释风格），给出了文件名和程序的目的。写这种程序
说明很简单、不费时，而且在以后浏览或打印程序时很有帮助。

*** 2.5.2 多条声明

接下来，程序在一条声明中声明了两个变量，而不是一个变量。为此，要在声明中用逗号隔
开两个变量（feet 和 fathoms）。也就是说，

int feet,fathoms;

和

int feet;

int fathoms;

等价。

*** 2.5.3 乘法

然后，程序进行了乘法运算。利用计算机强大的计算能力来计算 6 乘以 2。C 语言和许多其他
语言一样，用*表示乘法。因此，语句

feet=6*fathoms;

的意思是“查找变量 fathoms 的值，用 6 乘以该值，并把计算结果赋给变量 feet”。

*** 2.5.4 打印多个值

最后，程序以新的方式使用 printf()函数。如果编译并运行该程序，输出应该是这样：

There are 12 feet in 2 fathoms!

Yes, I said 12 feet!

程序的第 1 个 printf()中进行了两次替换。双引号后面的第 1 个变量（feet）替换了双引号中
的第 1 个%d；双绰号后面的第 2 个变量（fathoms）替换了双引号中的第 2 个%d。注意，待输出
的变量列于双引号的后面。还要注意，变量之间要用逗号隔开。

第 2 个 printf()函数说明待打印的值不一定是变量，只要可求值得出合适类型值的项即可，
如 6*fathoms。

该程序涉及的范围有限，但它是把章寻转换成英寸程序的核心部分。还需要把其他值通过交
互的方式赋给 feet，其方法将在后面章节中介绍。

** 2.6 多个函数 

目前为止，介绍的几个程序只使用了 printf()函数。程序清单 2.3 演示了除 main()以外，如
何把自己的函数加入程序中。

程序清单 2.3 two_func.c 程序
#+BEGIN_SRC C
//two_func.c --一个文件中包含两个函数
#include<stdio.h>
void butler(void);//ANSI/ISO C函数原型
int main(void)
{
printf("I will summon the butler function.\n");
butler();
printf("Yes. Bring me some tea and writeable DVDs.\n");
return 0;
}
void butler(void)//函数定义开始
{
printf("You rang, sir?\n");
}
#+END_SRC

该程序输出如下：

I will summon the butler function.

You rang, sir?

Yes. Bring me some tea and writeable DVDs.

butler()函数在程序中出现了 3 次。第 1 次是函数原型（prototype），告知编译器在程序中
要使用该函数；第二次以函数调用（function call）的形式出现在 main()中；最后一次出
现在函数定义（function definition）中，函数定义既是函数本身的源代码。下面逐一分
析。

C90 标准新增了函数原型，旧式的编译器可能无法识别（稍后将介绍），如果使用这种编译
器应该怎么做）。函数原型是一种声明形式，告知编译器正在使用某函数，因此函数原型也
被称为函数声明（function declaration）。函数原型还指明了函数的属性。例如，
butler()函数原型中的第 1 个 void 表明，butler()函数没有返回值（通常，被调函数会向主
调函数返回一个值），但是 butler()函数没有）。第 2 个 void(butler(void)中的 void)的意
思是 butler()函数不带参数。因此，当编译器运行至此，会检查 butler()是否使用得当。注
意，void 在这里的意思是“空的”，而不是“无效”。

早期的 C 语言支持一种更简单的函数声明，只需指定返回类型，不用描述参数：

void butler();

早期的 C 代码中的函数声明就类似上面这样，还是现在的函数原型。

C90、C99 和 C11 标准都承认旧版本的形式，但是也表明了会逐渐淘汰这种过时的写法。如果
使用以前写的 C 代码，就需要把旧式声明转换成函数原型。后面章节会继续介绍函数原型的
相关内容。

接下来继续分析程序。在 main()中调用 butler()很简单，写出函数名和圆括号即可。当
butler()执行完毕后，程序会继续执行 main()中的下一条语句。

程序的最后部分是 butler()函数的定义，其形式和 main()相同，都包含函数头和用花括号括
起来的函数体。函数头重述了函数原型的信息：butler()不带任何参数，且没有返回值。如
果使用老式的编译器，请去掉圆括号中的 void。

注意，何时执行 butler()函数取决于它在 main()中被调用的位置，而不是 butler()定义在文
件中的位置。例如，把 butler()函数的定义放在 main()定义之前，不会改变程序的执行顺序，
butler()函数仍然在两次 printf()调用之间被调用。记住，无论 main()在程序文件处于什么
位置，所有的 C 程序都从 main()开始执行。但是，C的惯例是把 main()放在开头，因为它提供
了程序的基本框架。

C 标准建议，要为程序中用到的所有函数提供函数原型。标准 include 文件（包含文件）为标
准库函数提供可函数原型。例如，在 C 标准中，stdio.h 文件包含了 printf()的函数原型。第
6 章最后一个示例演示了如何使用带返回值的函数，第 9 章交详细全面地介绍函数。

** 2.7 调试程序

现在，可以编写一个简单的 C 程序，但是可能会犯一些简单的错误。程序的错误通常叫做 bug，
找出并修正错误的过程叫做调试（debug）。程序清单 2.4 是一个有错误的程序，看看你能找
出几处。
程序清单 2.4 nogood.c 程序
#+BEGIN_SRC C
//nogood.c --有错误的程序
#include<stdio.h>
int main(void)
(
int n,int n2, int n3;//该程序有多处错误
n=5;
n2=n*n;
n3=n2*n2;
printf("n=%d,n squared=%d, n cubed=%d\n",n,n2,n3)
return 0;
)
#+END_SRC

*** 2.7.1 语法错误

程序清单 2.4 中有多处语法错误。如果不遵循 C 语言的规则就会犯语法错误。这类似于英文中
的语法错误。例如，看看这个句子：Bugs frustrate be can. 该句子中的英文单词都是有
效的单词（即，拼写正确），但是并未按照正确的顺序组织句子，而且用词也不妥。C语言
的语法错误指的是，把有效的 C 符号放在错误的地方。

nogood.c 程序中有哪些错误？其一，main()函数体使用圆括号来代替花括号。这就是把 C 符
号用错了地方。其二，变量声明应该这样写：

int n,n2,n3;

或者，这样写：

int n;

int n2;

int n3;

其三，main()中的注释末尾漏掉了*/(另一种修改方案是，用//替换，吾即用此)。最后，
printf()语句末尾漏掉了分号。

如何发现程序的语法错误？首先，在编译之前，浏览源代码看是否能发现一些明显的错误。
接下来，查看编译器是否发现错误，检查程序的语法错误是它的工作之一。在编译程序时，
编译器发现错误会报告错误信息，指出每一处错误的性质和具体位置。

尽管如此，编译器也有出错的时候。也许某处隐藏的语法错误会导致编译器误判。例如，由
于 nogood.c 程序未正确声明 n2 和 n3，会导致编译器在使用这些变量时发现更多问题。实际上，
有时有用把编译器报告的所有错误逐一修正，仅修正第 1 条或前几处错误后，错误信息就会
少很多。继续这样做，直到编译器不再报错。编译器另一个常见的毛病是，报错的位置比真
正的错误位置滞后一行。例如，编译器在编译下一行时才会发现上一行缺少分号。因此，如
果编译器报错某行缺少分号，请检查上一行。

*** 2.7.2 语义错误

语义错误是指意思上的错误。例如，考虑这个句子：Scornful derivatives sing
greenly(轻蔑的衍生物不熟练地唱歌)。句子中的形容词、名词、动词和副词都在正确的位
置上，所以语法正确。但是却让人不知所云。在 C 语言中，如果遵循了 C 规则，但是结果不正
确，那就是犯了语义错误。程序示例中有这样的错误：

n3=n2*n2;

此处，n3 原意表示 n 的 3 次方，但是代码中的 n3 被设置成 n 的 4 次方（n2=n*n）。

编译器无法检测语义错误，因为这类错误并未违反 C 语言的规则。编译器无法了解你的真正
意图，所以你只能自己找出这些错误。例如，假设你修正了程序的语法错误，程序应该如程
序清单 2.5 所示：

程序清单 2.5stillbad.c 程序

#+BEGIN_SRC C 
//stillbad.c --修复了语法错误的程序
#include<stdio.h>
int main(void)
{
int n,n2,n3;
//该训育有一个语义错误
n=5;
n2=n*n;
n3=n2*n2;
printf("n=%d,n squared=%d, n cubed=%d\n",n,n2,n3);
return 0;
}
#+END_SRC

该程序的输出如下：

n=5,n squared=25,n cubed=625

如果对简单的立方比较熟悉，就会注意到 625 不对。下一步是跟踪程序的执行步骤，找出程
序如何得出这个答案。对于本例，通过查看代码就会发现其中的错误，但是，还应该学习更
系统的方法。方法之一是，把自己想象成计算机，跟着程序的步骤一步一步地执行。下面，
来试试这种方法。

main()函数体一开始就声明了 3 个变量：n,n2,n3.你可以画出 3 个盒子并把变量名写在盒子上
来模拟这种情况（见图 2.6）。接下来，程序把 5 赋给变量 n。何以在标签为 n 的盒子里写上
5.接着，程序把 n 和 n 相乘，并把乘积赋给 n2。因此，查看标签为 n 的盒子，其值 是 5，5 乘以
5 得 25，于是把 25 放进标签为 n2 的盒子里。为了模拟下一条语句（n3=n2*n2）.查看 n22 盒子，
发现其值是 25。25 乘以 25 得 625，把 625 放进标签为 n3 的盒子。原来如此！程序中计算的是 n2
的平方，不是 n2 乘以 n 得到 n 的 3 次方。

对于上面程序示例，检查程序的过程可能过于繁琐。但是，用这种方法一步一步查看程序的
执行情况，通常是发现程序问题所在的良方。

***2.7.3 程序状态

通过逐步跟踪程序的执行步骤，并记录每个变量，便可监视程序的状态。程序状态
（program state）是在程序的执行过程中，某给定点上所有变量值的集合。它是计算机头
前状态的一个快照。

刚刚讨论了一种跟踪程序状态的方法：自己模拟计算机逐步执行程序。但是，如果程序中有
10000 次循环，这种方法恐怕行不通。不过，可以跟踪一小部分循环，看看程序是否按照预
期的方式执行。另外，还要考虑一种情况：很可能按照自己所想去执行程序，而不是根据实
际写出来的代码去执行。因此，要尽量忠实代码来模拟。

定位主义错误的另一种方法是：在程序中 的关键点插入窗外的 printf()语句，以监视制定
变量值的变化。通过查看值的变化可以了解程序的执行情况。对程序的执行满意后，便可删
除额外的 printf()语句，然后重新编译。

检测程序状态的第 3 种方法是使用调试器。调试器（debugger）是一种程序，让你一步一步
运行另一个程序，并检查该唾弃变量的值。调试器有不同的使用难度和复杂度。较高级的调
试器会显示正在执行的源代码行号。这在检查有多条执行路径的程序时很方便，因为很容易
知道正在执行哪条路径。如果你的编译器自带调试器，现在可以花点时间学会怎么使用它。
例如，试着调试一下程序清单 2.4.

** 2.8 关键字和保留标识符 

关键字是 C 语言的词汇。它们以 C 而言比较特殊，不能用它们作为标识符（如，变量名）。许
多关键字用于指定不同的类型，如 int。还有一些关键字（如，if ）用于控制程序中语句
的执行顺序。在表 2.2 中所列的 C 语言关键字中，粗体表示是 C90 标准新增的关键字，
斜体表示 C99 标准新增的关键字，粗斜体表示的是 C11 标准新增的关键字。
表 2.2 ISO C 关键字
|----------+----------+------------+--------------------|
| auto     | extern   | short      | while              |
|----------+----------+------------+--------------------|
| break    | float    | *signed*   | /*_Alignas*/       |
|----------+----------+------------+--------------------|
| case     | fort     | sizeof     | /*_Alignof*/       |
|----------+----------+------------+--------------------|
| char     | goto     | static     | /*_Atomic*/        |
|----------+----------+------------+--------------------|
| *const*  | if       | struct     | /*_Bool*/          |
|----------+----------+------------+--------------------|
| continue | /inline/ | switch     | /*_Complex*/       |
|----------+----------+------------+--------------------|
| default  | int      | typedef    | /*_Generic*/       |
|----------+----------+------------+--------------------|
| do       | long     | union      | /*_Imaginary*/     |
|----------+----------+------------+--------------------|
| double   | register | unsigned   | /*_Noreturn*/      |
|----------+----------+------------+--------------------|
| else     | restrict | void       | /*_Static_assert*/ |
|----------+----------+------------+--------------------|
| *enum*   | return   | *volatile* | /*_Thread_local*/  |
|----------+----------+------------+--------------------|

如果使用关键字不当（如，用关键字作为变量名），编译器会将其视为语法错误。还有一些
保留标识符（reserved identifier），C语言已经指定了它们的用途或保留它们的使用权，
如果你使用这些标识符来表示其他意思会导致一些问题。因此，尽管它们也是有效的名称，
不会引起语法错误，也不能随便使用。保留标识符包括那些以下划线字符开头的标识符和标
准库函数名，如 printf()。

** 2.9 关键概念

编程是一件富有挑战性的事情。程序员要具备抽象和逻辑的思维，并谨慎地处理细节问题
（编译器会强迫你注意细节问题）。平时和朋友交流时，可能用错几个单词，犯一两个语法
错误，或者说几句不完整的句子，但是对方能明白你想说什么。而编译器不允许这样，对它
而言，几乎正确仍然是错误。

编译器不会在下面擀到的概念性问题上帮助你。因此，在这一章中介绍一些关键概念帮助读
者弥补这部分的内容。

在本章中，读者的目标应该是理解什么是 C 程序。可以把程序看作是你希望计算机如何完成
任务的描述。编译器负责处理一些细节工作，例如把你要计算机完成的任务转换成底层的机
器语言（如果从量化方面来解释编译器所做的工作，它可以把 1KB 的源文件创建成 60KB 的可
执行文件；即使是一个很简单的 C 程序民要用大量的机器语言来表示）。由于编译器不具有
真正的智能，所以你必须用编译器能理解的术语表达你的意图，这些术语就是 C 语言标准规
定的形式规则（尽管有些约束，但总比直接用机器语言方便得多）。

编译器希望接收到特定格式的指令，在本章已经介绍过。作为程序员的任务是，在符合 C 标
准的编译器框架中，表达你希望程序应该如何完成任务的想法。

** 2.10 本章小结

C 程序由一个或多个 C 函数组成。每个 C 程序必须包含一个 main()函数，这是 C 程序要调用的第
1 个函数。简单的函数由函数头和后面的一对花括号组成，花括号中是由声明、语句组成的
函数体。

在 C 语言中，大部分语句都以分号结尾。声明为变量创建变量名和标识该变量中储存的数据
类型。变量名是一种标识符。赋值表达式语句把赋值给变量，或者更一般地说，把值赋给存
储空间。函数表达式语句用于调用指定的已命名函数。调用函数执行完毕后，程序会返回到
函数调用后面的语句继续执行。

printf()函数用于输出想要表达的内容和变量的值。

一门语言的语法是一套规则，用于管理语言中各有效语句组合在一直的方式。语句的主义是
语句要表达的意思。编译器可以检测出语法错误，但是程序里的主义错误只有在编译完之后
才能从程序的行为中表现出来。检查程序是否有主义错误要跟踪程序的状态，即程序每执行
一步后所有变量的值。

最后，关键字是 C 语言的词汇。

** 2.11 复习题

复习题的参考答案在附录 A 中。

*** 1.C 语言的基本模块是什么？（函数）

***  2.什么是语法错误？写出一个英语例子和 C 语言例子。
 不遵循 C 语言的规则，把有效的 C 语言符号放在错误的地方。
 Bugs frustrate be can.
 Bugs can be frustrate.
 int a;b;c;
 correct:
 int a,b,c;
 or 
 int a;
 int b;
 int c;

 3.什么是主义错误？

*** 写出一个英语例子和 C 语言例子。

 遵循了 C 语言的规则，但结果不正确，即为语义错误。
 如：A tiger is a strong man.
 求立方：
 //语义错误作业
 #+BEGIN_SRC C
 #incluse<stdio.h>
 int main(int argc,const char*argv[])
 {
 int n,n2,n3;
 n=5;
 n2=n*n;
 n3=n2*n2;
 printf("n 为%d,n的平方是：%d,n的立方是：%d\n",n,n2,n3);
 }
 #+END_SRC

 
*** 4.Indiana Sloth 编写了下面的程序，并征求你的意见。请帮助他评定。
 #+BEGIN_SRC C
 include studio.h
 //correct:
 #include<stdio.h>
 int main{void}/*该程序打印一年有多少周/*
 int main(void)//
 (
 {//correct
 int s
 int s;//correct
 s:=56;
 s=56;//correct
 print(There are s weeks in a year.);
 printf("There are %d weeks in a year.\n",s);//correct
 return 0;

 )
 }//correct

 #+END_SRC
 10 多处错误

*** 5.假设下面 4 例子都是完整程序中的一部分，它们都输出什么结果？
- a. printf("Baa Baa Black Sheep.");
printf("Have you any wool?\n");

Baa Baa Black Sheep.Have you any wool?

b.printf("Begone!\nO creature of lard!\n");
Begone!
O creature of lard!

C.printf("What?\nNo/nfish?\n");
What?
No/nfish?

d. int num;
num=2;
printf("%d+%d=%d",num,num,num+num);
2+2=4

*** 6.在 main、int、function、char、=中，哪些是 C 语言的关键字？
int,char

*** 7.如何以下面的格式输出变量 words 和 lines 的值（这里，3020 和 350 代表两个变量的值）？
There were 3020 words and 350 lines.

printf("There are %d words and %d\n",words,lines);

*** 考虑下面的程序：
#+BEGIN_SRC C
#include<stdio.h>
int main(void)
{
int a,b;
a=5;
b=2;//第7行
b=a;//第8行
a=b;//第9行
printf("%d %d\n",b,a);
return 0;
}
#+END_SRC

请问，在执行完第 7、第 8、第 9 行后，程序的状态分别是什么？

执行第 7 行
a=5
b=2

执行第 8 行：
a=5
b=5

执行第 9 行
b=5
a=5

a 与 b 相等皆为 5.

*** 9.考虑下面的程序：
#+BEGIN_SRC C
#include<stdio.h>
int main(void)
{
int x,y;
x=10;
y=5;//第7行
y=x+y;//第8 行
x=x*y;//第9 行
printf("%d %d\n",x,y);
return 0;
}
#+END_SRC

请问，在执行完第 7、8、9 行后，程序的状态分别是什么？

第 7 行
x=10
y=5

第 8 行
x=10
y=15

第 9 行
y=15
x=150

** 2.12 编程练习

纸上得来终觉浅，绝知此事要躬行。读者应该试着编写一两个简单程序，体会一下编写程序
是否和阅读本章介绍的这样轻松。题目中会给出一些建议，但是应该尽量自己思考这些问题。
一些编程答案练习的答案可在出版商网站获取。

*** 1.
编写一个程序，调用一次 printf()函数，把你的姓名打印在一行。再调用一次 printf()函数，
把你的姓名打印在一行。输出应如下所示（当然要把示例的内容换成你的姓名）
#+BEGIN_SRC C
#include<stdio.h>
int main(int argc,const char*argv[])
{
printf("Xia le zhai\n");
printf("Xia\n");
printf("le zhai\n");
printf("Xia le zhai\n");
return 0;
}
#+END_SRC

*** 2
编写一个程序，打印你的姓名和地址。
#+BEGIN_SRC C
#include<stdio.h>
int main(int argc,const char*argv[])
{
printf("My name is: Xia le zhai\n");
printf("My address :Taian Road 281#\n");
return 0;
}
#+END_SRC

*** 3
编写一个程序把你的年龄转换成天数，并显示这两个值。这里不用考虑闰年的问题。
#+BEGIN_SRC C
#include<stdio.h>
int main(int argc,const char*argv[])
{
int age,days;
age=55;
days=age*365;
printf("Your age is %d,and you have spend %d days!\n",age,days);
return 0;
}

#+END_SRC

*** 4
编写一个程序，生成以下输出：
For he's a jolly good fellow!

For he's a jolly good fellow!

For he's a jolly good fellow!

Which nobody can deny!

除了 main()函数以外，该程序还要调用两个自定义函数：一个名为 jolly(),用于打印前 3 条
消息，调用一次打印一条；另一个函数名为 deny(),打印最后一条消息。

#+BEGIN_SRC C
#include<stdio.h>
void jolly(void);//声明自定义函数
void deny(void);
int main(int argc,const char*argv[])
{
jolly();
jolly();
jolly();
deny();
return 0;
}
void jolly(void)//函数定义开始
{
printf("For he's a jolly good fellow!\n");
}

void deny(void)
{
printf("Which nobody can deny!\n");
}
#+END_SRC

*** 5 
编写一个程序，生成以下输出：

Brazil, Russia, India, China

India, China,

Brazil, Russia

除了 main()以外，该程序还要调用两个自定义函数：一个名为 br(),调用一次打印一次
“Brazil, Russia”；另一个名为 ic()，调用一次打印一次“India, China”。其他内容在
main()函数中完成。
#+BEGIN_SRC C
#include<stdio.h>
void br(void);//声明函数
void ic(void);
int main(int argc,const char*argv[])
{
br();
printf(",");
ic;
printf("\n");
ic();
printf(",\n");
br();
printf("\n");
return 0;
}
void br(void)
{
printf("Brazil, Russia");
}

void ic(void)
{
printf("India, China");
}
#+END_SRC

*** 6

编写一个程序，创建一个整形变量 toes，并将 toes 设置为 10。程序中还要计算 toes 的两倍和
toes 的平方。该程序应打印 3 个值，并分别描述以示区分。
#+BEGIN_SRC C
#include<stdio.h>
int main(int argc,const char*argv[])
{
int toes;
toes=10;
printf("Toes is %d, it's double number is:%d, it's squared is %d.\n",toes,2*toes,toes*toes);
return 0;
}
#+END_SRC

*** 7 
许多研究表明，微笑益处多多。编写一个程序，生成以下格式的输出：

Smile!Smile!Smile!
Smile!Smile!
Smile！

该程序要定义一个函数，该函数被调用一次打印一次“Smile!”，根据程序的需要使用该函数。

#+BEGIN_SRC C
#include<stdio.h>
void smile(void);
int main(int argc,const char*argv[])
{
smile();
smile();
smile();
printf("\n");
smile();
smile();
printf("\n");
smile();
printf("\n");
return 0;
}
void smile(void)
{
printf("Smile!");
}
#+END_SRC

*** 8 

在 C 语言中，函数可以调用另一个函数。编写一个程序，调用一个名为 one_three()的函数。
该函数在一行打印单词“one”，再调用第 2 个函数 two()，然后在另一行打印单词“three”。
two()函数在一行显示单词“two”。main()函数在调用 one_three()函数前要打印短语
“starting now:”，并在调用完毕后显示短语“done!”。因此，该程序的输出应如下所示：

starting now:

one

two

three

done!

#+BEGIN_SRC C
#include<stdio.h>
void one_three(void);//声明函数
void two(void);
int main(int argc,const char*argv[])
{
printf("starting now:\n");
one_three();
printf("done!\n");
return 0;
}
void two(void)
{
printf("two\n");
}
void one_three(void)
{
printf("one\n");
two();
printf("three\n");
}
#+END_SRC

* 第 3 章 数据和 C

本章介绍以下内容：

关键字：int short long unsigned char float double _Bool _Complex _Imaginary

运算符：sizeof()

函数：scanf()

整数类型的浮点型常数，如何声明这些类型的变量

如何使用 printf()和 scanf()函数读写不同类型的值。

程序离不开数据。把数字、字母和文字输入计算机，利用这些数据完成某些任务。如，需要
计算一份利息或显示一份葡萄洒商的排序列表。本章除了介绍如何读取数据外，还将教会读
者如何操控数据。

C 语言提供两大系列的多种数据类型。本章详细介绍两大数据类型：整数类型和浮点类型，
讲解这些数据是什么、如何声明它们、如何以及何时使用它们。除此之外，还将介绍常量和
变量的区别。读者很快就能看到第 1 个交互式程序。

** 3.1 示例程序

本章仍从一个简单的程序开始。如果发现有不熟悉的内容，别担心，稍后会详细解释。该程
序的意图比较明了，请着编译并运行程序清单 3.1 中的源代码。为了节省时间，在输入源代
码时省略注释。

程序清单 3.1platinum.c 程序

#+BEGIN_SRC C
  // platinum.c -- your weight in platinum 
  #include<stdio.h>
int main(int argc,const char*argv[])
{
float weight;//你的体重
float value;//相等重量的白金价值
printf("Are you worth your weight in platinum?\n");
printf("Let's check it out.\n");
printf("Please enter your weight in pounds: ");
//获取用户的输入
scanf("%f",&weight);
//假设白金的价格是每盎司转换为金衡盎司
value=1700.0*weight*14.5833;
printf("Your weight in platinum is worth $%.2f.\n",value);
printf("You are easily worth that! If platinum prices drop,\n");
printf("eat more to maintain your value.\n");
return 0;
}
#+END_SRC

提示错误与警告

如果输入程序时打错（如漏了一个分号），编译器会报告语法错误消息。然而，即使输入正
确无误，编译器也可能给出一些警告，如“警告：从 double 类型转换成 float 类型可能会丢失
数据”。错误消息表明程序中有错，不能进行编译。而警告则表明，尽管编写的代码有效，
但可能还是程序员想要的。警告并不终止编译。特殊的警告与 C 如何处理 1700.0 这样的值有
关。本例不必理会这个问题，本章稍后会进一步说明。

输入该程序时，可以把 1700.0 改成贵金属白金当前的市价，但是还要改动 14.5833，该数是 1
英镑的金衡盎司数（金衡盎司用于衡量贵金属，而英镑常衡盎司用于衡量人的体重）。

注意，“enter your weight”的意思是输入你的体重，然后按下 Enter 或 Return 键（还要键入
体重后就一直等着）。按下 Enter 键是告知计算机，你已完成输入数据。该唾弃需要你输入
一个数字（如 155），而不是单词（如，too mush）。如果输入字母而不是数字，会导致程
序出问题。这个问题要用 if 语句来解决（详见第 7 章），因此请先输入数字。下面是程序的
输出示例：

Are you worth your weight in platinum?

Let's check it out.

Please enter your weight in pounds: 156

Your weight in platinum is worth $3867491.25.

You are easily worth that! If platinum preces drop,

eat more to maintain your value.

程序调整

即使用第 2 章介绍的方法，在程序中添加下面一行代码：

getchar（）；

程序的输出是否依旧在屏幕上一闪而过？本例需要调用两次 getchar（）函数：

getchar（）；
getchar（）；

getchar（）函数读取下一个输入字符，因此程序会等待用户输入。在这种情况下，键入 156
并按下 Enter（或 Return 键）（发送一个换行符），然后 scanf（）读取键入的数字，第 1 个
getchar（）读取换行符，第 2 个 getchar（）让程序暂停，等待输入。

*** 3.1.1 程序中的新元素

程序清单 3.1 中包含 C 语言的一些新元素。

注意，代码中使用了一种新的变量声明。前面的例子只使用了整数类型的变量（int），但
是本使用了浮点数类型（float）的变量，以便处理更大范围的数据。float 类型可以储存带
小数的数字。

程序中演示了常量的几种新写法。现在可以使用带小数点的数了。

为了打印新类型的变量，在 printf（）中使用%f 来处理浮点值。%.2f.中的.2 用于精确控制
输出，指定输出的浮点数只显示小数点后面两位。

scanf（）函数用于读取键盘的输入。%f 说明 scanf（）要读取用户从键盘输入的浮点数，
&weight 告诉 scanf（）把输入的值给名为 weight 的变量。scanf（）函数使用&符号表明找到
weight 变量的地点。下一章将详细讨论&。就目前而言，请按照这样写。

也许本程序最突出的新特点是它的交互性。计算机向用户询问信息，然后用户输入数字。与
交互式程序相比，交互式程序用起来更有趣。更重要的是，交互式使得程序更加灵活。例如，
示例程序可以使用任何合理的体重，而不只是 156 磅。不必重写程序，就可以根据不同体重
进行计算。scanf（）和 printf（）函数用于实现这种交互。scanf（）函数读取用户从键盘
输入的数据，并把两个函数结合起来，就可以建立人机双向的通信（见图 3.1）
这让使用计算机更加有趣味。

本章着重解释上述新特性中的前两项：各种数据类型的变量和常量。第 4 章将介绍后 3 项。

** 3.2 变量与常量数据 

在程序的指导下，计算机可以做许多事情，如数值计算、名字排序、执行语言或视频命令、
计算彗星轨道、准备邮件列表、拨电话号码、画画、做决策或其他你能所能想到的事情。要
完成这些任务，程序需要使用数据，即承载信息的数字和字符。有些数据类型在程序使用之
前已经预告设定好了，在整个程序的运行过程中没有变化，这些称为常量（constan）。其
他数据类型在程序运行期间可能会改变或被赋值，这些称为变量（variable）。在示例程序
中，weight 是一个变量，14.5833 是一个常量。那么，1700.0 是常量还是变量？在现实生活
中，白金的价格不会是常量，但是在程序中，像 1700.0 这样的价格被视为常量。

*** 常量(constan) 
数据类型在程序使用之前预先设定好了，在整个程序运行过程中没有变化，这些被称为常量
（consstan）。

*** 变量（variable）
数据类型在程序运行期间会改变或被赋值，其值是变化的，称为变量（variable）。
** 3.3 数据：数据类型关键字

不仅变量和常量不同，不同的数据类型之间也有差异。一些数据类型表示数字，一些数据类
型表示字母（更普遍地说是字符）。C通过识别一些基本的数据类型来区分和使用这些不同
的数据类型。如果数据是常量，编译器一般通过用户书写的形式来识别类型（如，42 是整
数，42.100 是浮点数）。但是，对变量而言，要在声明时指定其类型。稍后会详细介绍如何
声明变量。现在，先来了解一下 C 语言的基本类型关键字。K&C 给出了 7 个与类型相关的关键
字。C90 标准添加了 2 个关键字，C99 标准又添加了 3 个关键字（见表 3.1）。

表 3.1 C 语言的数据类型关键字


|---------------------+---------------------+---------------------|
| 最初 K&R 给出的关键字 | C90 标准添加的关键字 | C99 标准添加的关键字 |
|---------------------+---------------------+---------------------|
| int                 | singed              | _Bool               |
|---------------------+---------------------+---------------------|
| long                | void                | _Complex            |
|---------------------+---------------------+---------------------|
| shot                |                     |                     |
|---------------------+---------------------+---------------------|
| unsigned            |                     |                     |
|---------------------+---------------------+---------------------|
| char                |                     |                     |
|---------------------+---------------------+---------------------|
| float               |                     |                     |
|---------------------+---------------------+---------------------|
| double              |                     |                     |
|---------------------+---------------------+---------------------|

在 C 语言中，用 int 关键字来表示基本的整数类型。后 3 个关键字（long、short 和 unsigned）
和 C90 新增的 singed 用于提供基本整数类型的变式，例如 unsigned short int 和 long long
int。char 关键字用于指定字母和其他字符（如，#、$、%和*）。另外，char 类型也可以表
示较小的整数。float、double 和 long double 表示带小数点的数。_Bool 类型表示布尔值
（true 或 false），_Complex 和_Imaginary 分别表示得数和虚数。

通过这些关键字创建的类型，按计算机的储存方式可分为两大基本类型；整数类型和浮点数
类型。
*** 位、字节和字
****  位、字节和字是描述计算机数据单元或存储单元的术语。这里主要指存储单元。

  最小的存储单元是位（bit），可以储存 0 或 1（或者说，位用于设置“开”或“关”）。虽然 1 位
  储存的信息有限，但是计算机中位的数量十分庞大。位是计算机内存的基本构建块。
****   字节（byte）是常用的计算机存储单位。
对于几乎所有的机器，1字节均为 8 位。这是字节的
  标准定义，至少在衡量存储单位时是这样（但是，C语言对此有不同的定义，请参阅本章
  3.4.3 节）。既然 1 位可以表示 0 或 1，那么 8 位字节就有 256（2 的 8 次方）种可能的 0、1 的组合。
  通过二进制编码（仅用 0 和 1 便可表示数字），便可表示 0-255 的整数或一组字符（第 15 章将
  详细讨论二进制编码，如果感兴趣可以现在浏览一下该章的内容）。
****   字（word）是设计计算机时给定的自然存储单位。
对于 8 位的微型计算机（如，最初的苹果
  机），1个字长只有 8 位，从那以后，个人计算机字长增至 16 位、32 位，直到目前的 64 位。计
  算机的字长越大，其数据转移越快，允许的内存访问也更多。

*** 3.3.1 整数和浮点数

整数类型？ 浮点数类型？如果觉得这些术语非常陌生，别担心，下面先简述它们的含义。
如果不熟悉位、字节和字的概念，请阅读上面方框中的内容。刚开始学习时，不必了解所有
的细节，就像学习开车之前不必详细了解汽车内部引擎的原理一样。但是，了解一些计算机
或汽车引擎内部的原理会对你有所帮助。

对我们而言，整数和浮点数的区别是它们的书写方式不同。对计算机而言，它们的区别是储
存方式不同。下面详细介绍整数和浮点数。

*** 3.3.2 整数

和数学的概念一样，在 C 语言中，整数是没有小数部分的数。例如，2、-23 和 2456 都是整数。
而 3.14、0.22 和 2.000 都不是整数。计算机以二进制数字储存整数，例如，整数 7 以二进制写
成 111.因此，要在 8 位字节中储存该数字，需要把前 5 位都置成 0，后 3 位设置成 1（如图 3.2 所
示）。


|---+---+---+---+---+---+---+---|
| 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 |    字长 8 位
|---+---+---+---+---+---+---+---|
 
                     2^2 2^1 2^0 
                     
                     4 + 2 + 1 = 7   整数 7
图 3.2 使用二进制编码储存整数 7

*** 3.3.3 浮点数

浮点数与数学中的实数的概念差不多。2.75、3.16E7、7.00 和 2e-8 都是浮点数。注意，在一
个值的后面加上一个小数点，该值就成为一个浮点值。所以，7是整数，7.00 是浮点数。显
然，书写浮点数有多种形式。稍后将详细介绍 e 记数法，这里先做简要介绍：3.16E7 表示
3.16×10^7(3.16 乘以 10 的 7 次方)。其中，10^7=10000000，7 被称为 10 的指数。

这里关键要理解浮点数和整数的储存方案不同。计算机把浮点数分成小数部分和指数部分来
表示，而且分开储存这两部分。因此，虽然 7.00 和 7 在数值上相同，但是它们的存在方式不
同。在十进制下，可以把 7.0 写成 0.7E1。这里，0.7 是小数部分，1是指数部分。图 3.3 演示
了一个储存浮点数的例子。当然，计算机在内部使用二进制和 2 的幂进行储存，而不是 10 的
幂。第 15 章将详述相关内容。现在，我们着重讲解这两种类型的实际区别。

整数没有小数部分，浮点数有小数部分。

浮点数可以表示工范围比整数大。参见本章末的表 3.3。

对于一些自述运算（如两个很大的数相减），浮点数损失的精度更多。

|---+---------+---|
| + | .314159 | 1 |
|---+---------+---|

符号   小数     指数

+     .314159 ×10^1   3.14159

图 3.3 以浮点格式（十进制）储存\pi 的值

因为在任何区间内（如，1.0 到 2.0 之间）都存在无穷多个实数，所以计算机的浮点数不能表
示区间内所有的值。浮点数通常只是实际值的近似值。例如，7.0 可能被储存为浮点值
6.9999。稍后会讨论更多精度方面的内容。

过去，浮点运算比整数运算慢。不过，现在许多 CPU 都包含浮点处理器，缩小了速度上的差
距。

#+BEGIN_SRC latex

  \begin{table}[htp] %浮动表格环境
  \centering %表格居中放置 
  \caption{这里是表头}
  \label{tab1} %用于引用
  \begin{tabular}{|c|c|c|}%表格环境
  \hline
  +&.314159&1\\\hline
  \end{tabular}
  \end{table}

  \begin{table}[htp] %浮动表格环境
  \centering %表格居中放置 
  \caption{图3.3以浮点格式（十进制）储存\pi的值}
  \label{tab1} %用于引用
  \begin{tabular}{c|c|c|c|c}%表格环境
  \toprule[1.4pt] %1.4pt 的上划线
  &x1&x2&x3&x4\\\hline %\hline表示画一条横线
  A&3&4&2&1\\\hline
  B&2&5&4&3\\\hline
  C&5&4&3&1\\\hline
  D&3&3&2&4\\
  \bottomrule[1.4pt]%1.4pt 的下划线
  \end{tabular}
  \end{table}

  ,#+ BEGIN RECEIVE ORGTBL xia
  ,#+ END RECEIVE ORGTBL xia

  ,#+ORGTBL: SEND xia orgtbl-to-orgtbl :splice nil :skip 0
  
  name age saray
  xia   55 8000
  li    40 7000

#+END_SRC

** 3.4C 语言基本数据类型 

本节将详细介绍 C 语言的基本数据类型，包括如何声明变量、如何表示字面值常量（如，5或
2.78），以及典型的用法。一些老式的 C 语言编译器无法支持这里提到的所有类型，请查阅
你使用的编译器文档，了解可以使用哪些类型。

*** 3.4.1 int 类型

C 语言提供了许多整数类型，为什么一种类型不够用？因为 C 语言让程序员针对不同情况选择
不同的类型。特别是，C语言中的整数类型可表示不同的取值范围和正负值。一般情况使用
int 类型即可，但是为满足特定任务和机器的要求，还可以选择其他类型。

int 类型是有符号整型，即 int 类型的值必须是整数，可以是正整数、负整数或零。其取值范
围依计算机系统而异。一般而言，储存一个 int 要占一个机器字长。因此，早期的 16 位 IBM
PC 兼容机使用 16 位来储存一个 int 值，其取值范围（即 int 值 的取值范围）是-32768~32767。
目前的个人计算机一般是 32 位，因此用 32 位储存一个 int 值。现在，个人计算机产业正逐步
向着 64 位处理器发展，自然能储存更大的整数。ISO C 规定 int 的取值范围最小
为-32768~32767。一般而言，系统用一个特殊位的值表示有符号整数的正负号。第 15 章将介
绍常用的方法。

**** 1.声明 int 变量

第 2 章中已经用 int 声明过基本整形变量。先写上 int，然后写变量名，最后加上一个分号。
要声明多个变量，可以单独声明每个变量，也可以在 int 后面列出多个变量名，变量名之间
用逗号分隔。下面都是有效的声明：

int erns；

int hogs，cows，goats；

可以分别在 4 条声明中声明各变量， 也可以在一条声明中声明 4 个变量。两种方法的效果相
同，都为 4 个 int 大小的变量赋予名称并分配内存空间。

以上声明创建了变量，但是并没有给它们提供值。变量如何获得值？前面介绍过在程序中获
取值的两种途径。第 1 种途径是赋值：

cows=112；

第 2 种途径是，通过函数（如，scanf（））获得值。接下来，我们着重介绍第 3 种途径。

**** 初始化变量

初始化（initialize）变量就是为变量赋一个初始值。在 C 语言中，初始化可以直接在声明
中完成。只需在变量名后面加上赋值运算符（=）和待赋给变量的值即可。如下所示：

int hogs=21；

int cows=32，goats=14；

int dogs，cats=94；//有效，但是这种格式很糟糕

以上示例的最后一行，只初始化了 cats，并未初始化 dogs。这种写法很容易让人误认为 dogs
也被初始化为 94，所以最好还要把初始化的变量和未初始化的变量放在同一条声明中。

简而言之，声明为变量创建和标记存储空间，并为其指定初始值（如图 3.4 所示）。

int sows;   |     |  |     |

     创建内存空间

int boars=2；|      | 2 |     |
                   boars
创建内存空间并为其赋值

图 3.4 定义并初始化变量

**** 3.int 类型常量

上面示例中出现的整数（21、32、14 和 94）都是整形常量或整形字面量。C语言把不含小数
点和指数的数作为整数。因此，22 和-44 都是整形常量，但是 22.0 和 2.2E1 则不是。C语言把
大多数整形常量视为 int 类型，但是非常大的整数除外。详见后面“long”常量和 long long 常
量”小节对 long int 类型的讨论。

**** 4 打印 int 值

可以使用 printf（）函数打印 int 类型的值。第 2 章介绍过，%d 指明了在一行中打印整数的位
置。%d 称为转换说明，它指定了 printf（）应使用什么格式来显示一个值。格式化字符串中
的每个%d 都待打印变量列表中相应的 int 值匹配。这个值可以是 int 类型的变量、int 类型的
常量与待打印值的数量相同，编译器不会捕获这类型的错误。程序清单 3.2 演示了一个简单
的程序，程序中初始化了一个变量，并打印该变量的值、一个常量值和一个简单表达式的值。
另外，程序还演示了如果粗心犯错会导致什么结果。

程序清单 3.2 print1.c 程序
#+BEGIN_SRC C
//PRINT1.C 演示printf（）的一些特性
#include<stdio.h>
int main(void)
{
int ten=10;
int two=2;
printf("Doing it right: ");
printf("%d minus %d\ is %d\n",ten,2,ten-two);
printf("Doing it wrong: ");
printf("%d minus %d is %d\n",ten);//遗漏2个参数
return 0;
}
#+END_SRC

编译并运行该程序，输出如下：

Doing it right: 10 minus 2 is 8
 
Doing it wrong: 10 minus 16 is 1650287143

在第一行输出中，第 1 个%d 对应 int 类型变量 ten；第 2 个%d 对应 int 类型常量 2；第 3 个%d 对应
int 类型表达式 ten-two 的值。在第二行输出中，第 1 个%d 对应 ten 的值，但是由于没有给后面
两个%d 提供任何值，所以打印出的值是内存中的任意值（读者在运行该程序时显示的这两个
数值会与输出示例中的数值不同），因为内存中储存的数据不同，而且编译器管理内存的位
置也不同。

你可能会抱怨编译器为何不能捕获这种明显的错误，但实际上问题出在 printf（）不寻常的
设计。大部分函数都需要指定数目的参数，编译器会检查参数的数目是否正确。但是，
printf（）函数的参数数目不定，可以有 1 个、2个、3个或更多，编译器也爱莫能助。记住，
使用 printf（）函数时，要确保转换说明的数量与打印值的数量相等。

**** 5.八进制和十六进制

通常，c语言都是假定整数型常量是十六进制数。然而，许多程序员很喜欢使用八进制和十
六进制数。因为 8 和 16 都是 2 的幂，而 10 却不是。显然，八进制和十六进制记数系统在表达与
计算机 dhudr 值时很方便。例如，二进制数 65536 经常出现在 16 位机中，用十六进制表示正好
是 10000。另外，十六进制数的每一位的数恰好由 4 位二进制数表示。例如，十六进制数 3 是
0011，十六进制数 5 是 0101.因此，十六进制数 35 的位组合（bit pattern）是 00110101，十
六进制数 53 的位组合是 01010011.这种对应关系使得十六进制和二进制的转换非常方便。但
是，计算机如何知道 10000 是十进制、十六进制还是二进制？在 C 语言中，用特定的前缀表示
使用哪种进制。0x 或 oX 前缀表示十六进制值。所以十进制数 16 表示成十六进制是 ox10 或 0X10
。与此类似，o前缀表示八进制。例如，十进制数 16 表示成八进制是 o20 。第 15 章将更全面
地介绍进制相关的内容。

要清楚，使用不同的进制数是为了方便，不会影响数被储存的方式。也就是说，无论把数字
写成 16、o20 或 ox10，储存该数的方式都相同。因为计算机内部都以二进制进行编码。

**** 6 显示八进制和十六进制

在 C 语序中，既可以使用和显示不同进制的数。不同的进制要使用不同的转换说明。以十进
制显示数字，使用%d；以八进制显示数字，使用%o；以十六进制显示数字，使用%X。另外，
要显示各进制的前缀 o、ox 和 oX，必须分别使用%#o、%#x、%#X。程序清单 3.3 演示了一个小
程序。回忆一下，在某些集成开发环境（IDE）下编写的代码中插入 getchar（）；语句，程
序在执行完毕后不会立即关闭执行窗口。

程序清单 3.3 bases.c 程序
#+BEGIN_SRC C
//bases.c 以十进制、八进制、十六进制打印十进制数100
#include<stdion.h>
int main(int argc,const char*argv[])
{
int x=100;
printf("dec=%d;octal=%o;hex=%x\n",x,x,x);
printf("dec=%d;octal=%#o;hex=%#x\n",x,x,x);
return 0;
}
#+END_SRC

编译并运行该程序，输出如下：
dec=100;octal=144;hex=64
dec=100;octal=0144;hex=ox64

该程序以 3 种不同记数系统显示同一个值。printf（）函数做了相应的转换。注意，如果要
在八进制和十六进制前显示 o 和 ox 前缀，要分别在转换说明中加入#。

*** 3.4.2 其他整数类型 

初学 C 语言时，int 类型应该能满足大多数程序的整数类型需求。尽管如此，还应了解一下整
形的其他形式。当然，也可以略过本李跳至 3.4.3 节阅读 char 类型的相关内容，以后有需要
时再阅读本节。

C 语言提供了 3 个附属关键字修饰基本整数类型：short、long 和 unsinged。应记住以下几点。

shot int 类型（或者简写为 short）占用的存储空间可能比 int 类型少，常用于较小数值的场
合以节省空间。与 int 类似，short 是有符号类型。

long int 或 long 占用的存储空间可能比 int 多，适用于较大数值的场合。与 int 类似，long 是
有符号类型。

long int 或 long 战胜的存储空间可能比 int 多，适用于较大数值场合。与 int 类似，long 是有
符号类型。

long long int 或 long long（C99 标准加入）战胜的储存突审可能比 long 多，适用于更大数
值的场合。该类型至少占 65 位。与 int 类似，long long 是有符号类型。

unsigned int 或 unsigned 只用于非负值的场合。这种类型与有符号类型表示的范围不同。例
如，16 位 unsigned int 允许的取值范围是 0~65535，而不是-32768～32767 。用于表示正负
号的位现在用于表示另一个二进制位，所以无符号整形可以表示更大的数。

在 c90 标准中，添加了 unsingedlong int 或 unsignedlong 和 unsigned int 或 unsigned short
类型。C99 标准双添加了 unsigned long long int 或 unsigned long long。

在任何有符号类型前央添加关键字 signed，可强调使用有符号类型的意图。例如，short、
short int、signed short、signed short int 都表示同一种类型。

**** 1.声明其他整数类型

其他整数类型的声明方式与 int 类型相同，下面列出了一些例子。还是所有的 C 编译器都能识
别最后 3 条声明，最后一个例子所有的类型是 C99 标准新增的。

long int estine；

long johns;

short ribs;

unsigned int s_count;

unsigned players;

unsigned long headcount;

unsigned short yearvotes;

long long ago;

**** 2.使用多种整数类型的原因

为什么说 short 类型“可能”比 int 类型战胜的空间少，long 类型”可能”比 int 类型占用的空间
多？因为 C 语言只规定了 short 占用的存储空间不能多于 int，long 占用的存储空间不能少于
int。这样规定是为了适应不同的机器。例如，过去的一台运行 Windows 3 的机器上，int 类
型和 short 类型都占 16 位，long 类型占 32 位。后来，Windows 和苹果系统都使用 16 位储存
short 类型，32 位储存 int 类型和 long 类型（使用 32 位可以表示的整数数值超过 20 亿）。现在，
计算机普遍使用 64 位的整数，才引入了 long long 类型。

现在，个人计算机上最常见的设置是，long long 占 64 位，long 占 32 位，short 占 16 位或 32
位（依计算机的自然字长而定）。原则上，这 4 种类型代表 4 种不同的大小，但是在实际使用
中，有些类型之间通常有重叠。

C 标准对基本数据类型只规定了允许的最小大小。对于 16 位机，short 和 int 的最小取值范围
是【-32767，32767】；对于 32 位机，long 的最小取值范围是【-214783647，214783647】.对
于 unsigned short 和 unsigned int，最小取值范围是【0，65535】；对于 unsigned long，
最小取值范围是【0，4294967295】。long long 类型是为了支持 64 位的需求，最小取值范
围是【-1223372036854775807，9223372036854775807】；unsigned long long 的最小取值
范围是】0，18446744073709551615】。如果要开支票，这个数是一千八百亿亿（兆）六千
七百四十四成亿零九百五十五万一千六百一十五。但是，谁会去数？

int 类型那么多，应该如何选择？首先，考虑 unsigned 类型。这种类型的数常用于计数，因
为计数不用负数。而且，unsigned 类型可以表示更大的正数。

如果一个数超出了 int 类型的取值范围，且在 long 类型的取值范围内时，使用 long 类型。然
而，对于那些 long 占用的空间比 int 大的系统，使用 long 类型会减慢运算速度。因此，如非
必要，请不要使用 long 类型。另外要注意一点：如果在 long 类型和 int 类型战胜空间相同的
机器上编写代码，当确实需要 32 位整数时，应使用 long 类型而不是 int 类型，以便把程序移
植到 16 位机后仍然可以正常工作。类似地，如果确实需要 64 位的整数，应使用 long long 类
型。

如果在 int 设置为 32 位系统中要使用 16 位的值，应使用 short 类型以节省存储空间。通常，只
有当程序使用相对于系统可用内存较大的整形数组时，才需要重点考虑节省空间的问题。使
用 short 类型的另一个原因是，计算机中某些组件使用的硬件寄存器是 16 位。

**** 3.long 常量和 long long 常量 

通常，程序代码中使用的数字（如，2345）都被储存为 int 类型。如果使用 10000000 这样在
大数字，超出了 int 类型能表示的范围，编译器会将其视为 long int 类型（假设这种类型可
以表示该数字）。如果数字超出 long 可表示的最大值，编译器则将其视为 unsigned long 类
型。如果还不够大，编译器则将其视为 long long 或 unsigned long long 类型（前提上编译
器能识别这些类型）。

八进制和十六进制常量被视为 int 类型。如果值太大，编译器会尝试使用 unsigned int。如
果还不够大，编译器依次使用 long、unsigned long、long long 和 unsinged long long 类型。

有些情况下，需要编译器以 long 类型储存一个小数字。例如， 编程时要显式使用 IBM PC 上
的内存地址是。另外，一些 C 标准函数也要求使用 long 类型的值。要把一个较小的常量作为
long 类型对待，可以在值的末尾加上 l（小写的 l）或 L 后缀。使用 L 后缀更好，因为 l 看上去
和数字 1 很像。因此，在 int 为 16 位、long 为 32 位的系统中，会把 7 作为 16 位储存，把 7L 作为
32 位储存。l或 L 后缀也可用于八进制和十六进制整数，如 020L 和 0x10L。

类似地，在支持 long long 类型的系统中，也可以使用 ll 和 LL 后缀来表示 long long 类型的值，
如 3LL。另外，u或 U 后缀表示 unsinged long long，如 5ull、10LLU、6LLU 或 9Ull。

整数溢出

如果整数走出了相应类型的取值范围会怎样？下面分别将有符号类型的无符号类型的整数设
置为比最大值略大，看看会发生什么（printf（）函数使用%u 说明显示 unsignedint 类型的
值）。

#+BEGIN_SRC C
//toobig.c 走出系统允许的最大int值
#include<stdio.h>
int main(int argc,const char*argv[])
{
int i=2147483647;
unsigned int j=4294967295;
printf("%d %d %d\n",i,i+1,i+2);
printf("%u %u %u\n",j,j+1,j+2);
return 0;
}
#+END_SRC

在系统下输出的结果是：

2147483647 -2147483648 -2147483647

4294967295 0 1

可以把坸整数 j 看作是汽车的里程表。当达到能表示的最大值时，会重新从起始点开始。整
数 i 也是类似的情况。主要区别是，在超过最大值时，unsigned int 类型的变量 j 从 0 开始。
注意，当 i 超出（溢出）其相应类型所能表示的最大值时，系统并未通知用户。因此，在编
程时必须自己注意这类问题。

溢出行为是未定义的行为，C标准并未定义有符号类型的溢出规则。以上描述的溢出行为比
较有代表性，但是也可能会出现其他情况。

**** 4.打印 short、long、long long 和 unsigned 类型

打印 unsigned int 类型的值，使用%u 转换说明：打印 long 类型的值，使用%ld 转换说明。如
果系统中 int 和 long 的大小相同，使用%d 就行。但是，这样的程序被移植到其他系统（int 和
long 类型的大小不同）中会无法正常工作。在 x 和 o 前面可以使用 l 前缀，%lx 表示以十六进制
格式打印 long 类型整数。%lo 表示以八进制格式打印 long 类型整数。注意，虽然 C 允许使用大
写或小写的常量后缀，但是在转换说明中只能用小写。

C 语言有多种 printf（）格式。对于 short 类型，可以使用 h 前缀。%hd 表示以二进制显示
short 类型的整数，%ho 表示以八进制显示 short 类型的整数。h和 l 前缀都可以和 u 一起使用，
用于表示无符号类型。例如，%lu 表示打印 unsigned long 类型的值。程序清单 3.4 演示了一
些例子。对于支持 long long 类型的系统，%lld 和%llu 分别表示有符号和无符号类型。第 4 章
将详细介绍转换说明。

#+BEGIN_SRC C

//程序清单3.4 print2.c程序
#include<stdio.h>
int main(int argc,const char*argv[])
{
unsigned int un=3000000000;//int 为32位和short为16位的系统
short end=200;
long big=65537;
long long verybig=12345678908642;
printf("un=%u and not %d\n",un,un);
printf("end=%hd and %d\n",end,end);
printf("big=%ld and not %hd\n",big,big);
printf("verybig=%lld and not %ld\n",verybig,verybig);
return 0;
}

#+END_SRC


在特定的系统中输出如下（输出的结果可能不同）：

un=3000000000 and not -1294967296
end=200 and 200
big=65537 and not 1
verybig=12345678908642 and not 12345678908642

该例表明，使用错误的转换说明会得到意想不到的结果。第 1 行输出，对于无符号变量 un，
使用%d 会生成负值！其原因是，无符号值 3000000000 和有符号值-1294967296 在系统内存中
的内部表示完全相同（详见第 15 章）。因此，如果告诉 print（）该数是无符号数，它打印
一个值；如果告诉它该数是有符号数，它将打印另一个值。在待打印的值大于有符号值的最
大值时，会发生这种情况。对于较小的正数（如 96），有符号和符号类型的存储、显示都相
同。

第 2 行输出，对于 short 类型的变量 end，在 printf（）中无论指定以 short 类型（%hd）还是
int 类型（%d）打印，打印出来的值都相同。这是因为在给函数传递参数时，C编译器把
short 类型的值自动转换成 int 类型的值。你可能会抽出疑问：为什么要进行转换？h修饰符
有什么用？第 1 个问题的答案是，int 类型被认为是计算机处理整数类型时最高效的类型。因
此，在 short 和 int 类型的大小不同的计算机中，用 int 类型的参数传递速度更快。第 2 个问题
的答案中，使用 h 修饰符可以显示较大整数被截断成 short 类型值的情况。第 3 行输出就演示
了这种情况。把 65537 以二进制格式写成一个 32 位数是 000000000000000100000000000001。
使用%hd，printf（）只会查看后 16 位所以显示的值是 1.与此类似，输出的最后一行先显示
了 verybig 的完整值，然后由于使用了%ld，print（）只显示了储存在后 32 位的值。

本章前面介绍过，程序员必须保转换说明的数量和持打印值 的数量相同。以上内容也提醒
读者，程序员还必须根据待打印值的类型使用正确的转换说明。

提示匹配 printf（）函数时，切记检查每个待打印值都有对应的转换说明，还要检查转换
说明的类型是否与待打印值的类型相匹配。


*** 3.4.3 使用字符：char 类型

char 类型用于储存字符（如，字母或标点符号），但是从技术层面看，char 是整数类型。因
为 char 类型实际上储存的是整数而不是字符。计算机使用数字编码来处理字符，即用特定的
整数表示特定的字符。美国最常用的编码是 ASCII 编码，此也使用此编码。例如，在 ASCII 码
中，整数 65 代表大写字母 A。因此，储存字母 A 实际上储存的是整数 65（许多 IBM 的大型主机
使用另一种编码-EBCDIC，其原理相同。另外，其他国家的计算机系统可能使用完全不同的
编码）。

标准 ASCII 码的范围是 0~127，只需 7 位二进制数即可表示。通常，char 类型被定义为 8 位的存
储单元，因此容纳标准 ASCII 码绰绰有余。许多其他系统（如 IBM PC 和苹果 Macs）还提供扩
展 ASCII 码，也在 8 位表示范围之内。一般而言，C语言会保证 char 类型足够大，以储存系统
（实现 C 语言的系统）的基本字符集。

许多字符集都超过了 127，甚至多于 255。例如，日本汉字（kanji）字符集。商用的统一码
（Unicode）创建了一个能表示世界范围内多种字符集的系统，目前包含的字符已超过
110000 个。国际标准化组织（ISO）和国际电工技术委员会（IEC）为字符集开发了
ISO/IEC10646 标准。统一码标准也与 ISO/IEC10646 标准兼容。

C 语言把 1 字节定义为 char 类型占用的位（bit）数，因此无论是 16 位还是 32 位系统，都可以
使用 char 类型。

**** 1.声明 char 类型变量

char 类型变量的声明方式与其他类型变量的声明方式相同。下面是一些例子：

char response；

***** response
response	英[rɪˈspɒns]
美[rɪˈspɑːns]
n.	(口头的或书面的) 回答，答复; 反应; 响应; (礼拜仪式中的) 答唱咏，启应经;
[例句]There has been no response to his remarks from the government
政府尚未对他的言论作出回应。
[其他]	复数：responses


 char itable，Iatan；

***** itable

合适的

***** Iatan
国际航空协会

以上声明创建了 3 个 char 类型的变量：response、itable 和 Iatan。

**** 2.字符常量和初始化

 如果要把一个字符常量初始化为字母 A，不必背下 ASCII 码，用计算机语言很容易做到。通过
 以下初始化把字母 A 赋给 grade 即可：

 char grade='A';

 在 C 语言中，用单引号括起来的单个字符被称为字符常量（character constant）。编译器
 一发现‘A’，就会将其转换成相应的代码值。单引号必不可少。下面还有一些其他的例子：

 char broiled；//声明一个 char 类型的变量

 broiled=’T’；//为其赋值，正确

 broiled=T；//错误！此时 T 是一个变量

 broiled=“T”；//错误！此时”T”是一个字符串

 如上所示，如果省略单引号，编译器认为 T 是一个变量名：如果把 T 用双引号括起来，编译器
 则认为“T”是一个字符串。字符串的内容将在第 4 章中介绍。

 实际上，字符是以数值形式储存的，所以也可使用数字代码值来赋值：

 char grade=65;//对于 ASCII，这样做没问题，但这是一种不好的编程风格

 在本例中，虽然 65 是 int 类型，但是它在 char 类型能表示的范围内，所以将其赋值给 grade 没
 问题。由于 65 是字母 A 对应的 ASCII 码，因此本例是把 A 赋给 grade。注意，能这样做的前提是
 系统使用 ASCII 码。其实，用‘A’代替 65 才是较为妥当的做法，这样在任何系统中都不会出问
 题。因此，最好使用字符常量，而不是数字代码值。

 奇怪的是，C语言将字符常量视为 int 类型而非 char 类型。例如，在 int 为 32 位、char 为 8 位的
 ASCII 系统中，有下面的代码：

 char grade='B';

 本来'B'对应的数值 66 储存在 32 位的存储单元中，现在却可以储存在 8 位的存储单元中
 （grage）。利用字符常量的这种特性，可以定义一个字符常量'FATE'，即把 4 个独立的 8 位
 ASCII 码储存在一个 32 位存储单元中。如果把这样的字符常量赋给 char 类型变量 grade，只有
 最后 8 位有效。因此，grade 的值是'E'。

 [2020-05-06 Wed 15:55]

**** 3.非打印字符 

单引号只适用于字符、数字和标点符号，浏览 ASCII 表会发现，有些 ASCII 字符打印不出来。
例如，一些代表行为的字符（如，退格、换行、终端响铃或蜂鸣）。C语言提供了 3 种方法表
示这些字符。

第 1 种方法前面介绍过-使用 ASCII 码。例如，蜂鸣字符的 ASCII 值是 7，因此可以这样写：

char beep=7；

第 2 种方法是，使用特殊的符号序列表示一些特殊的字符。这些符号序列叫作转义序列
（escape sequence）。表 3.2 列出了转义序列及其含义。

把转义序列赋给字符变量时，必须用单引号把转义序列括起来。例如，假设有下面一行代码：

char nerf=‘\n’;

稍后打印变量 nerf 的效果是，在打印机或屏幕上另起一行。


#+BEGIN_example
表 3.2 转义序列



| 转义序列 | 含义                                  |
|----------+---------------------------------------|
| \a       | 警报（ANSI C）                        |
|----------+---------------------------------------|
| \b       | 退格                                  |
|----------+---------------------------------------|
| \f       | 换页                                  |
| \n       | 换行                                  |
|----------+---------------------------------------|
| \r       | 回车                                  |
|----------+---------------------------------------|
| \t       | 水平制表符                            |
|----------+---------------------------------------|
| \v       | 垂直制表符                            |
|----------+---------------------------------------|
| \\       | 反斜杠                                |
|----------+---------------------------------------|
| \'       | 单引号                                |
|----------+---------------------------------------|
| \"       | 双引号                                |
|----------+---------------------------------------|
| \7       | 问号                                  |
|----------+---------------------------------------|
| \Ooo     | 八进制值（oo 必须是有效的八进制数，   |
|          | 即每个 o 可表示 0~7 中的一个数）      |
|----------+---------------------------------------|
| \xhh     | 十六进制值（hh 必须是有效的十六进制数 |
|          | ，即每个 h 可表示 0~f 中的一个数      |
|----------+---------------------------------------|
#+END_example
现在，我们来仔细分析一下转义序列。使用 C90 新增的警报字符（\a）是否能产生听到的或
看到的警报，取决于计算机的硬件，蜂鸣是最常见的警报（在一些系统中，警报字符不起作
用）。C标准规定警报字符不得改变活跃位置。标准中的活跃位置（active position）指的
是显示设备（屏幕、电传打字机、打印机等）中下一个字符将出现的位置。简而言之，平时
常说的屏幕光标位置就是活跃位置。在程序中把警报字符输出在屏幕上的效果是，发出一声
蜂鸣，但不会移动屏幕光标。

接下来的转义字符\b、\f、\n、\r、\t 和\v 是常用的输出设备控制字符。了解它们最好的方
式是查看它们对活跃位置的影响。换页符（\f）把活跃位置移至下一页的开始处；换行符
（\n）把活跃位置移至下一行的开始处；回车符（\r）把活跃位置移动到当前行的开始处；
水平制表符（\t）将活跃位置移至下一个水平制表点（通常是第 1 个、第 9 个、第 17 个、第 25
个等字符位置）；垂直制表符（\v）把活跃位置移到下一个垂直制表点。

这些转义序列字符不一定在所有的显示设备上都起作用。例如，换页符和垂直制表符在 pc 屏
幕上会生存奇怪的符号，光标并不会移动。只有将其输出到打印机上时才会产生前面描述的
效果。

接下来的 3 个转义序列（\\、\'、\"）用于打印\、'、"字符（由于这些字符用于定义字符常
量），是 printf（）函数的一部分，若直接使用它们会造成混乱）。如果打印下面一行内容：

Gramps sez,"a\ is a backslash."

应这样编写代码：

printf（“Gramps sec,\"a \\ is a backslash.\"\n”）;

表 3.2 中的最后两个转义序列（\0oo 和\xhh）是 ASCII 码的特殊表示。如果要用八进制 ASCII
码表示一个字符，可以在编码值 前面加一个反斜杠（\）并用单引号括起来。例如，如果编
译器不识别警报字符（\a）,可以使用 ASCII 码来代替：

beep='\oo7';

可以省略前面的 o，’\o7'甚至'\7'都可以。即使没有前缀 o，编译器在处理这种写法时，仍
会解释为八进制。

从 C90 开始，不仅可以用十进制、八进制形式表示字符常量，C语言还提供了第 3 种选择-用十
六进制形式表示字符常量，即反斜杠后面跟一个 x 或 X，再加上 1~3 位十六进制数字。例如，
Ctrl+P 字符的 ASCII 十六进制码是 10（相当于十进制的 16），可表示为'\x10'或'\x010'。图
3.5 列出了一些整数类型的不同进制形式。

| 整形常量的例子     |          |         |        |
|--------------------+----------+---------+--------|
| 类型               | 十六进制 | 八进制  | 十进制 |
|--------------------+----------+---------+--------|
| char               | \ox41    | \o101   | N.N.   |
|--------------------+----------+---------+--------|
| int                | ox41     | o101    | 65     |
|--------------------+----------+---------+--------|
| unsigned int       | ox41u    | o101u   | 65u    |
|--------------------+----------+---------+--------|
| long               | ox41L    | o101L   | 65L    |
|--------------------+----------+---------+--------|
| unsigned long      | ox41UL   | o101UL  | 65UL   |
|--------------------+----------+---------+--------|
| long long          | ox41LL   | o101LL  | 65LL   |
|--------------------+----------+---------+--------|
| unsigned long long | ox41ULL  | o101ULL | 65ULL  |
|--------------------+----------+---------+--------|

图 3.5int 系列类型的常量写法示例

使用 ASCII 码时，注意数字和数字字符的区别。例如，字符 4 对应的 ASCII 码是 52。‘4’表示字
符 4，而不是数值 4 。

关于转义序列，读者可能有下面 3 个问题。

上面最后一个例子（printf（"Gramps sez,\"a \\is a backslash\"\"n"）），为何没有用
单引号把转义序列括起来？无论是普通字符还是转义序列，只要是双引号括起来的字符集合，
就无需用单引号括起来。双引号中的字符集合叫作字符串（详见第 4 章）。注意，该例中的
其他字符（G、r、a、m、p、s等）都没有用单引号括起来。与此类似，
printf（"Hello!\007\n";）;将打印 Hello!并发出一声蜂鸣，而 printf（"Hello！7\n"）;
则打印 Hello！7 。不是转义序列中的数字将作为普通字符被打印出来。

何时使用 ASCII 码？何时使用转义序列？如果要在转义序列（假设使用'\f'）和 ASCII 码
（'\014'）之间选择，请选择前者（即'\f）。这样的写法不仅更好记，而且可移植性更
高。'\f'在不使用 ASCII 码的系统中，仍然有效。

如果要使用 ASCII 码，为何要写成'\032'而不是 032？首先，'\032'能更清晰地表达程序员使
用字符编码的意图。其次，类似\032 这样的转义序列可以嵌入 C 的字符串中，如
printf("Hello!\007\n")；中就嵌入了\007。

**** 4.打印字符

printf（）函数用%C 指明待打印的字符。前面介绍过，一个字符变量实际上被储存为 1 字节
的整数值。因此，如果用%d 转换说明打印 char 类型变量的值，打印的是一个整数。而%c 转换
说明告诉 printf（）打印该整数值对应的字符。程序清单 3.5 演示了打印 char 类型变量的两
种方式。

程序清单 3.5 charcode.c 程序

#+BEGIN_SRC C
//charcode.c - 显示字符的代码编号
#include<stdio.h>
int main(int argc,const char*argv[])
{
char ch;
printf("Please enter a character.\n");
scanf("%c",&ch);//用户输入字符
printf("The code for %c is %d.\n",ch,ch);
return 0;
}
#+END_SRC

运行该程序后，输出示例如下：

Please enter a character.

c 

The code for c is 67.

运行该程序时，在输入字母后还要忘记按下 Enter 或 Return 键。随后，scanf（）函数会读取
用户输入的字符，&符号表示把输入的字符赋给变量 ch。接着，printf（）函数打印 ch 的值
两次，第 1 次打印一个字符（对应代码中的%c），第 2 次打印一个十进制整数值（对应代码中
的%d）。注意，printf（）函数中的转换说明决定了数据的显示方式，而不是数据的储存方
式（见图 3.6）。

ch |0|1|0|0|0|0|1|1| 存储（ASCII 码）


      “%c”     “%d”   代码


       c         67    显示

图 3.6 数据显示和数据存储

**** 5.有符号还是无符号

有些 c 编译器把 char 实现为有符号类型，这意味着 char 可表示的范围是-128~127。而有些 C 编
译器把 char 实现为无符号类型，那么 char 可表示的范围是 0～255 。请查阅相应的编译器手
册，确定正在使用的编译器如何实现 char 类型。或者，可以查阅 limits.h 头文件。下一章将
详细介绍头文件的内容。

根据 C90 标准，C语言允许在关键字 char 前面使用 signed 或 unsigned。这样，无论编译器默认
char 是什么类型，signed char 表示有符号类型，而 unsigned char 表示无符号类型。这在用
char 类型处理小整数时很有用。如果只用 char 处理字符，那么 char 前面无需使用任何修饰符。

*** 3.4.4 _Bool 类型

C99 标准添加了_Bool 类型，对于表示布尔值，即逻辑值 true 和 false。因为 C 语言用值 1 表示
true，所以_Bool 类型实际上也是一种整数类型。但原则上它仅占用 1 位存储空间，因为对 0
和 1 而言，1位的存储空间足够了。

程序通过布尔值可选择执行哪部分代码。我们将在第 6 章和第 7 章中详述相关内容。

*** 3.4.5 可移植类型：stdint.h 和 inttpes.h

C 语言提供了许多有用的整数类型。但是，某些类型名在不同系统中的功能不一样。C99 新增
了两个头文件 stdint.h 和 inttpes.h，以确保 C 语言的类型在各系统中的功能相同。

C 语言为现有类型创建了更多类型名。这些新的类型名定义在 stdint.h 头文件中。例如，
int32_t 表示 32 位的有符号整数类型。在使用 32 位 int 的系统中，头文件会把 int32_t 作为
int 的别名。不同的系统也可以定义相同的类型名。例如，int 为 16 位、long 为 32 位的系统会
把 int32_t 作为 long 的别名。然后，使用 int32_t 类型编写程序，并包含 stdint.h 头文件时，
编译器会把 int 或 long 替换成当前系统匹配的类型。

上面讨论的类型别名是精确宽度整数类型（exact-width interger type）的示例。int32_t
表示整数类型的宽度正好是 32 位。但是，计算机的底层系统可能不支持。因此，精确宽度整
数类型是可选项。

如果系统不支持精确宽度整数类型怎么办？C99 和 C11 提供了第 2 类别名集合。一些类型名保
证所表示的类型一定是至少有指定宽度的最小整数类型。这组集合被称为最小宽度类型
（minimum width type）。例如，int_least8_t 是可容纳 8 位有符号整数值的类型中宽度最
小的类型的一个别名。如果某系统的最小整数类型是 16 位，可能不会定义 int8_t 类型。尽管
如此，该系统仍可使用 int_least8_t 类型，但可能氢该类型实现为 16 位的整数类型。

当然，一些程序员更关心速度而非空间。为此，C99 和 C11 定义了一组可使计算达到最快的类
型集合。这组类型集合被称为最快最小宽度类型(fastst minimum width type)。例如，
int_least8_t 被定义为系统中对 8 位有符号值而言去处最快的整数类型的别名。

另外，有些程序员需要系统最大整数类型。为此，C99 定义了最大的有符号整数类型
intmax_t，可储存任何有效的有符号整数值。类似地，unitmax_t 表示最大的无符号整数类
型。顺带一提，这些类型有可能比 long long 和 unsigned long 类型更大，因为 C 编译器除
了实现标准规定的类型以外，还可以利用 C 语言实现其他类型。例如，一些编译器在标准引
入 long long 类型之前，已提前实现了该类型。

C99 和 C11 不仅提供可移植的类型名，还提供相应的输入和输出。例如，printf（）打印特定
类型时要求与相应的转换说明匹配。如果要打印 int32_t 类型的值，有些定义使用%d，而有
些定义使用%ld，怎么办？C标准针对这一情况，提供了一些字符串宏（第 4 章中详细介绍）
来显示可移植类型。例如，inttypes.h 头文件中定义了 PRID32 字符串宏，代表打印 32 位有符
号值的合适转换说明（如 d 或 l）。程序清单 3.6 演示了一种可移植类型和相应转换说明的用
法。

程序清单 3.6 altnames.c 程序

#+BEGIN_SRC C
//altnames.c 可移植整数类型名
#include<stdio.h
#include<inttypes.h>//支持可移植类型
int main(int argc,const char*argv[])
{
int32_t me32;//me32是一个32位有符号整形变量
me32=45933945;
printf("First, assume int32_t is int: ");
printf("me32 = %d\n",me32);
printf("Next, let's not make any assumptions.\n");
printf("Instead, use a \"macro\" from inttypes.h: ");
printf("me32=%" PRId32 "\n",me32);
return 0;
}
#+END_SRC

该程序最后一个 printf（）中，参数 PRId32 被定义在 inttypes.h 中的“d”替换，因而这条语
句等价于：

printf（"me16=%" "d" "\n",me16）;

在 C 语言中，可以把多个连续的字符串组合成一个字符串，所以这条语句又等价于：

printf（"me16=%d\n",me16）;

下面是程序的输出，注意，程序中使用了\"转义序列来显示双引号：

First, assume int32_t is int: me32=45933945

Next, let's not make any assumptions.

Instead, use a "macro" from inttypes.h: me32=45933945

篇幅有限，无法介绍扩展的所有整数类型。本节主要是为了让读者知道，在需要时可进行这
种级别的类型控制。附录 B 中的参考燃料 VI“扩展的整数类型”介绍了完整的 inttypes.h 和
stdint.h 头文件。

注意对 C99/C11 的支持

C 语言发展至今，虽然 ISO 已发布了 C11 标准，但是编译器供应商对 C99 的实现程度却各不相同。
在本书第 6 版的编写过程中，一些编译器仍未实现 inttypes.h 头文件及其相关功能。

*** 3.4.6 float、double 和 long double

各种整数类型对大多数软件开发项目而言够用了。然而，面向金融和数学的程序经常使用浮
点数。C语言中的浮点类型有 float、double 和 long double 类型。它们与 FORTRAN 和 Pascal 中
的 real 类型一致。前面提到过，浮点类型能表示包括小数在内更大范围的数。浮点数的表示
类似于科学记数法（即用小数乘以 10 的幂来表示数字）。该记数系统常用于表示非常大或非
常小的数。表 3.3 列出了一些示例。

表 3.3 记数法示例

|------------+-------------+------------|
|       数字 | 科学记数法  | 指数记数法 |
|------------+-------------+------------|
| 1000000000 | 1.0\times10^10 |      1.0e9 |
|------------+-------------+------------|
|     123000 | 1.23\times10^5 |     1.23e5 |
|------------+-------------+------------|
|     322.56 | 3.2256\times10^2 |   3.2256e2 |
|------------+-------------+------------|
|   0.000056 | 5.6\times10^-5 |     5.6e-5 |
|------------+-------------+------------|

第 1 列是一般记数法：第 2 列是科学记数法：第 3 列是指数记数法（或称为 e 记数法），这是科
学记数法在计算机中的写法，e后面的数字代表 10 的指数。图 3.7 演示了更多的浮点数写法。

C 标准规定，float 类型必须至少能表示 6 位有效数字，且取值范围至少是 10^-37~10^37。前
一项规定指 float 类型必须至少精确表示小数点后的 6 位有效数字，如 33.333333。后一项规
定用于方便地表示诸如太阳质量（2.0e30 千克）、一个质子的电荷量（1.6e-19 库仑）或国
家债务之类的数字。通常，系统储存一个浮点数要占用 32 位。其中 8 位用于表示指数的值和
符号，剩下 24 位用于表示非指数部分（也叫作尾数或有效数）及其符号。

C 语言提供的另一种浮点类型是 double（意为双精度）。double 类型和 float 类型的最小取值
范围相同，但至少必须能表示 10 位有效数字。一般情况下，double 占用 64 位而不是 32 位。一
些系统将多出的 32 位全部用来表示非指数部分，这不仅增加了有效数字的倍数（即提高了精
度），而且还减少了舍入误差。另一些系统把其中的一些位分配给指数部分，以容纳更大的
指数，从而增加了可表示数的范围。无论哪种方法，double 类型的值至少有 13 位有效数字，
超过了标准的最低位数规定。

C 语言的第 3 种浮点类型是 long double，以满足比 double 类型更高的精度要求。不过，C只保
证 long double 类型至少与 double 类型的精度相同。

1.声明浮点型变量

浮点型变量的声明和初始化方式与整形变量相同，下面是一些例子：

float noah, jonah;

double trouble;

float planck=6.63e-34;

long double gnp;

2.浮点型常量

在代码中，可以用多种形式书写浮点型常量。浮点型常量的基本形式是：有符号的数字（包
括小数点），后面紧跟 e 或 E，最后是一个有符号数表示 10 的指数。下面是两个有效的浮点型
常量：

-1.56E+123000

2.87e-3

正号可以省略。可以没有小数点（如，2E5）或整数部分（如，.45E-6），但是不能同时省
略两者。下面是更多的有效浮点型常量示例：

3.14159

.2

4e16

.8E-5

100

不要在浮点型常量中间加空格：1.56 E+12(错误！)

默认情况下，编译器假定浮点型常量是
double 类型的精度。例如，假设 some 是
float 类型的


变量，编写下面的语句：

some=4.0\times2.0;

参演，4.0 和 2.0 被储存为 64 位的 double 类型，使用双精度进行乘法运算，然后将乘积截断成
float 类型的宽度。这样做虽然计算精度更高，但是会减慢程序的运行速度。
