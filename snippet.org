*     :lisp:
#+BEGIN_SRC lisp
(+ 2 2)
(defun hello(name)
(message "Hello, %s" name))
(hello "xia")
#+END_SRC
*     :Lisp:
#+BEGIN_SRC lisp
(concat "abc" "def")
#+END_SRC
*     :Lisp:
#+BEGIN_SRC lisp
(defun multiply-by-seven (number)
  "Multiply NNUMBER by seven."
  (interactive "p")
  (message "The result is %d" (* 7 number)))
(multiply-by-seven 7)

#+End_src
*     :lisp:
#+BEGIN_SRC lisp
(let((zebra 'stripes)
(tiger 'fierce))
(message "One kind of animal has %s and another is %s." zebra tiger))
#+END_SRC
*     :lisp:
#+BEGIN_SRC lisp
(let((birch 3)
pine
fir
(oak 'some))
(message
"Here are %d variables with %s, %s, and %s value."
birch pine fir oak))
#+END_SRC
*     :lisp:
#+BEGIN_SRC lisp
(defun type-of-animal (characteristic)
  "Print message in echo area depending on CHARACTERISTIC.
If the CHARACTERISTIC is the symbol 'fierce',
then warn of a tiger."
  (if (equal characteristic 'fierce)
      (message "It's a tiger!")))
(type-of-animal 'zebra)
#+END_SRC
*     :page32:
#+BEGIN_SRC lisp
(if (> 4 5);; if part
    (message "5 is greater thsn 4!");; then-part
  (message "4 is not greater than 5!"));; else-part

#+END_SRC
*     :page32:
#+BEGIN_SRC lisp
(defun type-of-animal (characteristic)
  ;; Second version.
  "Print message in echo area depending on CHARACTERISTIC.
then warn of a tiger;
else say it's not fierce."
  (if (equal characteristic 'fierce)
      (message "It's a tiger!")
    (message "It's not fierce!")))
(type-of-animal 'zebra)
#+END_SRC
*     :page33:
#+BEGIN_SRC lisp
(if 4
    'true
  'false)
(if nil
    'true
  'false)
#+END_SRC
