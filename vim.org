| 编辑命令           |            |            |            |
| 文体目标           | 修改       | 删除       | 复制       |
|--------------------+------------+------------+------------|
| 1 个单词           | cw         | dw         | yw         |
| 2 个单词，不计标点 | 2cw 或 c2w | 2dw 或 d2w | 2yw 或 y2w |
| 向后 3 个单词      | 3db 或 c3b | 3dw 或 d3w | 3yb 或 y3b |
| 1 行               | cc         | dd         | yy 或 Y    |
| 到行尾             | c$         | d$或 D     | y$         |
| 到行首             | c0         | d0         | y0         |
| 单个字符           | r          | x 或 X     | yi 或 yh   |
| 5 个字符           | 5s         | 5x         | 5yl        |
|--------------------+------------+------------+------------|
** DONE <2016-07-22 Fri 06:53> learn vim eidt
   CLOSED: [2016-07-22 Fri 07:14]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2016-07-22 Fri 07:14]
   CLOCK: [2016-07-22 Fri 06:53]--[2016-07-22 Fri 07:14] =>  0:21
   :END:
 移动
 | 四个箭头（左下上右） | h j k l |
 |----------------------+---------|
 | 到下一行的首字符     | +       |
 | 到上一行的首字符     | -       |
 | 到单词的尾部         | e或E    |
 | 按单词前移           | w或W    |
 | 按单词后移           | b或B    |
 | 到行尾               | $       |
 | 到行首               | 0       |
 |----------------------+---------|

 其它操作

 |--------------------------------------+---------|
 | 从缓冲区输出文本                     | p或P    |
 | 启动vi，如果指定了文件，就打开该文件 | vi file |
 | 保存编辑、退出文件                   | ZZ      |
 | 不保存编辑、退出文件                 | :q!     |
 |--------------------------------------+---------|

 文本创建和操作命令
 | 在当前位置插入文本                         | i        |
 |--------------------------------------------+----------|
 | 在行首手插入文本                           | I        |
 | 在当前位置追加文本                         | a        |
 | 在行尾追加文本                             | A        |
 | 在光标所在行的下面新建一行，等待输入新文本 | o        |
 | 在光标所在行的上面新建一行，等待输入新文本 | O        |
 | 删除行并替换文本                           | S        |
 | 使用输入的文本替换光标所在位置的字符       | s        |
 | 使用新文本覆盖现有文本                     | R        |
 | 合并当前行和下一行                         | J(大写） |
 | 转换大小写                                 | ~        |
 | 重复上次操作                               | .        |
 | 取消上次修改                               | u        |
 | 恢复行到初始状态                           | U        |
 |--------------------------------------------+----------|

** DONE 练习一遍
   CLOSED: [2016-07-22 Fri 20:43]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2016-07-22 Fri 20:43]
   CLOCK: [2016-07-22 Fri 20:25]--[2016-07-22 Fri 20:43] =>  0:18
   :END:
** DONE 学习查找替换
   CLOSED: [2016-07-23 Sat 16:59]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2016-07-23 Sat 16:59]
   CLOCK: [2016-07-23 Sat 16:45]--[2016-07-23 Sat 16:59] =>  0:14
   :END:
:s/old/new/g
Is a woman in a blue cap cheeful? No, a woman in a blue cap is sad.
** DONE vim FAQ
   CLOSED: [2016-07-24 Sun 12:18]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2016-07-24 Sun 12:18]
   CLOCK: [2016-07-24 Sun 11:16]--[2016-07-24 Sun 12:18] =>  1:02
   :END:
*** 1.0 什么是vi?
vi是个可视化的编辑器（vi就意味着可视化--VIsual)。那么，什么是可视化的编辑器呢？
（相对于非可视化的编辑器来说）可视化编辑器就是可以让你在编辑文本的时候看到它们。
今天，这听起来似乎非常普通，反之，非可视化的编辑器似乎很奇怪，非可视化的编辑器的
例子可以举出不少：如ed,sed和edlin(直到相当近的一段时间内，它是dos自带的最后一个
编辑器）等。
vi是威廉.侨伊写的，作为BSD UNIX的一部分，后来AT&T也开始用vi，于是标准UNIX也开始
用vi了。
*** 1.1 - 关于vi有什么重大的交易吗？为什么大家都用它？ 更进一步说，为什么我要用它？
vi是UNIX下面的缺省编辑器，因此几乎近来所有的UNIX都捆绑了vi（近来是指1984年左右）。
这意味着无论何时你跨平台使用某种UNIX，你都知道在你指尖下面有一个强有力的编辑器。
为什么不是别的呢？vi是个强大的编辑器。同样，一旦你了解了vi，你就能很快的编辑你的
文件，因为它非常能节省你的敲键次数。由于它在插入和命令两种情况下使用不同的模式，
它比大多数的不基于这种模式的编辑器要快。而且，vi非常小（我机器上面的版本只有
200k)。还有，vi几乎能做任何事，只要你知道如何使它做你想做的事。
*** 1.2 - 噢！这听起来不错！有没有理由不用vi?
有。有一个非常好的理由：vi稍微有些难学，如果你开始学的话，vi又慢又让人痛苦，当然，
一旦你学会了，vi就快多了。但是学习的过程很慢。有人曾经问我，如果vi是个比较易学的
编辑器，它是否直观（intuitive)呢？我一般这样回答：“是的，我们有些人是这样认为。
但是大多数人认为我们疯了。”
*** 1.3 - vi能在多少不同的操作系统下面运行？
UNIX,就是它。尽管如此，不是有很多vi的变种运行在不同的操作系统上。我就在以下一些
操作系统上用过vi:UNIX，DOS，OS/2，MAC SYSTEM 7。（后面有一个有关细节的列表）
*** 1.4 - 好吧，你说服了我。我决定开始使用vi。我该从哪儿开始？
好吧，狡猾的家伙。关于vi有很多很好的书：大多数讲UNIX的书至少有一章给了vi，而且有
不少是专门讲vi的书。我没有什么偏爱。所以你最好是问问你们哪里的vi高手们他们是从哪
儿学来的。还有到处试，用vi打开一个不重要的文档（你的论文不象是个学vi的好实验品），
然后再到处试。我无法想象有人学习vi却不花相当多的时间去到处试试。记住：如果你有些
地方不明白了，只要敲两次<Esc>键，你就又回到命令模式下了。
我要提到一点是，我想在这里提比较合适，就是如果要成为系统管理员或者其他对UNIX配置
做什么修改的话，最好是学学ed或ex，因为有些版本的UNIX没有把vi放在根分区里面，这样
你就可能无计可施了。ed是个不错的选择。
*** vi有什么变种吗？
vi有很多变种。很多都改进了vi，大多数都可以使用在这个文档种列出的命令，但是有一些
不同的地方，更进一步的细节，你可以参考这些变种附带的相应文档。
*** DONE 2.0 - vi 入门
    CLOSED: [2016-07-24 Sun 14:46]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-07-24 Sun 14:46]
    CLOCK: [2016-07-24 Sun 14:00]--[2016-07-24 Sun 14:46] =>  0:46
    :END:
对vi的初学者来说，有些基本的提示。第一，任何时候，手头都要有一份命令摘要。我们将
在后面给出一个快速参考/命令摘要。第二，找一本vi方面的比较好的书。这个文档不是学
vi的最佳途径（最起码现在还不是），我不敢保证这个文档能教会一个对vi一无所知的人，
而很多书已经做到了这一点。但是，我们这里不是给出了不少提示，对选择书籍来说，有一
个标准的原则：买之前一定要仔细阅读。要了解这本书对你是否有意义。确信它能在你练习
vi的时候有用。和其他书做个比较 -- 不管怎样，vi可能让你感到非常莫名其妙，而且你要
确信这么一点：是书让你糊涂，而不是你低估了学vi的难度。
还有，找一些诸如“学vi”（vilearn),“vi向导”(vitutor)之类的软件来帮助你掌握vi的
基本知识。
*** 2.1 - 有什么游戏帮助我们学习vi吗？
这似乎很无聊，但是事实上UNIX系统里有不少游戏可以帮助你学习使用vi。这些帮助主要是
一些基本知识。虽然我还不知道有哪个游戏可以帮助你学习vi的所有命令，但我确实知道有
一些可以帮助你学习使用hjkl来移动光标。NetHark，一个类Rogue的游戏，就对这非常有帮
助。而且它是一个很大的游戏，能玩很长一段时间。我没有贬低其他游戏的意思，这些游戏
是：rogue,moria,omega,wor,snake.
*** 2.2 - 命令模式和插入模式有什么区别？

vi将命令模式和插入模式区分开来，这经常被认为是vi的一个大问题，但往往这也被认为是
vi的优势所在。理解其中的区别是掌握vi的关键。vi启动时，开始处于命令模式；在这种模
式下，我们可以在文件中到处移动，改变文本的某个特定区域，剪切，复制和粘贴文本还有
更多，插入模式是指用户可以真正插入文本，换句话说，命令模式是用来在文件中移动，而
插入模式是用来在文件中键入文本。
有些命令，例如：a, i ,c, C,0,o和其他一些可以从命令模式切换到插入模式。
<Esc>键或者 ^c(ctrl+c)可以脱离插入模式而返回到命令模式。
你要适应这种差别。它使得vi区别于其他的编辑器。它也使你能在你的手不离开标准键盘做
很多事情。
*** 2.3 - 等等，我的键盘没有<Esc>键，我该怎么办？
试试敲^[(ctrl+[)，如果你的键盘有一个<Meta>键，再试试它。如果还不行，再试试^3。
*** 2.4 - 那些~s是什么东西？
它们仅仅是用来让你知道你的文档末尾在哪儿。实际上它们并不在你的文档里，所以你用不
着担心它们。
*** 2.5 - 我无法习惯hjkl，你有什么建议吗？
首先，如果你的终端设置正确而且你连接的也没有问题的话，你可以使用箭头键。但是，如
果你认为你要经常使用vi，那么最好是习惯使用 hjkl，因为它们敲起来更快，而且，有时
候连接出问题了，使得Esc序列都可能丢失了。（这样你可能就无法使用箭头键了--译注）
*** 2.6 - 我如何才能不存盘退出？
：q!可以做到这一点，如果vi看起来冻住了，确信你没有错敲了个^s，敲^Q可以解开^S。
*** 2.7 - 我怎样插入一个文件？
：r<文件名>
例如，要插入文件/etc/motd,可以输入 :r /etc/motd。
这将把文件插入到光标处，如果你在r前面指定了一个数字，那么这条命令将把文件插入到
那个位置。
*** - 我怎样查找文本？
/<文本>将向前查找。?<文本>将身后查找。??或者//将重复上次查找。在UNIX下，这已经是
个可爱的标准用法了。而且，在vi中，n将查找文本下一次的出现位置。N重复上次查找，不
过逆转了查找的方向。在查找中可以使用规范式。
*** 2.9 - 我怎样搜索一个控制序列？
/^V^<序列>
^V会告诉vi照字面理解下一个字符，不要把它看作是一条命令。
*** 2.10 - 我怎样重新格式化文本？
如果你的计算机有一个名叫fmt的程序，你要做的仅仅是在命令模式下输入！}fmt(记住不要
在前面加icon_smile.gif。这可以重新格式化你的文件，从光标所在的位置一直到当前段落
的结尾。如果你的机器里面没有fmt这个程序，你就得去找个类似的软件了（我记得在公共
区域里有不少这样的程序，但是我对此了解不多）
*** 2.11 - 我怎样复制文本？
这有点复杂。把这节拿出来，多看几遍；还有，一定要多做实验。
"<字母>yy可以把一行文本拷贝到寄存器中（这里的寄存器是vi的术语，指可以存放剪切和
拷贝下来的东西的地方），<字母>里面的字母必须是a到z之间的一个。"<字母>dd可以把一
行剪切下来放到寄存器里面。你可以在yy或者dd前面用数字指明要拷贝或者剪切的行数。如
果<字母>中的字母是大写的话，意味着把文本插入到寄存器中已有的文本之前。
"<字母>p把文本插入到光标之后，"<字母>P把文本插入到光标之前。如果寄存器中含有某一
行的开头或结尾，这一行将会被放到另一合适的行上。Y是yy的快捷方式。还有，y$,yH,yM,
等等，都是可以用的。d命令也是一样的。如果要快速的剪切和粘贴，你就无须指定寄存器
了。如果这样的话，你就不能往寄存器里面添加文本了。而且只要有一个删除命令的话，寄
存器中的东西就没有了（包括x命令）。
举例来说，如果要移动上一段的话，你可以把光标移到段落的开头，输入"al3dd,再把光标
移到你想要放文本的地方，输入"ap，就可以把那段文本放到光标所在的行后面。
现在，大概你想要剪切和粘贴文本到不是行末尾的区域去，我们来看如何做到这一点：我们
可以使用m<字母>命令来标记一个区域，这个字母可以和剪切/粘贴寄存器的字母相同，因为
它们是保存在内存中的不同位置。然后，输入"<寄存器>'<字母>[yy或者dd]，这里的寄存器
就是要保存文本的那个寄存器，<字母>是用来标记的，yy和dd是你的操作。
*** DONE 2.12 - 啊！我刚才敲了一个dG，然后我的论文就没有了！我该怎么办？
    CLOSED: [2016-07-24 Sun 16:58]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-07-24 Sun 16:58]
    CLOCK: [2016-07-24 Sun 16:26]--[2016-07-24 Sun 16:58] =>  0:32
    :END:
(或者，我刚才犯了个错误，我该怎么办？）
u可以撤消你刚才的操作，U可以撤消你对当前行的修改（当然，一行对于一篇论文来说当然
很不够了）。:e!可以不保存修改而重新把你的文件调进来。还有你删除的文本都保存在从0
到9编号的寄存器里。所以，"<n>p就可以把上第n次的删除文本粘贴出来，你可以按如下的
方法迅速地查看所有删除的文本。先试一个，不对的话，敲u，再试下一个。（为加速这个
过程，这时vi中的.命令和通常的用法不一样了。它不是重复上次操作，而是试下一个寄存
器，这样你要做的无非就是："lp u . u .，直到你撤消了你想撤消的删除操作）
*** 2.13 - 我正在写我的论文，被告知我必须将每一节都放在不同的文件里，我该怎么办？
:[m],[n]w<文件名>可以将从第m行到第n行之间的文本保存到<文件名>所指定的文件中。这
种行序号方法几乎在所有的:命令下都可以使用。如果你用命令:[m],[n] w>><文件名>,这些
文本将添加到文件的后面。
*** 2.14 - 所有的命令都是怎样处理的？
:后面的命令都是从ex编辑器里面过来的。这就给vi加入了很多灵活性，也使vi功能更强大。
例如，有很多的方法可以用来查找和替换，它们有很多的类似地方（事实上，它们在某种意
义上说都是一样的）
*** 3.0 - 怎样查找和替换
有很多方法。最简单的是：
:s/old/new/g,但是，这仅对当前行起作用）……，所以，我们用
:%s/old/new/g,更一般的，我们 还可以用
:[范围]s/old/new/[cg]，这里，[范围]是任意的行范围，包括行号，$（文件末尾），.(当
前行），%(当前文件),或者两个行号之间加个破折号（或者可以这样：.,+5,这表示下面
5行）。[cgi]是c,g,i中间的一个或者什么也没有。c告诉vi每次替换的时候要给提示，g是
说对所有一行中出现的地方都做替换，i则是指在查找时不区分大小写。如果最后一个斜杠
(/）后面没有东西的话，那么vi只替换在行中第一次匹配的地方。
我比较喜欢这样做：
:g/foobar/s/bar/baz/g,这个命令首先搜寻foobar,然后把它变成foobaz，它没有改变
jailbars,而其他的一些命令可能会改变jailbars。这是我的方法，但是可能比较难记。当
然，你还可以在查找的时候使用正规式，以及在替换文本的时候使用其他一些命令。如果你
在正规式里用（和）来剥离一个序列的话，你会发现你可以做很多好玩的事情。
例如：
:g/(foo)(bar)/s/2/lbaz/g 将foobar替换成foobaz
还有一些特殊的序列：
&所有查找时匹配到的东西
[1-9]1到9号用（和）括起来的东西
u 下一个字符将被变成大写。
U 以后的字符都变成大写，，直到遇到e或E
l(L)下一个字符将被变成小写。
L 以后的字符都变成大写，直到遇到e或E
[Ee]更改大小写的选择区域的终点
*** DONE 3.1 -  我怎样在vi中运行一个程序？
    CLOSED: [2016-07-25 Mon 21:28]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-07-25 Mon 21:28]
    CLOCK: [2016-07-25 Mon 21:12]--[2016-07-25 Mon 21:28] =>  0:16
    :END:
:!命令 可以在vi中运行程序。:sh会启动一个交互式的外壳(shell)。在这个外壳里面，如
果你愿意，你还可以两次运行vi，当你 在编辑Makefiles和配置文件来编译某个程序的时候，
这可能比较有用。这比:e优越之处在于它无须保存文件，而且如果你退出外壳的时候，vi还
回到原来的地方。（当然，我还是建议你先保存一下文件）

*** 3.2 - 啊！我正在写我的论文，系统崩溃了！怎么办？
不要怕！你会收到一封电子邮件，里面就是你的论文。敲入vi -r<文件名>（这个文件名就
是系统崩溃时你正在编辑的文件）你就可以恢复出你的论文来。只敲入vi -r将把所有可能
恢复的文件都列出来。
*** 3.3 - 有没有使vi对程序员更友好的窍门？
：set ai可以让vi自动对齐。
： set sw=#,# 是移动的宽度（shiftwidth)，或者说TAB键的宽度（tabwidth)；你可以用
<<或者>>命令来左移或右移；这时候，你必须把光标放在这些符号（{，（或[)上面。
：set sm 会在你敲}，]或）显示出对应匹配的{，[或（来。
：set lisp会对lisp编程有些帮助。（）被移到s表达式（s-expressions）外面，如果原子
（atoms）没有停止则{}将被移走。
