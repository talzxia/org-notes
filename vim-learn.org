* studay
** DONE study 一-三节
   CLOSED: [2017-03-02 Thu 08:52]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-02 Thu 08:52]
   CLOCK: [2017-03-02 Thu 08:34]--[2017-03-02 Thu 08:52] =>  0:18
   :END:
** DONE Practice<2017-03-02 Thu 08:52>
   CLOSED: [2017-03-02 Thu 09:19]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-02 Thu 09:19]
   CLOCK: [2017-03-02 Thu 08:52]--[2017-03-02 Thu 09:19] =>  0:27
   :END:
** DONE Study<2017-03-03 Fri 08:19>
   CLOSED: [2017-03-03 Fri 09:27]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-03 Fri 09:27]
   CLOCK: [2017-03-03 Fri 08:18]--[2017-03-03 Fri 09:27] =>  1:09
   :END:
yank是什么意思？有疑问的请查一下典吧!就好像是中国中医治疗中的拔罐的意思啦（是不
是叫【拔罐】？知道的朋友指正一下吧）！反正在Vim中它就是复制copy的意思。这在Vim的
思考逻辑里，就是【拔】yank起来，【放】put上去，其实复制的指令就是y一个而已。为什
么要独立成一个单元来说明呢？因为Vim复制、粘贴的功能实在太独特了，再配合第三个单
元介绍的数目字，及Vim内部的缓冲区的使用的话，您会发现，原来Vim肚子里还暗藏着秘密
武器。
yy 复制游标所在整行。或大写一个Y。

2yy 或y2y 复制两行。
y^ 复制至行首，或y0。不含游标所处的字元。
y$ 复制至行尾。含游标所处的字元。
yw 复制一个word。
y2w 复制两个字。
yG 复制至文件尾。
y1G 复制至档首。
p 小写p 代表贴至游标后（下）。
P 大写P 代表粘至游标前（上）。
整行的複製，按 p 或 P 時是插入式的貼在下（上）一行。非整行的複製則是貼在游標所在處之後（前）。
"ayy  將本行文字複製到 a 緩衝區
a 可為 26 個英文字母中的一個，如果是小寫的話，原先的內容會被清掉，如果是大寫的話
是 append 的作用，會把內容附加到原先內容之後。

" 是 Enter 鍵隔壁的那一個同上符號（ditto marks）。
"ap  將 a 緩衝區的內容貼上。
緩衝區的術語在 vim 稱為 registers，vim 擴充了相當多的功能，有興趣深入的朋友請 :h
registers。您用 d、c、s、x、y 等指令改變或刪除的內容都是放在 registers 中的。例
如：您用 dd 刪除的一行，也是可以使用 p 來貼上的。只要是在緩衝區的內容都可以使用
p 來貼上，不是一定要 y 起來的內容才能用 p。因此您認為 p 是 paste 也可以，認為是
put 可能較正確。

5"ayy  複製五行內容至 a 緩衝區。
5"Ayy  再複製五行附在 a 內容之後，現在 a 中有十行內容了！
ㄟ！不要我一直用 a 您就認為只有 a 可以用喔。26 個英文字母都可以的，交叉運用下，
您會發覺 vi(m) 肚量不小。

問題來了！忘記誰是誰的時候怎麼辦？ :reg（冒號命令）就會列出所有 registers 的代號
及內容。您現在就試著按看看。咦！怎麼還有數目字、特殊符號的緩衝區，原來您剛剛刪除
（複製）的內容就預設放在 " 這個緩衝區，然後依序是 0,1,2,...9。也就是說您按 p 不
加什麼的話，是取出 " 緩衝區的內容的。% 指的是目前編輯的檔案，# 指的是前一次編輯
的檔案。還有其它的呀！因為沒什麼重要，就請 :h registers 吧！registers 有個 "s"
結尾，不要搞錯了，而且 Tab 的補全鍵 vim 也支援的，也就是說您鍵入 :h regi 再按
Tab 鍵，vim 就會幫您補全，按了 Tab 後發現不是您要的，那就繼續按，總會出現您要
的。:-)

Tab 補全的功能，elvis 也有，但叫出 registers 列表的命令則沒有，您得自行記憶在您
的腦袋瓜子裡。而且 elvis 的補全能力並沒 vim 強。



天大的指令
  .  這是什麼？ㄚ，是英文句點啦！沒錯，就是英文句點。什麼意
     思？重複前次的編輯動作。這個指令太高明了，只要是編輯動
     作（移動游標不算，冒號命令也不算）都可以按英文句點來重
     複，要重複幾次都可以。
例如：您按了 yy，然後按 p 就會複製、貼上一整行，如果要重複這個動作的話，就可以按
  . ，也可以把游標移到其它地方後再按。其它 dd，dw，r，cw 等編輯指令都可以這樣來
  重複。如果您要重複做某些編輯動作時，千萬千萬一定要想到有這麼一個英文句點重複指
  令。ㄚ，拜託啦！您一定要常用這個指令。



疑難雜症
1. 那 mouse 中鍵的剪貼功能還有嗎？
當然還有，不管在 console 或 X terminal 中都照用不誤。當然在 windows 下的話就不能
用了，可以用 Shift-Insert 來代替。Ctrl-v 在 vim 中另有作用，在 windows 下就不必
去麻煩它了。

2. ㄟ，我從 netscape 用 mouse copy 東東過來的時候，常常都搞得天下大亂耶！
要設成 :set paste，預設是 map 至 F9 鍵的，您要 copy 之前先按一下 F9，copy 完後再
按一次 F9 來回復。這是 vim 的擴充功能，elvis 沒有。那在 elvis 怎麼辦？只好 :set
noai 了。在 GUI 的版本應不會有這種情形。

set 的功能先不必去理它，往後會有一個單元專門討論。


朋友！您睡著了嗎？不要被嚇到了，您只要開個檔案，親自操作一下就能心領神會。那用
mouse 不是更方便嗎？不見得，yyp 來複製貼上一整行比較快，還是用 mouse 來拉比較快？
您可以試看看。

大家來學VIM（一個歷久彌新的編輯器）[五]

尋找、替換



搜尋、替換的功能幾乎是每個編輯器必備的功能，那在 vi(m) 中有沒有特殊的地方呢？當
然有，您忘了，vi(m) 是個性十足的編輯器。最特殊的地方是和規則表示式（regular
expression,簡稱 regexp）結合在一起。簡單的說她是一種 pattern 的表示法，在執行動
作，如尋找或替換，就會依據這個 pattern 去找，所有符合 pattern 的地方就會執行您所
下的動作。在這個單元裡暫不討論 regexp，會另立一個單元來探討，以免搞得頭昏腦脹。
目前就暫不使用 regexp，您要找什麼就直接鍵入什麼就對了。




尋找
/  在 c-mode 的情形下，按 / 就會在左下角出現一個 /，然後鍵
   入您要尋找的字串，按個 Enter 就會開始找。
?  和 / 相同，只是 / 是向前（下）找，? 則是向後（上）找。
n  繼續尋找。
N  繼續尋找（反向）。


更方便的尋找操作（vim 才有）
\*  尋找游標所在處之 word（要完全符合）。
\#  同上，但 * 是向前（下）找，# 則是向後（上）找。
g* 同 * ，但部份符合即可。
g# 同 # ，但部份符合即可。
n, N 之繼續尋找鍵仍適用。


替換（substitute）
:[range]s/pattern/string/[c,e,g,i]

range  指的是範圍，1,7 指從第一行至第七行，1,$ 指從第一行
       至最後一行，也就是整篇文章，也可以 % 代表。
還記得嗎？ % 是目前編輯的文章，# 是前一次編輯的文章。
pattern  就是要被替換掉的字串，可以用 regexp 來表示。
string   將 pattern 由 string 所取代。
c  confirm，每次替換前會詢問。
e  不顯示 error。
g  globe，不詢問，整行替換。
i  ignore 不分大小寫。
g 大概都是要加的，否則只會替換每一行的第一個符合字串。可以合起來用，如 cgi，表示
       不分大小寫，整行替換，替換前要詢問是否替換。

[實例]　:%s/Edward/Edward/g
　　　　這樣整篇文章的 Edward 就會替換成 Edward。
更進階的尋找、替換的例子在說明 regexp 的時候還會再詳述。目前只知道最基本的用法就
       可以了！其實光這樣就非常好用了。:-)




書籤功能
這又是 vi(m) 的一個秘密武器，簡單的說，您可以在文章中的某處做個記號（marks），然
後跑到其它地方去編輯，在呼叫這個 mark 時又會回到原處。妙吧！


mx  x 代表 26 個小寫英文字母，這樣游標所在處就會被 mark。
`x  回到書籤原設定位置。
` 是 backward quote，就是 Tab 鍵上面那一個。
'x  回到書籤設定行行首。
' 是 forward quote，是 Enter 鍵隔壁那一個。


vim 對於書籤的擴充功能
小寫字母  只作用於單一檔案內。
大寫字母  可作用於編輯中之各檔案間。
數目字    可作用於前次編輯的十個檔案。
數目字的用法比較特殊，'0 是回到前一次編輯檔案中離開前的最後位置，'1 則是回到前二
次編輯檔案的最後位置，依此類推。您不必使用 m 來標示，vim 會自動記憶。很玄吧！其
實這是 viminfo 的功能，您要認真追究的話，請 :h viminfo-file-marks。viminfo 關掉，
就沒這個功能了！

所謂前次指的是前次啟動的 vim。
:marks  得知目前所有書籤的列表。


** DONE practice<2017-03-16 四 14:30>
   CLOSED: [2017-03-16 四 16:21]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-16 四 16:21]
   CLOCK: [2017-03-16 四 14:30]--[2017-03-16 四 16:21] =>  1:51
   :END:
